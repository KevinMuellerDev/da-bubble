var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AddNewChannelComponent.html",[0,0.013,1,0.708]],["body/components/AddNewChannelComponent.html",[0,0.019,1,1.107,2,0.935,3,0.187,4,0.16,5,0.703,6,0.654,7,0.703,8,0.16,9,4.664,10,0.986,11,4.22,12,2.113,13,0.654,14,1.551,15,1.663,16,1.377,17,1.111,18,0.935,19,0.68,20,1.005,21,2.867,22,2.622,23,1.259,24,1.218,25,1.005,26,3.444,27,1.157,28,3.444,29,0.16,30,0.268,31,4.021,32,1.865,33,1.645,34,2.147,35,4.021,36,4.768,37,2.482,38,0.484,39,1.259,40,4.972,41,3.443,42,5.727,43,0.339,44,1.717,45,3.028,46,3.545,47,0.6,48,3.444,49,0.484,50,0.028,51,0.387,52,0.349,53,0.617,54,4.085,55,3.243,56,2.856,57,1.212,58,4.085,59,2.633,60,1.771,61,2.707,62,2.786,63,3.316,64,3.161,65,4.768,66,4.768,67,1.014,68,5.204,69,1.645,70,0.566,71,2.856,72,2.067,73,3.023,74,1.036,75,2.707,76,0.747,77,2.856,78,2.456,79,1.787,80,2.23,81,3.444,82,4.085,83,4.085,84,4.085,85,0.747,86,0.679,87,0.679,88,0.869,89,1.531,90,2.408,91,2.856,92,4.388,93,2.408,94,3.161,95,2.408,96,2.246,97,2.408,98,0.739,99,0.703,100,0.564,101,0.306,102,1.071,103,1.15,104,1.445,105,2.856,106,2.707,107,2.856,108,2.408,109,1.893,110,2.856,111,0.187,112,0.133,113,1.717,114,0.93,115,2.856,116,1.571,117,2.246,118,1.336,119,1.571,120,0.654,121,2.113,122,2.408,123,0.564,124,2.408,125,1.238,126,1.445,127,2.113,128,4.085,129,2.408,130,2.113,131,2.408,132,4.021,133,2.408,134,2.113,135,1.893,136,2.113,137,4.085,138,2.408,139,0.608,140,2.856,141,2.856,142,4.085,143,1.893,144,2.408,145,2.856,146,2.856,147,2.856,148,2.856,149,3.851,150,1.91,151,4.085,152,3.444,153,4.085,154,4.085,155,4.085,156,4.085,157,4.085,158,3.444,159,4.085,160,4.085,161,4.085,162,4.085,163,4.085,164,4.085,165,3.444,166,3.023,167,3.023,168,3.023,169,3.444,170,3.444,171,3.023,172,2.456,173,3.023,174,3.444,175,3.444,176,3.444,177,0.703,178,1.005,179,0.935,180,0.522,181,1.28,182,0.703,183,1.173,184,0.608,185,1.28,186,0.608,187,0.608,188,0.703,189,0.654,190,0.654,191,0.703,192,0.608,193,0.703,194,0.608,195,0.703,196,0.608,197,0.654,198,0.608,199,0.703,200,0.608,201,0.703,202,0.654,203,0.703,204,0.608,205,0.703,206,0.654,207,0.703,208,0.654,209,0.703,210,0.608,211,0.703,212,0.608,213,0.703,214,0.608,215,0.654,216,0.703,217,0.608,218,0.703,219,0.654,220,0.703,221,0.608,222,0.654,223,0.608,224,0.703,225,0.654,226,0.564,227,0.654,228,0.703,229,0.016,230,0.016]],["title/components/AddNewUserToChannelComponent.html",[0,0.013,24,0.708]],["body/components/AddNewUserToChannelComponent.html",[0,0.017,1,0.505,2,0.816,3,0.155,4,0.133,5,0.583,6,0.543,7,0.583,8,0.133,9,4.794,10,0.983,11,4.294,12,1.755,13,0.543,14,1.522,15,1.631,16,1.268,17,1.022,18,0.816,19,0.611,20,0.877,21,2.574,22,2.355,23,1.131,24,1.013,25,0.877,26,3.006,27,1.009,28,3.006,29,0.286,30,0.234,32,1.746,35,3.611,37,2.324,38,0.423,39,1.131,40,4.521,43,0.508,47,0.62,48,2,49,0.423,50,0.028,51,0.365,52,0.361,53,0.565,55,1.304,57,1.256,59,2.167,62,1.804,67,0.758,69,1.918,70,0.66,72,1.804,74,1.177,76,1.017,79,2.145,80,2.507,85,0.933,86,0.725,87,0.778,88,0.911,89,1.336,90,2,93,2,95,2,96,1.96,97,2,98,0.707,99,0.583,100,0.468,101,0.254,102,0.889,103,0.955,104,1.2,109,1.572,111,0.155,112,0.111,120,0.816,123,1.058,125,1.545,149,2.637,177,0.583,178,0.877,179,1.09,180,0.434,181,1.171,182,0.583,183,1.053,184,0.505,185,1.171,186,0.505,187,0.505,188,0.583,189,0.543,190,0.543,191,0.583,192,0.505,193,0.583,194,0.505,195,0.583,196,0.505,197,0.543,198,0.505,199,0.583,200,0.505,201,0.583,202,0.543,203,0.583,204,0.505,205,0.583,206,0.543,207,0.583,208,0.543,209,0.583,210,0.505,211,0.583,212,0.505,213,0.583,214,0.505,215,0.543,216,0.583,217,0.505,218,0.583,219,0.543,220,0.583,221,0.505,222,0.98,223,0.505,224,0.583,225,0.543,226,0.468,227,0.543,228,0.583,229,0.014,230,0.019,231,3.168,232,4.282,233,4.282,234,5.106,235,4.69,236,4.282,237,2.387,238,4.115,239,1.227,240,5.361,241,3.967,242,4.521,243,4.015,244,4.521,245,4.521,246,2.372,247,2.372,248,3.564,249,3.223,250,2.637,251,2.372,252,3.564,253,3.006,254,1.96,255,2.372,256,1.804,257,3.156,258,2.676,259,3.223,260,3.553,261,2.372,262,2.143,263,2.637,264,3.006,265,3.564,266,3.006,267,2.372,268,3.223,269,2.363,270,2.143,271,2.363,272,3.006,273,2.637,274,3.006,275,2.372,276,3.006,277,1.96,278,3.611,279,3.611,280,2.372,281,2.637,282,1.545,283,2.637,284,1.96,285,2.372,286,2.372,287,2.372,288,1.755,289,1.667,290,2.372,291,2.372,292,3.168,293,2.637,294,2.372,295,1.161,296,1.804,297,1.028,298,1.755,299,2.372,300,2.372,301,2.372,302,2.372,303,2.372,304,2,305,3.564,306,2.372,307,2,308,2.372,309,0.602,310,2.372,311,2.372,312,3.564,313,2.372,314,3.611,315,2,316,2,317,2.574,318,2.372,319,1.545,320,3.006,321,3.168,322,2.637,323,3.006,324,3.564,325,3.006,326,2,327,1.572,328,2,329,1.755,330,2,331,2,332,2,333,2,334,2.372,335,0.72,336,2.372,337,2.372,338,2.372,339,4.015,340,3.553,341,3.564,342,3.006,343,3.006,344,3.006,345,3.564,346,2.863,347,4.015,348,3.006,349,1.161]],["title/components/AddUserDialogComponent.html",[0,0.013,184,0.708]],["body/components/AddUserDialogComponent.html",[0,0.018,1,0.579,2,0.903,3,0.179,4,0.152,5,0.67,6,0.623,7,0.67,8,0.152,10,0.726,13,0.623,14,1.544,15,1.655,16,1.311,17,0.784,18,0.903,19,0.563,20,0.971,21,2.791,22,2.553,23,1.226,24,0.579,25,0.971,27,1.118,29,0.302,30,0.259,32,1.835,34,1.479,38,0.468,39,1.488,47,0.613,49,0.551,50,0.028,51,0.404,52,0.362,53,0.551,55,2.8,57,1.175,59,2.349,62,1.997,67,0.84,69,2.05,70,0.668,74,1.179,76,0.93,79,2.112,80,2.38,85,0.498,86,0.735,87,0.791,89,1.479,98,0.706,99,0.67,100,0.538,101,0.292,102,1.021,103,1.097,104,1.378,111,0.179,112,0.127,120,0.903,123,1.067,125,1.711,150,1.273,165,3.328,177,0.67,178,0.971,179,0.903,180,0.498,181,1.252,182,0.67,183,1.142,184,1.083,185,1.252,186,0.579,187,0.579,188,0.67,189,0.623,190,0.623,191,0.67,192,0.579,193,0.67,194,0.579,195,0.67,196,0.579,197,0.623,198,0.579,199,0.67,200,0.579,201,0.67,202,0.623,203,0.67,204,0.579,205,0.67,206,0.623,207,0.67,208,0.623,209,0.67,210,0.579,211,0.67,212,0.579,213,0.67,214,0.579,215,0.623,216,0.67,217,0.579,218,0.67,219,0.623,220,0.67,221,0.579,222,0.623,223,0.579,224,0.67,225,0.623,226,0.538,227,0.623,228,0.67,229,0.016,230,0.02,231,3.435,234,5.263,235,3.328,237,2.171,238,4.301,239,1.29,241,3.767,243,4.293,244,4.751,245,4.751,249,2.373,258,2.527,259,2.373,260,3.374,266,3.328,268,3.388,269,2.616,270,2.373,271,2.616,272,3.328,273,2.92,274,3.328,276,3.328,277,2.171,278,3.914,279,3.914,281,2.92,282,1.711,283,2.92,284,2.171,289,1.273,292,3.435,293,2.92,295,1.285,296,1.378,297,1.18,298,2.015,309,0.46,314,3.328,315,2.296,316,2.296,317,2.791,319,2.207,320,3.328,321,2.92,322,2.015,323,3.328,325,2.296,326,2.296,327,1.805,328,2.296,329,2.015,330,3.328,331,2.296,332,2.296,333,2.296,335,1.41,339,3.328,340,2.616,344,3.328,346,3.061,347,4.293,348,3.328,349,1.285,350,4.75,351,3.859,352,1.637,353,2.616,354,2.616,355,3.914,356,2.635,357,3.947,358,5.091,359,2.723,360,2.723,361,2.723,362,2.723,363,3.947,364,2.723,365,2.723,366,2.723,367,1.805,368,1.805,369,1.846,370,1.805,371,2.296,372,2.015,373,2.296,374,2.015,375,1.805,376,2.296,377,1.498,378,1.637,379,1.637,380,1.18,381,2.723,382,2.723,383,2.723,384,2.723,385,1.498,386,2.015,387,3.947,388,2.723,389,2.723,390,2.723,391,2.723,392,1.805,393,2.92,394,2.723,395,2.296,396,1.805,397,2.296,398,3.947,399,3.947]],["title/components/AddUserToChannelDialogComponent.html",[0,0.013,186,0.708]],["body/components/AddUserToChannelDialogComponent.html",[0,0.019,1,0.636,2,0.966,3,0.196,4,0.167,5,0.735,6,0.684,7,0.735,8,0.167,10,0.602,13,0.684,14,1.557,15,1.67,16,1.338,17,1.17,18,0.966,19,0.758,20,1.037,21,2.939,22,2.688,23,1.291,24,0.636,25,1.037,27,1.195,29,0.274,30,0.277,32,1.893,33,1.699,34,2.287,38,0.5,39,1.535,43,0.354,44,1.797,45,3.08,46,2.536,47,0.627,49,0.58,50,0.028,51,0.381,52,0.359,53,0.58,70,0.664,72,2.134,74,1.174,76,0.771,85,1.024,86,0.693,87,0.693,88,0.636,89,1.581,98,0.724,99,0.735,100,0.59,101,0.32,102,1.12,103,1.204,104,1.512,111,0.196,112,0.139,113,1.797,116,1.643,117,2.32,118,1.397,119,1.643,123,0.833,139,0.636,177,0.735,178,1.037,179,0.966,180,0.546,181,1.306,182,0.735,183,1.202,184,0.636,185,1.306,186,1.13,187,0.636,188,0.735,189,0.684,190,0.684,191,0.735,192,0.636,193,0.735,194,0.636,195,0.735,196,0.636,197,0.684,198,0.636,199,0.735,200,0.636,201,0.735,202,0.684,203,0.735,204,0.636,205,0.735,206,0.684,207,0.735,208,0.684,209,0.735,210,0.636,211,0.735,212,0.636,213,0.735,214,0.897,215,0.966,216,0.735,217,0.636,218,0.735,219,0.684,220,0.735,221,0.636,222,0.684,223,0.636,224,0.735,225,0.684,226,0.59,227,0.684,228,0.735,229,0.017,230,0.017,239,1.331,288,2.211,289,1.972,295,1.373,296,1.512,297,1.295,340,2.796,342,4.478,346,2.536,350,4.851,351,3.942,352,1.797,353,2.796,354,2.796,355,4.122,367,1.981,368,1.981,370,1.981,372,2.211,374,2.211,400,4.889,401,4.889,402,4.889,403,4.044,404,3.121,405,4.218,406,4.478,407,5.311,408,5.311,409,3.121,410,4.218,411,2.988,412,4.218,413,2.32,414,2.921,415,2.536,416,4.218,417,2.988,418,2.988,419,4.218,420,3.557,421,2.988,422,2.988,423,3.139,424,4.218,425,3.93,426,2.988,427,2.211,428,4.218,429,4.218,430,4.218,431,2.988,432,2.988,433,2.988,434,1.981,435,2.52,436,2.796,437,2.134,438,3.121,439,2.796,440,2.52,441,2.988,442,2.52,443,1.981,444,1.512,445,2.988,446,2.52,447,1.981,448,1.797,449,2.988,450,2.988,451,2.988,452,2.988,453,2.988,454,2.988,455,4.218,456,4.218,457,3.121]],["title/components/AppComponent.html",[0,0.013,187,0.708]],["body/components/AppComponent.html",[0,0.023,1,0.875,2,1.196,3,0.269,4,0.23,5,1.011,6,0.941,7,1.011,8,0.23,10,0.746,13,0.941,14,1.595,15,1.712,16,1.286,17,0.97,18,1.196,19,0.746,20,1.285,23,1.517,24,0.875,25,1.285,27,1.48,29,0.23,30,0.343,43,0.681,47,0.582,50,0.028,51,0.377,52,0.321,74,1.02,86,0.749,87,0.749,98,0.74,99,1.011,100,0.812,101,0.441,111,0.269,112,0.192,126,2.907,177,1.011,178,1.285,179,1.196,180,0.751,181,1.487,182,1.011,183,1.413,184,0.875,185,1.487,186,0.875,187,1.286,188,1.011,189,0.941,190,0.941,191,1.011,192,0.875,193,1.011,194,0.875,195,1.011,196,0.875,197,0.941,198,0.875,199,1.011,200,0.875,201,1.011,202,0.941,203,1.011,204,0.875,205,1.011,206,0.941,207,1.011,208,0.941,209,1.011,210,0.875,211,1.011,212,0.875,213,1.011,214,0.875,215,0.941,216,1.011,217,0.875,218,1.011,219,0.941,220,1.011,221,0.875,222,0.941,223,0.875,224,1.011,225,0.941,226,0.812,227,0.941,228,1.011,229,0.021,230,0.021,239,1.46,295,1.701,297,1.782,309,0.694,356,2.982,369,2.443,380,1.782,458,3.467,459,2.104,460,5.744,461,5.225,462,5.225,463,5.225,464,4.111,465,4.406,466,4.406,467,4.111,468,1.782]],["title/injectables/AuthService.html",[469,0.818,470,1.829]],["body/injectables/AuthService.html",[3,0.259,4,0.221,8,0.221,29,0.221,30,0.334,38,0.605,39,1.736,43,0.469,47,0.608,49,0.707,50,0.028,51,0.391,52,0.353,53,0.707,57,1.006,67,1.2,70,0.669,74,1.066,85,0.932,86,0.665,87,0.665,88,1.084,98,0.731,100,0.781,101,0.424,111,0.259,112,0.185,120,1.364,123,1.113,136,2.926,229,0.02,230,0.02,239,1.445,309,1.167,335,1.548,356,2.952,369,2.384,380,1.714,459,1.593,469,1.254,470,2.803,471,1.714,472,3.335,473,4.756,474,4.298,475,5.097,476,5.097,477,3.955,478,5.097,479,5.097,480,4.394,481,3.955,482,4.408,483,4.184,484,5.097,485,3.391,486,5.097,487,3.772,488,4.298,489,5.097,490,3.955,491,2.583,492,5.323,493,4.865,494,3.065,495,5.097,496,5.097,497,3.955,498,3.582,499,3.955,500,3.276,501,3.955,502,3.955,503,2.926,504,3.335,505,3.955,506,2.378,507,1.849,508,1.714,509,3.955,510,3.955,511,3.955,512,4.174,513,5.097,514,3.772,515,3.955,516,3.955,517,3.955]],["title/classes/ChannelData.html",[106,2.205,112,0.155]],["body/classes/ChannelData.html",[3,0.293,4,0.25,8,0.25,29,0.25,30,0.361,33,2.623,38,0.653,43,0.53,47,0.635,49,0.653,50,0.028,51,0.361,52,0.364,53,0.653,67,1.429,70,0.653,76,0.817,106,3.649,111,0.293,112,0.208,125,2.772,126,3.399,127,3.306,139,0.951,229,0.022,230,0.022,258,2.99,309,1.175,377,3.629,518,2.962,519,3.768,520,5.505,521,5.251,522,4.073,523,5.505,524,3.306,525,4.469,526,4.469,527,4.469,528,5.505,529,4.469,530,4.469,531,5.966,532,4.469,533,5.966,534,4.469,535,5.966,536,5.966,537,4.469]],["title/interfaces/ChannelInfo.html",[94,2.205,538,2]],["body/interfaces/ChannelInfo.html",[3,0.337,4,0.288,8,0.288,29,0.288,30,0.393,50,0.027,52,0.365,67,1.388,94,3.969,111,0.337,126,3.302,229,0.024,230,0.024,258,3.051,309,1.172,377,3.588,538,3.091,539,3.805,540,4.335]],["title/components/ChooseavatarComponent.html",[0,0.013,192,0.708]],["body/components/ChooseavatarComponent.html",[0,0.021,1,0.439,2,0.733,3,0.135,4,0.115,5,0.507,6,0.472,7,0.507,8,0.327,10,0.684,13,0.472,14,1.498,15,1.604,16,0.942,17,0.663,18,0.733,19,0.56,20,0.788,23,1.037,24,0.439,25,0.788,29,0.22,30,0.21,34,1.201,38,0.38,39,1.037,43,0.245,47,0.586,49,0.525,50,0.028,51,0.369,52,0.315,53,0.525,64,2.123,67,0.836,70,0.628,74,0.924,76,0.876,78,1.926,79,1.66,80,2.373,86,0.662,87,0.662,88,0.836,98,0.681,99,0.507,100,0.407,101,0.221,111,0.135,112,0.096,114,0.672,118,1.498,120,0.899,123,0.775,126,1.621,136,1.526,139,0.439,173,2.37,177,0.507,178,0.788,179,1.162,180,0.377,181,1.089,182,0.507,183,0.966,184,0.439,185,1.089,186,0.439,187,0.439,188,0.507,189,0.472,190,0.472,191,0.507,192,0.942,193,0.507,194,0.439,195,0.507,196,0.439,197,0.472,198,0.439,199,0.507,200,0.439,201,0.507,202,0.472,203,0.507,204,0.439,205,0.507,206,0.472,207,0.507,208,0.472,209,0.507,210,0.942,211,0.507,212,0.439,213,0.507,214,0.439,215,0.472,216,0.507,217,0.439,218,0.507,219,0.472,220,0.507,221,0.439,222,0.472,223,0.439,224,0.507,225,0.472,226,0.407,227,0.472,228,0.507,229,0.013,230,0.013,237,0.964,239,1.162,260,3.178,263,3.547,277,2.435,295,1.043,297,0.894,309,0.949,319,1.388,327,3.628,335,1.456,349,2.052,414,1.134,436,2.935,437,2.241,468,0.894,493,1.526,498,2.662,500,1.762,506,1.24,508,0.894,512,1.526,541,1.526,542,1.739,543,1.762,544,2.906,545,3.203,546,2.16,547,2.701,548,3.927,549,3.203,550,4.043,551,2.906,552,4.043,553,3.927,554,4.794,555,3.755,556,4.428,557,2.662,558,3.203,559,4.428,560,2.701,561,3.734,562,1.739,563,3.363,564,3.184,565,3.203,566,3.203,567,2.062,568,3.276,569,2.37,570,3.927,571,2.701,572,2.062,573,2.37,574,3.927,575,3.051,576,2.701,577,2.123,578,2.701,579,2.37,580,2.062,581,2.37,582,4.428,583,1.926,584,2.701,585,2.123,586,3.203,587,3.203,588,4.043,589,2.062,590,2.123,591,1.762,592,3.203,593,4.428,594,2.062,595,2.701,596,2.701,597,2.062,598,2.701,599,5.313,600,1.762,601,1.926,602,2.062,603,2.123,604,1.926,605,2.701,606,2.062,607,2.791,608,2.062,609,2.701,610,2.062,611,2.062,612,2.062,613,1.739,614,2.062,615,2.062,616,2.062,617,1.134,618,2.603,619,1.526,620,1.526,621,1.24,622,1.367,623,1.526,624,1.526,625,4.507,626,1.526,627,2.37,628,1.526,629,1.526,630,1.526,631,2.062,632,1.526,633,2.37,634,2.37,635,1.526,636,2.062,637,2.062,638,3.734,639,2.062,640,2.062,641,2.062,642,1.739,643,2.062,644,2.062,645,1.739,646,1.739,647,1.739,648,2.062,649,2.062,650,2.062,651,1.739,652,1.526,653,2.062,654,2.062,655,2.062,656,2.062,657,2.062,658,2.062,659,2.062,660,2.062,661,3.203,662,2.062,663,2.37,664,2.062,665,1.367,666,1.762,667,3.203,668,3.203,669,2.701,670,3.203,671,3.203,672,3.203,673,3.203,674,3.203,675,2.701,676,2.701,677,2.701,678,1.926,679,2.123,680,2.701,681,3.203,682,2.701,683,1.739,684,1.739,685,3.312,686,2.701,687,1.739,688,2.062,689,3.927,690,4.616,691,3.51,692,3.203,693,1.739,694,2.062,695,3.734,696,4.845,697,3.312,698,2.37,699,4.329,700,2.701,701,3.547,702,2.701,703,3.203,704,2.062,705,1.526,706,1.739,707,5.136,708,2.37,709,2.062,710,4.279,711,4.043,712,4.63,713,3.203,714,5.077,715,4.329,716,3.203,717,3.203,718,3.547,719,3.203,720,1.526,721,1.739,722,2.123,723,3.203,724,2.062,725,2.062,726,1.739,727,2.701,728,1.739,729,1.739,730,1.739,731,2.701,732,4.465,733,2.062,734,1.739,735,2.062,736,2.062,737,2.701,738,5.295,739,4.465,740,2.062,741,4.043,742,2.701,743,2.062,744,3.312,745,3.203,746,3.927,747,1.739,748,4.428,749,3.203,750,4.794,751,3.203,752,1.739,753,2.062,754,1.739,755,1.739,756,4.794,757,2.062,758,2.062,759,3.203,760,2.062,761,3.927,762,3.203,763,3.927,764,3.927,765,3.203,766,2.062,767,2.062,768,2.062,769,3.203,770,3.927,771,3.927,772,2.906,773,4.428,774,4.428,775,3.927,776,2.062,777,3.734,778,1.739,779,1.739,780,1.739,781,3.203,782,3.203,783,3.927,784,4.428,785,2.701,786,2.062,787,3.203,788,2.062,789,2.062,790,3.203,791,2.062,792,2.062,793,2.062,794,2.062,795,2.062,796,2.062,797,2.062]],["title/components/ConfirmpasswordComponent.html",[0,0.013,194,0.708]],["body/components/ConfirmpasswordComponent.html",[0,0.018,1,0.58,2,0.904,3,0.179,4,0.153,5,0.671,6,0.624,7,0.671,8,0.153,10,0.85,13,0.624,14,1.544,15,1.655,16,1.084,17,0.784,18,0.904,19,0.804,20,0.972,23,1.227,24,0.58,25,0.972,27,1.119,29,0.153,30,0.259,38,0.469,39,1.227,43,0.323,47,0.613,49,0.469,50,0.028,51,0.354,52,0.34,53,0.604,57,0.78,60,1.712,63,3.471,67,0.84,70,0.69,74,0.86,75,2.618,76,0.849,79,1.481,81,3.331,85,0.722,86,0.606,87,0.831,88,0.58,98,0.69,99,0.671,100,0.538,101,0.292,102,1.022,111,0.179,112,0.217,120,1.063,123,1.005,135,2.618,139,1.15,177,0.671,178,0.972,179,0.904,180,0.498,181,1.253,182,0.671,183,1.143,184,0.58,185,1.253,186,0.58,187,0.58,188,0.671,189,0.624,190,0.624,191,0.671,192,0.58,193,0.671,194,1.084,195,0.671,196,0.58,197,0.624,198,0.58,199,0.671,200,0.58,201,0.671,202,0.624,203,0.671,204,0.58,205,0.671,206,0.624,207,0.671,208,0.624,209,0.671,210,0.58,211,0.671,212,0.58,213,0.671,214,0.58,215,0.624,216,0.671,217,0.58,218,0.671,219,0.624,220,0.671,221,0.58,222,0.624,223,0.58,224,0.671,225,0.624,226,0.538,227,0.624,228,0.671,229,0.016,230,0.016,237,1.275,254,2.801,309,1.092,319,1.182,335,0.828,349,0.888,448,1.639,459,1.591,468,1.182,470,3.275,474,3.331,480,4.183,483,2.618,485,3.251,500,1.5,504,2.299,506,1.639,508,1.182,546,2.555,551,3.437,557,3.062,564,3.794,573,2.923,576,3.331,577,2.618,581,3.769,600,2.173,607,3.1,617,1.5,618,3.079,619,2.018,620,2.018,621,1.639,622,1.807,623,2.018,624,2.018,625,2.923,626,2.018,627,2.923,628,2.018,629,2.018,632,2.018,633,2.923,634,2.923,635,2.018,663,2.923,665,1.807,666,2.173,678,2.375,679,2.618,798,2.299,799,5.637,800,3.079,801,3.951,802,3.951,803,4.559,804,3.917,805,4.646,806,5.637,807,5.407,808,5.637,809,1.807,810,3.951,811,5.094,812,2.923,813,2.923,814,2.923,815,2.727,816,3.951,817,5.094,818,6.164,819,4.295,820,3.331,821,2.727,822,3.951,823,3.951,824,5.955,825,4.171,826,3.951,827,3.951,828,3.951,829,5.094,830,2.727,831,5.637,832,2.923,833,3.331,834,3.331,835,3.951,836,2.923,837,3.331,838,5.094,839,4.561,840,3.951,841,3.951,842,2.727,843,3.951,844,3.951,845,2.618,846,2.727,847,3.951,848,3.951,849,3.951,850,3.331,851,2.727,852,2.727,853,2.727,854,3.251,855,2.727,856,3.951,857,2.727,858,2.727,859,2.727,860,3.079,861,2.923,862,3.951,863,3.951,864,2.727,865,2.727,866,2.727,867,2.727,868,2.727,869,2.727,870,2.727,871,2.299,872,2.727,873,2.727,874,2.727,875,3.951,876,3.951,877,2.727,878,2.727,879,3.951,880,3.951,881,2.727,882,3.951,883,1.5,884,2.018,885,2.727,886,3.951,887,2.727,888,2.727,889,2.727,890,2.727,891,2.727,892,2.727,893,2.727,894,3.769,895,3.331,896,3.331,897,3.951]],["title/components/EditChannelDialogComponent.html",[0,0.013,196,0.708]],["body/components/EditChannelDialogComponent.html",[0,0.018,1,0.57,2,0.893,3,0.176,4,0.15,5,0.659,6,0.614,7,0.659,8,0.15,10,0.656,13,0.614,14,1.541,15,1.652,16,1.142,17,1.175,18,0.893,19,0.825,20,0.96,21,2.766,22,2.53,23,1.215,24,0.57,25,0.96,27,1.105,29,0.15,30,0.256,31,3.29,32,1.825,34,1.462,37,2.19,38,0.463,39,1.596,47,0.611,49,0.463,50,0.028,51,0.416,52,0.344,53,0.463,55,3.324,57,1.242,59,1.974,60,2.429,62,2.557,63,3.26,67,1.286,69,1.571,70,0.637,74,0.977,76,0.713,79,1.005,85,0.981,86,0.773,87,0.773,88,1.286,89,1.462,92,4.261,96,2.146,98,0.717,99,0.659,100,0.529,101,0.287,102,1.005,103,1.08,104,1.356,109,1.777,111,0.176,112,0.125,120,0.893,121,1.983,122,2.26,123,0.77,124,2.26,125,1.162,126,2.328,127,1.983,129,2.26,130,1.983,131,2.26,132,3.879,133,2.26,134,1.983,135,1.777,138,3.29,139,0.57,150,1.253,166,2.887,167,2.887,168,2.887,169,3.29,170,3.29,171,2.887,172,2.346,173,2.887,174,3.29,175,3.29,176,3.29,177,0.659,178,0.96,179,0.893,180,0.49,181,1.243,182,0.659,183,1.132,184,0.57,185,1.243,186,1.075,187,0.57,188,0.659,189,0.614,190,0.614,191,0.659,192,0.57,193,0.659,194,0.57,195,0.659,196,1.075,197,1.324,198,0.57,199,0.659,200,0.57,201,0.659,202,0.614,203,0.659,204,0.57,205,0.659,206,0.614,207,0.659,208,0.614,209,0.659,210,0.57,211,0.659,212,0.57,213,0.659,214,0.57,215,0.614,216,0.659,217,0.57,218,0.659,219,0.614,220,0.659,221,0.57,222,0.614,223,0.57,224,0.659,225,0.614,226,0.529,227,0.614,228,0.659,229,0.015,230,0.015,239,1.283,258,1.253,295,1.27,297,1.162,335,1.631,343,3.29,349,0.873,351,1.612,352,1.612,353,2.586,354,2.586,356,2.621,367,1.777,368,1.777,369,1.824,370,1.777,371,2.26,372,1.983,374,1.983,378,1.612,379,1.612,380,1.162,392,1.777,393,2.887,396,1.777,409,1.983,427,1.983,600,2.146,682,3.29,898,5.398,899,5.398,900,4.601,901,5.37,902,4.601,903,5.604,904,5.604,905,5.053,906,5.053,907,5.053,908,2.68,909,2.621,910,2.887,911,3.29,912,3.038,913,3.902,914,2.68,915,5.053,916,2.346,917,2.68,918,3.902,919,2.68,920,3.349,921,3.902,922,3.902,923,2.887,924,3.902,925,2.68,926,3.879,927,3.902,928,3.29,929,1.983,930,2.26,931,2.68,932,1.777,933,1.777,934,2.68,935,2.68,936,3.902,937,2.26,938,3.902,939,2.68,940,2.68,941,3.902,942,2.68,943,2.68,944,2.68,945,2.68,946,3.902,947,2.68,948,2.68,949,2.68,950,2.68,951,1.777,952,2.68,953,2.26,954,2.26,955,2.68,956,2.68,957,2.68,958,2.26,959,2.68,960,5.053,961,4.261,962,4.261,963,3.902,964,3.902,965,3.902]],["title/injectables/EmojiService.html",[469,0.818,966,2.461]],["body/injectables/EmojiService.html",[3,0.186,4,0.384,8,0.159,17,1.147,19,0.678,29,0.337,30,0.266,32,1.86,38,0.482,43,0.336,47,0.641,49,0.737,50,0.028,51,0.408,52,0.371,53,0.737,70,0.737,76,1.15,85,1.237,86,0.811,87,0.811,88,1.353,98,0.563,101,0.304,104,1.435,111,0.186,112,0.132,114,0.923,123,1.188,139,0.603,229,0.016,230,0.016,309,1.161,319,2.059,349,0.923,437,3.401,459,1.142,469,0.999,471,1.229,507,1.326,508,1.229,591,2.612,966,3.007,967,2.391,968,4.749,969,4.749,970,4.749,971,4.749,972,4.749,973,4.749,974,4.749,975,4.749,976,4.749,977,4.063,978,4.063,979,4.063,980,4.063,981,4.063,982,4.063,983,4.063,984,5.187,985,4.063,986,4.063,987,2.835,988,2.977,989,2.835,990,4.063,991,6.218,992,6.462,993,5.634,994,4.467,995,2.835,996,4.063,997,4.749,998,2.835,999,4.063,1000,4.251,1001,2.835,1002,2.835,1003,6.018,1004,2.835,1005,4.063,1006,2.835,1007,4.063,1008,2.835,1009,4.063,1010,2.835,1011,2.835,1012,2.835,1013,2.835,1014,2.835,1015,4.063,1016,2.835,1017,2.835,1018,2.835,1019,2.835,1020,2.835,1021,2.835,1022,2.835,1023,2.835,1024,2.835,1025,2.835,1026,2.835,1027,2.391,1028,4.749,1029,3.438,1030,4.373,1031,5.187,1032,2.835,1033,5.713,1034,2.835,1035,2.835,1036,2.835,1037,2.835,1038,2.835,1039,2.835,1040,4.063,1041,2.835,1042,2.835,1043,2.835,1044,2.835,1045,2.835,1046,4.063,1047,4.063,1048,2.835,1049,2.835,1050,2.835,1051,2.835,1052,4.063,1053,2.835,1054,2.835]],["title/components/HeaderComponent.html",[0,0.013,198,0.708]],["body/components/HeaderComponent.html",[0,0.018,1,0.556,2,0.877,3,0.171,4,0.146,5,0.643,6,0.599,7,0.643,8,0.146,10,0.547,13,0.599,14,1.538,15,1.648,16,1.062,17,0.766,18,0.877,19,0.819,20,0.942,22,2.494,23,1.197,24,0.556,25,0.942,27,1.085,29,0.35,30,0.251,32,1.809,33,1.543,34,2.082,37,2.408,38,0.454,41,3.34,43,0.31,44,1.572,45,2.924,47,0.632,49,0.454,50,0.028,51,0.348,52,0.354,53,0.454,55,1.438,57,1.236,67,0.556,69,1.543,70,0.734,72,2.527,74,0.994,76,1.098,79,0.98,85,0.478,86,0.724,87,0.749,88,0.556,89,1.436,96,2.107,98,0.734,99,0.643,100,0.516,101,0.28,102,0.98,103,1.053,111,0.171,112,0.248,113,1.572,114,0.851,116,1.438,117,2.746,118,1.223,119,1.438,120,0.877,123,1.049,139,0.556,177,0.643,178,0.942,179,0.877,180,0.478,181,1.228,182,0.643,183,1.116,184,0.556,185,1.228,186,0.556,187,0.556,188,0.643,189,0.599,190,0.599,191,0.643,192,0.556,193,0.643,194,0.556,195,0.643,196,0.556,197,0.599,198,1.062,199,0.643,200,0.556,201,0.643,202,0.599,203,0.643,204,1.252,205,0.643,206,0.599,207,0.643,208,0.599,209,0.643,210,0.556,211,0.643,212,0.556,213,0.643,214,0.556,215,0.599,216,0.643,217,0.815,218,0.643,219,0.599,220,0.643,221,1.062,222,1.272,223,0.556,224,0.643,225,0.599,226,0.516,227,0.599,228,0.643,229,0.015,230,0.02,231,3.356,237,2.121,238,3.356,239,1.272,241,4.111,249,3.002,253,3.231,254,2.107,260,2.54,281,2.835,282,2.165,283,2.835,289,2.121,292,3.356,293,2.835,295,1.248,296,1.323,298,1.935,309,0.843,317,2.304,319,1.133,329,1.935,346,2.304,349,1.248,413,2.746,414,3.055,415,2.304,423,3.039,425,3.695,436,1.733,437,2.527,439,2.54,444,3.167,447,3.006,448,1.572,543,2.107,544,3.356,557,3.002,573,2.835,591,2.107,718,2.835,814,2.835,929,1.935,1029,3.31,1055,2.205,1056,3.356,1057,3.832,1058,3.832,1059,3.832,1060,4.535,1061,4.535,1062,5.316,1063,4.535,1064,3.695,1065,5.556,1066,3.695,1067,4.994,1068,5.556,1069,3.832,1070,2.615,1071,3.832,1072,2.615,1073,2.304,1074,2.835,1075,2.615,1076,3.832,1077,3.231,1078,4.211,1079,3.231,1080,3.231,1081,2.54,1082,2.615,1083,2.615,1084,2.615,1085,3.832,1086,3.832,1087,2.615,1088,3.231,1089,5.316,1090,3.824,1091,3.824,1092,2.835,1093,2.615,1094,3.832,1095,3.832,1096,2.615,1097,2.615,1098,3.832,1099,4.994,1100,3.832,1101,2.615,1102,2.615,1103,3.832,1104,2.615,1105,2.615,1106,2.615,1107,2.615,1108,2.615,1109,1.733,1110,1.935,1111,1.733,1112,2.205,1113,2.205,1114,1.935,1115,1.935,1116,2.615,1117,2.615,1118,2.205,1119,1.935,1120,2.615,1121,1.935,1122,2.205,1123,1.733,1124,1.572,1125,1.935,1126,2.615,1127,2.615,1128,2.205,1129,2.615,1130,2.615,1131,1.935,1132,2.615,1133,1.733,1134,2.615,1135,2.615,1136,3.832,1137,2.615,1138,2.615,1139,2.615,1140,2.615,1141,3.832,1142,3.832,1143,2.615,1144,2.615,1145,2.615,1146,2.615,1147,2.615,1148,3.231,1149,3.832,1150,3.832,1151,4.994,1152,3.231,1153,3.832,1154,2.835]],["title/components/ImprintComponent.html",[0,0.013,200,0.708]],["body/components/ImprintComponent.html",[0,0.023,1,0.911,2,1.227,3,0.281,4,0.24,5,1.053,6,0.98,7,1.053,8,0.24,10,0.765,13,0.98,14,1.599,15,1.717,16,1.305,17,0.988,18,1.227,19,0.765,20,1.318,24,0.911,25,1.318,27,1.518,50,0.027,51,0.384,74,1.035,98,0.636,101,0.459,111,0.281,112,0.2,177,1.053,178,1.318,179,1.227,180,0.782,181,1.509,182,1.053,183,1.439,184,0.911,185,1.509,186,0.911,187,0.911,188,1.053,189,0.98,190,0.98,191,1.053,192,0.911,193,1.053,194,0.911,195,1.053,196,0.911,197,0.98,198,0.911,199,1.053,200,1.305,201,1.053,202,0.98,203,1.053,204,0.911,205,1.053,206,0.98,207,1.053,208,0.98,209,1.053,210,0.911,211,1.053,212,0.911,213,1.053,214,0.911,215,0.98,216,1.053,217,0.911,218,1.053,219,0.98,220,1.053,221,0.911,222,0.98,223,0.911,224,1.053,225,0.98,226,0.845,227,0.98,228,1.053,229,0.021,230,0.021,468,1.855,491,2.323,494,3.222,546,3.218,666,2.948,678,3.222,1155,3.609,1156,5.36,1157,5.36,1158,5.36,1159,5.36,1160,4.52,1161,5.36,1162,5.36,1163,5.36,1164,5.36,1165,5.36,1166,5.36,1167,3.553,1168,3.553,1169,5.36,1170,5.36]],["title/components/MainsectionComponent.html",[0,0.013,204,0.708]],["body/components/MainsectionComponent.html",[0,0.021,1,0.438,2,0.732,3,0.135,4,0.115,5,0.506,6,0.471,7,0.506,8,0.115,10,0.631,13,0.471,14,1.498,15,1.64,16,0.941,17,0.662,18,0.732,19,0.919,20,0.786,23,1.035,24,0.438,25,0.786,27,0.905,29,0.115,30,0.21,38,0.524,43,0.465,47,0.642,50,0.028,51,0.257,52,0.341,57,0.873,70,0.752,74,0.746,76,1.124,85,1,86,0.713,87,0.713,88,1.221,98,0.681,99,0.506,100,0.406,101,0.221,111,0.135,112,0.262,114,1.65,139,0.68,177,0.506,178,0.786,179,1.393,180,0.376,181,1.087,182,0.506,183,0.964,184,0.438,185,1.087,186,0.438,187,0.438,188,0.506,189,1.012,190,0.471,191,0.506,192,0.438,193,0.506,194,0.438,195,0.506,196,0.438,197,0.471,198,1.244,199,0.506,200,0.438,201,0.506,202,0.471,203,0.506,204,0.941,205,0.506,206,0.471,207,0.506,208,0.471,209,0.506,210,0.438,211,0.506,212,0.438,213,0.506,214,0.438,215,1.338,216,0.506,217,0.941,218,0.506,219,1.012,220,0.506,221,0.438,222,1.096,223,0.438,224,0.506,225,0.471,226,0.406,227,0.471,228,0.506,229,0.013,230,0.013,239,1.16,259,3.047,262,2.658,264,2.695,282,2.574,289,2.37,295,1.041,296,1.041,297,0.891,309,0.662,423,3.243,425,4.248,438,2.365,543,1.758,555,2.365,557,2.658,571,2.695,575,3.57,581,2.365,590,2.118,617,2.787,630,2.365,691,3.936,699,2.365,705,3.271,715,2.901,720,2.365,722,2.118,814,3.271,825,2.365,883,1.131,909,1.494,916,3.57,988,2.565,994,4.174,1027,1.734,1056,2.901,1066,3.271,1077,4.274,1078,3.728,1079,2.695,1080,3.728,1081,2.93,1121,3.914,1128,5.074,1131,2.901,1133,3.173,1171,1.734,1172,3.92,1173,3.196,1174,3.196,1175,3.196,1176,3.92,1177,3.92,1178,3.92,1179,3.92,1180,2.787,1181,5.29,1182,3.92,1183,4.788,1184,3.92,1185,3.92,1186,4.788,1187,3.92,1188,3.92,1189,3.92,1190,4.421,1191,5.068,1192,5.068,1193,4.421,1194,4.421,1195,3.271,1196,3.271,1197,3.728,1198,4.421,1199,4.421,1200,4.421,1201,5.068,1202,5.068,1203,3.196,1204,2.056,1205,3.805,1206,2.695,1207,3.196,1208,2.056,1209,3.728,1210,5.741,1211,2.056,1212,4.788,1213,4.788,1214,2.056,1215,3.196,1216,3.728,1217,3.196,1218,3.196,1219,4.421,1220,2.056,1221,5.469,1222,4.421,1223,3.75,1224,2.056,1225,2.056,1226,2.695,1227,3.196,1228,3.196,1229,4.274,1230,4.421,1231,4.421,1232,2.056,1233,3.728,1234,3.196,1235,2.695,1236,2.056,1237,2.056,1238,2.365,1239,3.196,1240,2.056,1241,2.365,1242,3.196,1243,2.695,1244,2.056,1245,3.728,1246,2.056,1247,2.056,1248,2.056,1249,3.196,1250,3.196,1251,3.92,1252,3.196,1253,2.056,1254,3.196,1255,2.056,1256,3.196,1257,4.037,1258,2.056,1259,3.196,1260,2.056,1261,2.365,1262,2.056,1263,2.056,1264,3.196,1265,2.056,1266,2.056,1267,3.196,1268,2.056,1269,2.056,1270,2.365,1271,2.056,1272,3.196,1273,2.056,1274,2.056,1275,2.056,1276,2.056,1277,2.056,1278,2.056,1279,2.056,1280,2.056,1281,2.056,1282,1.522,1283,1.522,1284,1.131,1285,2.056,1286,3.196,1287,2.056,1288,3.196,1289,2.056,1290,3.196,1291,2.056,1292,2.056,1293,2.056,1294,2.056,1295,5.29,1296,2.056,1297,2.056,1298,4.421,1299,2.056,1300,3.196,1301,4.788,1302,5.068,1303,5.617,1304,5.068,1305,2.056,1306,2.056,1307,5.068,1308,4.421,1309,2.056,1310,2.056,1311,5.068,1312,2.056,1313,2.056,1314,2.056,1315,3.196,1316,3.196,1317,3.196,1318,2.056,1319,2.056,1320,2.056,1321,2.056,1322,1.734,1323,3.196,1324,3.196,1325,2.056,1326,2.056,1327,1.734,1328,2.056,1329,2.056,1330,3.196,1331,3.196]],["title/classes/MessageData.html",[112,0.155,1332,2.461]],["body/classes/MessageData.html",[3,0.284,4,0.243,8,0.243,29,0.243,30,0.354,33,2.371,38,0.641,43,0.514,47,0.648,49,0.514,50,0.028,51,0.424,52,0.374,53,0.514,70,0.514,111,0.284,112,0.202,125,2.873,139,0.923,229,0.021,230,0.021,309,1.168,385,3.487,386,3.209,437,2.979,444,3.208,491,2.748,518,2.874,521,5.196,522,3.999,524,3.209,1000,4.202,1332,3.999,1333,3.657,1334,6.34,1335,4.202,1336,5.346,1337,5.404,1338,4.337,1339,4.337,1340,4.337,1341,4.337,1342,4.337,1343,4.337,1344,4.337,1345,4.337,1346,4.557,1347,4.557,1348,3.209,1349,4.557,1350,3.657,1351,5.404,1352,4.337,1353,5.404,1354,4.337,1355,4.557,1356,3.209,1357,5.404,1358,4.337,1359,5.404,1360,4.337]],["title/injectables/MutationObserverService.html",[469,0.818,1361,2.461]],["body/injectables/MutationObserverService.html",[3,0.234,4,0.199,6,1.365,8,0.199,10,0.908,19,0.894,29,0.199,30,0.312,33,2.595,38,0.565,43,0.636,47,0.603,49,0.423,50,0.028,51,0.234,52,0.343,53,0.423,57,1.211,67,0.758,69,2.305,70,0.636,76,1.046,85,1.121,86,0.746,87,0.746,88,1.217,98,0.565,101,0.382,111,0.234,112,0.166,114,2.098,120,1.09,123,0.704,139,1.141,179,1.543,229,0.019,230,0.019,254,3.445,349,1.55,423,3.22,437,2.41,459,1.436,469,1.171,471,1.545,485,3.224,507,1.667,585,3.554,708,4.709,742,4.521,845,3.952,910,3.967,912,3.224,920,3.554,994,3.554,1088,4.015,1091,5.173,1131,3.967,1284,1.961,1361,3.523,1362,3.006,1363,6.135,1364,5.362,1365,5.963,1366,6.135,1367,6.444,1368,4.762,1369,3.565,1370,2.863,1371,4.762,1372,4.762,1373,4.762,1374,3.523,1375,3.523,1376,4.762,1377,6.611,1378,3.565,1379,4.762,1380,5.963,1381,6.264,1382,5.028,1383,3.554,1384,5.173,1385,4.521,1386,3.554,1387,5.362,1388,4.521,1389,5.362,1390,5.362,1391,4.762,1392,4.762,1393,3.967,1394,3.565,1395,5.362,1396,4.762,1397,3.565,1398,3.565,1399,3.565,1400,4.762,1401,4.762,1402,5.963,1403,5.362,1404,4.762,1405,3.565,1406,3.565,1407,5.722,1408,3.565,1409,3.565,1410,3.565,1411,3.565,1412,3.565,1413,3.565]],["title/directives/OutsideclickDirective.html",[180,0.608,226,0.657]],["body/directives/OutsideclickDirective.html",[3,0.306,4,0.262,8,0.262,10,0.667,13,1.07,14,1.295,18,1.295,19,0.807,29,0.262,33,2.451,38,0.671,43,0.554,47,0.609,49,0.671,50,0.028,51,0.371,52,0.341,53,0.671,70,0.554,76,1.034,98,0.554,101,0.501,111,0.306,112,0.218,123,1.117,139,0.994,180,1.034,225,1.07,226,1.117,227,1.295,229,0.022,230,0.022,289,2.186,423,3.2,444,2.365,508,2.026,591,3.478,701,3.459,1414,3.941,1415,5.658,1416,5.658,1417,6.086,1418,5.658,1419,5.658,1420,4.674,1421,5.658,1422,5.658,1423,6.086,1424,4.674,1425,6.086,1426,5.658,1427,5.658,1428,6.086,1429,6.324,1430,6.086,1431,5.658,1432,4.674,1433,5.658,1434,5.658,1435,4.674,1436,5.658,1437,4.674,1438,4.674]],["title/components/RegisterComponent.html",[0,0.013,210,0.708]],["body/components/RegisterComponent.html",[0,0.016,1,0.472,2,0.775,3,0.145,4,0.124,5,0.546,6,0.508,7,0.546,8,0.124,10,0.85,13,0.508,14,1.511,15,1.619,16,0.979,17,0.694,18,0.775,19,0.707,20,0.833,23,1.085,24,0.472,25,0.833,29,0.124,30,0.222,38,0.402,39,1.379,43,0.263,47,0.601,49,0.546,50,0.028,51,0.423,52,0.342,53,0.546,57,0.669,60,1.994,61,2.245,63,1.22,67,0.979,70,0.681,74,1.006,76,0.906,79,1.27,80,1.037,85,0.955,86,0.681,87,0.646,88,1.156,98,0.681,99,0.546,100,0.438,101,0.238,102,0.831,111,0.145,112,0.103,114,0.722,118,1.037,120,1.196,121,1.641,123,0.811,130,2.507,134,1.641,135,4.313,139,1.111,149,2.507,152,2.856,166,1.641,167,2.507,168,2.507,171,2.507,172,3.141,177,0.546,178,0.833,179,1.053,180,0.405,181,1.132,182,0.546,183,1.011,184,0.472,185,1.132,186,0.472,187,0.472,188,0.546,189,0.508,190,0.508,191,0.546,192,0.472,193,0.546,194,0.472,195,0.546,196,0.472,197,0.508,198,0.472,199,0.546,200,0.472,201,0.546,202,0.508,203,0.546,204,0.472,205,0.546,206,0.508,207,0.546,208,0.508,209,0.546,210,1.111,211,0.546,212,0.472,213,0.546,214,0.472,215,0.508,216,0.546,217,0.472,218,0.546,219,0.508,220,0.546,221,0.472,222,0.508,223,0.472,224,0.546,225,0.508,226,0.438,227,0.508,228,0.546,229,0.013,230,0.013,239,1.364,250,1.641,256,2.328,270,2.037,282,1.994,289,1.037,295,0.722,296,1.122,297,0.961,304,2.856,309,1.07,319,1.782,335,1.248,349,1.87,356,2.443,369,1.584,380,0.961,423,2.08,436,3.049,444,2.328,457,2.507,468,0.961,483,2.724,485,2.766,491,2.429,492,3.879,494,3.268,498,2.471,508,0.961,514,1.641,541,1.641,543,1.863,546,2.26,547,2.856,564,3.523,568,3.404,569,3.404,575,2.037,585,2.245,590,3.049,600,1.863,601,2.037,604,1.333,651,1.87,666,2.53,669,4.179,677,2.856,678,2.037,679,2.245,680,3.879,683,1.87,684,1.87,685,1.87,686,3.466,687,1.87,690,2.856,691,1.47,693,1.87,695,3.466,696,3.466,697,3.466,698,1.641,699,4.147,700,3.466,701,2.507,702,3.879,706,2.856,707,2.856,708,1.641,710,3.466,712,3.404,714,1.87,715,1.641,721,2.856,722,3.463,726,2.856,727,1.87,728,1.87,729,1.87,730,1.87,731,2.856,732,1.87,734,1.87,739,1.87,741,2.856,744,4.405,747,1.87,754,2.856,755,1.87,777,2.856,778,1.87,779,1.87,780,1.87,785,1.87,800,2.724,809,1.47,813,1.641,834,1.87,837,2.856,854,2.766,860,3.049,861,1.641,883,1.22,884,1.641,1056,3.041,1066,3.404,1133,3.049,1160,2.856,1167,3.602,1168,3.602,1205,2.245,1216,2.856,1226,2.856,1233,2.856,1245,2.856,1439,1.87,1440,2.507,1441,4.11,1442,3.388,1443,4.179,1444,4.956,1445,4.11,1446,4.956,1447,4.11,1448,4.11,1449,4.601,1450,3.388,1451,3.388,1452,3.388,1453,5.224,1454,4.601,1455,3.388,1456,3.388,1457,3.388,1458,2.218,1459,3.388,1460,5.86,1461,5.604,1462,3.388,1463,3.388,1464,2.218,1465,3.466,1466,2.856,1467,3.388,1468,2.218,1469,3.388,1470,3.388,1471,3.388,1472,2.218,1473,2.856,1474,3.388,1475,2.218,1476,3.388,1477,2.218,1478,2.218,1479,2.218,1480,2.218,1481,2.218,1482,2.218,1483,3.388,1484,2.218,1485,2.218,1486,3.388,1487,2.218,1488,2.218,1489,3.466,1490,2.218,1491,1.87,1492,2.218,1493,2.218,1494,2.218,1495,2.218,1496,2.218,1497,2.218,1498,4.601,1499,3.388,1500,2.218,1501,2.218,1502,2.218,1503,2.218,1504,2.218,1505,2.218,1506,3.388,1507,2.856,1508,2.856,1509,2.856,1510,2.218,1511,3.388,1512,3.388,1513,4.601,1514,4.11,1515,2.218,1516,4.11,1517,2.218,1518,2.218,1519,2.218,1520,3.388,1521,2.218,1522,2.856,1523,2.218,1524,3.388,1525,3.388,1526,2.218,1527,3.388,1528,2.218,1529,1.87,1530,2.218,1531,2.218,1532,2.218,1533,2.218,1534,2.218,1535,2.218,1536,4.601,1537,3.388,1538,3.388,1539,3.388,1540,3.388,1541,3.879,1542,4.601,1543,3.388,1544,4.601,1545,2.856,1546,3.388,1547,2.856,1548,3.388,1549,4.601,1550,3.388,1551,3.388,1552,2.218,1553,2.218,1554,2.218,1555,3.388,1556,2.218,1557,4.11,1558,2.218,1559,2.218,1560,4.11,1561,4.601,1562,2.218,1563,2.218,1564,3.388,1565,2.218,1566,2.218,1567,2.218,1568,2.218,1569,2.218,1570,2.218,1571,2.218,1572,2.218,1573,2.218,1574,2.218,1575,2.218,1576,3.388,1577,2.218]],["title/components/ResetpasswordComponent.html",[0,0.013,212,0.708]],["body/components/ResetpasswordComponent.html",[0,0.021,1,0.749,2,1.081,3,0.231,4,0.197,5,0.866,6,0.806,7,0.866,8,0.197,10,0.674,13,0.806,14,1.578,15,1.693,16,1.211,17,0.9,18,1.081,19,0.812,20,1.161,23,1.407,24,0.749,25,1.161,27,1.337,29,0.197,30,0.31,38,0.56,39,1.407,43,0.418,47,0.548,49,0.418,50,0.028,51,0.373,52,0.264,53,0.418,57,0.932,70,0.418,74,0.961,86,0.616,87,0.616,98,0.704,99,0.866,101,0.378,111,0.231,112,0.164,123,1.052,158,4.801,172,2.839,177,0.866,178,1.161,179,1.081,180,0.644,181,1.4,182,0.866,183,1.311,184,0.749,185,1.4,186,0.749,187,0.749,188,0.866,189,0.806,190,0.806,191,0.866,192,0.749,193,0.866,194,0.749,195,0.866,196,0.749,197,0.806,198,0.749,199,0.866,200,0.749,201,0.866,202,0.806,203,0.866,204,0.749,205,0.866,206,0.806,207,0.866,208,0.806,209,0.866,210,0.749,211,0.866,212,1.211,213,0.866,214,0.749,215,0.806,216,0.866,217,0.749,218,0.866,219,0.806,220,0.866,221,0.749,222,0.806,223,0.749,224,0.866,225,0.806,226,0.695,227,0.806,228,0.866,229,0.019,230,0.019,237,1.646,256,2.39,277,2.597,309,0.594,319,1.526,335,1.069,349,1.146,468,1.526,483,3.13,491,2.468,493,2.605,494,3.815,500,2.597,506,2.117,508,1.526,512,2.605,514,2.605,546,2.93,551,3.943,555,3.494,564,3.675,577,3.13,578,3.982,579,3.494,607,3.362,617,1.936,618,3.532,619,2.605,620,2.605,621,2.117,622,2.334,623,2.605,624,2.605,625,3.494,626,2.605,627,3.494,628,2.605,629,2.605,630,2.605,632,2.605,633,3.494,634,3.494,635,2.605,663,3.494,665,2.334,666,2.597,678,2.839,679,3.13,803,4.493,809,2.334,883,1.936,884,2.605,894,4.213,895,3.982,896,3.982,928,3.982,1167,4.206,1168,3.13,1443,2.969,1465,2.969,1473,3.982,1522,3.982,1529,3.982,1545,3.982,1578,2.969,1579,4.722,1580,4.722,1581,4.722,1582,6.113,1583,4.722,1584,3.521,1585,4.722,1586,3.521,1587,3.521,1588,3.521,1589,3.521,1590,3.521,1591,3.521,1592,4.722,1593,4.722,1594,4.722,1595,5.694,1596,4.722,1597,4.722,1598,4.722,1599,4.722,1600,4.722]],["title/injectables/ResizeListenerService.html",[469,0.818,1180,1.829]],["body/injectables/ResizeListenerService.html",[3,0.252,4,0.215,8,0.215,29,0.215,30,0.328,38,0.593,43,0.593,47,0.64,49,0.66,50,0.028,51,0.365,52,0.366,53,0.66,57,1.302,61,2.546,64,2.546,67,1.183,70,0.699,76,1.214,85,1.145,86,0.817,87,0.817,88,1.333,98,0.456,101,0.412,111,0.252,112,0.179,114,2.106,120,0.879,123,0.758,229,0.02,230,0.02,459,1.547,469,1.23,471,1.665,482,2.842,507,1.796,575,3.542,591,3.059,712,4.72,909,2.339,1180,2.751,1197,4.69,1238,4.838,1440,2.842,1601,5.637,1602,3.239,1603,5.562,1604,5.002,1605,5.562,1606,5.002,1607,5.002,1608,5.002,1609,5.002,1610,5.002,1611,5.892,1612,3.841,1613,6.11,1614,5.002,1615,3.239,1616,5.892,1617,3.841,1618,5.892,1619,5.562,1620,5.562,1621,5.562,1622,5.002,1623,3.841,1624,5.692,1625,5.002,1626,3.841,1627,5.002,1628,5.002,1629,3.841,1630,3.841,1631,5.002,1632,3.841,1633,3.841,1634,3.841,1635,3.841,1636,2.842,1637,3.841,1638,3.841,1639,3.841,1640,3.841,1641,3.841,1642,3.841,1643,3.841,1644,3.841,1645,3.841,1646,3.841,1647,3.841,1648,3.841,1649,3.841,1650,3.841,1651,3.841,1652,3.841,1653,3.841]],["title/components/ShowProfileComponent.html",[0,0.013,214,0.708]],["body/components/ShowProfileComponent.html",[0,0.015,1,0.428,2,0.719,3,0.132,4,0.113,5,0.495,6,0.461,7,0.495,8,0.339,10,0.676,13,0.461,14,1.494,15,1.599,16,0.929,17,0.653,18,0.719,19,0.843,20,0.773,23,1.021,24,0.428,25,0.773,27,0.89,29,0.113,30,0.206,32,1.635,33,2.023,34,2.179,37,2.177,38,0.373,39,1.326,41,3.02,43,0.373,45,2.606,46,2.324,47,0.632,49,0.518,50,0.028,51,0.374,52,0.372,53,0.518,57,1.283,60,2.274,61,2.082,63,2.126,64,2.562,67,0.822,69,2.113,70,0.739,72,2.211,73,2.325,74,1.023,76,0.959,78,1.889,79,1.449,80,2.833,85,0.992,86,0.744,87,0.812,88,1.274,89,1.178,96,1.728,98,0.689,99,0.495,100,0.397,101,0.216,102,0.754,103,0.81,111,0.132,112,0.221,114,1.023,116,1.106,117,1.728,118,0.941,119,1.106,120,0.885,123,0.935,139,1.116,143,1.333,144,1.696,177,0.495,178,1.291,179,1.277,180,0.368,181,1.075,182,0.495,183,0.951,184,0.428,185,1.075,186,0.428,187,0.428,188,0.495,189,0.461,190,0.461,191,0.495,192,0.428,193,0.495,194,0.428,195,0.495,196,0.428,197,0.461,198,0.428,199,0.495,200,0.428,201,0.495,202,0.461,203,0.495,204,0.428,205,0.495,206,0.461,207,0.495,208,0.461,209,0.495,210,0.428,211,0.495,212,0.428,213,0.495,214,0.929,215,1.201,216,0.495,217,0.428,218,0.495,219,0.461,220,0.495,221,0.428,222,0.461,223,0.668,224,0.951,225,0.461,226,0.397,227,0.461,228,0.495,229,0.012,230,0.012,237,0.941,239,1.15,256,1.59,258,1.808,262,1.889,263,2.325,270,2.324,271,2.896,284,1.728,289,0.941,295,1.023,296,1.018,309,1.093,335,1.174,413,2.403,414,2.403,415,1.889,420,1.696,423,1.956,434,4.365,440,1.696,443,3.598,447,1.333,448,1.21,470,3.138,473,2.649,487,2.325,488,2.649,491,1.676,494,2.627,550,3.26,552,4.811,560,4.235,561,4.235,562,1.696,563,3.329,583,1.889,588,4.424,591,1.728,596,2.649,598,2.649,599,4.811,600,2.885,601,1.889,603,2.082,604,1.889,605,3.26,609,2.649,638,3.684,642,3.26,645,1.696,646,1.696,647,1.696,675,2.649,676,2.649,705,4.017,800,2.562,812,2.325,819,2.649,839,2.325,854,2.627,860,1.333,861,1.489,909,2.043,920,2.562,961,2.649,962,3.684,988,2.542,1064,2.325,1073,3.264,1074,2.325,1109,2.896,1110,2.86,1111,2.562,1115,1.489,1118,1.696,1119,1.489,1123,2.082,1124,1.889,1125,2.325,1152,2.649,1154,2.325,1167,2.896,1168,2.896,1195,1.489,1205,2.082,1270,2.325,1370,1.889,1386,2.082,1489,1.696,1491,1.696,1654,5.553,1655,1.696,1656,3.142,1657,3.142,1658,5.247,1659,4.739,1660,4.739,1661,3.866,1662,3.26,1663,3.996,1664,4.739,1665,5.023,1666,4.235,1667,5.429,1668,5.023,1669,5.023,1670,4.369,1671,4.369,1672,3.142,1673,2.012,1674,3.142,1675,2.012,1676,2.082,1677,2.649,1678,2.012,1679,4.739,1680,3.233,1681,4.739,1682,3.142,1683,2.012,1684,3.142,1685,2.012,1686,2.649,1687,3.233,1688,3.684,1689,3.142,1690,2.012,1691,3.866,1692,3.26,1693,3.866,1694,3.866,1695,3.26,1696,3.866,1697,2.012,1698,2.012,1699,2.012,1700,2.012,1701,2.012,1702,3.142,1703,2.012,1704,2.012,1705,2.012,1706,2.012,1707,2.012,1708,2.012,1709,3.142,1710,2.012,1711,2.012,1712,2.012,1713,2.012,1714,2.012,1715,2.012,1716,2.012,1717,2.012,1718,2.012,1719,1.696,1720,2.012,1721,1.696,1722,2.012,1723,2.012,1724,2.012,1725,2.012,1726,2.012,1727,2.012,1728,2.012,1729,2.012,1730,2.012,1731,3.866,1732,3.142,1733,2.012,1734,3.866,1735,2.012,1736,2.012,1737,2.012,1738,2.012,1739,2.012,1740,2.012,1741,1.696,1742,2.012,1743,1.696,1744,2.012,1745,2.012,1746,2.012,1747,2.012,1748,1.696,1749,2.012,1750,2.012,1751,2.012,1752,3.142,1753,1.696,1754,2.649,1755,3.142,1756,3.142,1757,3.142,1758,3.142,1759,3.142]],["title/components/SidebarComponent.html",[0,0.013,217,0.708]],["body/components/SidebarComponent.html",[0,0.016,1,0.973,2,0.769,3,0.144,4,0.123,5,0.539,6,0.502,7,0.539,8,0.123,10,0.704,11,1.453,13,0.502,14,1.509,15,1.616,16,1.107,17,1.119,18,0.769,19,0.742,20,0.826,23,1.078,24,0.467,25,0.826,27,0.951,29,0.345,30,0.3,32,1.694,33,1.353,34,1.95,37,2.481,38,0.398,41,2.75,43,0.26,44,1.318,45,2.712,47,0.635,49,0.542,50,0.028,51,0.39,52,0.351,53,0.542,57,1.153,60,1.456,62,2.314,67,0.868,70,0.764,72,1.699,74,0.986,76,1.068,79,1.259,86,0.728,87,0.775,88,0.714,89,1.259,96,1.847,98,0.705,99,0.539,100,0.433,101,0.235,103,0.883,104,1.11,108,1.849,109,1.453,111,0.144,112,0.267,113,1.318,114,1.605,116,1.206,117,1.847,118,1.025,119,1.206,120,1.047,123,0.663,126,2.632,139,0.714,150,1.57,177,0.539,178,0.826,179,0.769,180,0.401,181,1.125,182,0.539,183,1.004,184,0.467,185,1.125,186,0.467,187,0.467,188,0.539,189,0.502,190,0.502,191,0.539,192,0.467,193,0.539,194,0.467,195,0.539,196,0.467,197,0.502,198,0.467,199,0.539,200,0.467,201,0.539,202,0.502,203,0.539,204,1.243,205,0.539,206,0.502,207,0.539,208,0.502,209,0.539,210,0.467,211,0.539,212,0.467,213,0.539,214,0.467,215,0.502,216,0.539,217,0.973,218,0.539,219,0.502,220,0.539,221,0.467,222,1.31,223,0.467,224,0.539,225,0.502,226,0.433,227,0.502,228,0.539,229,0.013,230,0.013,237,1.025,239,1.191,254,1.847,262,2.75,268,3.127,269,3.031,277,2.977,282,1.983,288,1.623,295,1.093,297,0.951,309,1.051,340,2.226,346,2.75,380,0.951,404,3.384,413,3.071,414,3.392,415,3.127,437,2.632,439,3.031,444,3.177,457,2.485,498,2.019,541,2.485,543,1.847,544,3.02,557,2.75,575,3.127,577,3.447,583,2.019,600,2.244,604,3.624,617,2.977,618,3.268,621,1.318,622,1.453,691,3.031,718,2.485,720,2.485,722,1.453,825,2.485,909,2.432,923,3.02,937,1.849,1030,1.849,1064,3.384,1073,2.75,1074,2.485,1081,3.031,1092,2.485,1123,1.453,1124,1.318,1125,1.623,1133,1.453,1148,2.832,1154,2.485,1180,2.86,1196,3.384,1205,2.226,1209,2.832,1223,3.384,1229,2.832,1241,2.485,1261,2.485,1282,1.623,1283,1.623,1322,2.832,1370,2.019,1375,4.564,1676,2.226,1743,1.849,1760,1.849,1761,3.358,1762,3.358,1763,4.081,1764,4.081,1765,4.081,1766,4.081,1767,4.081,1768,4.081,1769,4.081,1770,4.081,1771,4.574,1772,5.201,1773,4.574,1774,3.358,1775,4.574,1776,5.201,1777,3.358,1778,3.358,1779,2.193,1780,5.584,1781,3.358,1782,3.358,1783,2.193,1784,3.358,1785,3.358,1786,2.193,1787,4.386,1788,2.454,1789,2.193,1790,2.193,1791,3.358,1792,2.193,1793,3.857,1794,5.413,1795,2.832,1796,2.193,1797,2.193,1798,2.832,1799,3.358,1800,2.193,1801,2.193,1802,2.193,1803,3.358,1804,3.358,1805,2.193,1806,5.413,1807,3.358,1808,2.193,1809,2.193,1810,2.193,1811,2.193,1812,2.193,1813,2.193,1814,3.358,1815,3.358,1816,3.358,1817,3.358,1818,2.193,1819,2.193,1820,2.193,1821,2.193,1822,2.193,1823,2.193,1824,1.453,1825,2.193,1826,2.193,1827,2.193,1828,3.358,1829,2.193,1830,3.358,1831,2.193,1832,3.358,1833,2.193,1834,3.358,1835,2.193,1836,4.931,1837,2.193,1838,4.081,1839,3.358,1840,3.358,1841,2.193,1842,3.358,1843,3.358,1844,3.358,1845,3.358,1846,2.193,1847,2.193,1848,1.849,1849,2.193,1850,3.358,1851,3.358,1852,3.358,1853,3.358,1854,3.358,1855,3.358,1856,3.358]],["title/injectables/SidebarService.html",[37,1.442,469,0.818]],["body/injectables/SidebarService.html",[3,0.19,4,0.162,8,0.162,17,0.999,19,0.413,29,0.162,30,0.27,32,1.873,37,1.788,38,0.489,39,1.563,43,0.57,47,0.635,49,0.343,50,0.028,51,0.315,52,0.339,53,0.343,57,1.322,59,2.431,67,0.616,69,2.229,70,0.794,74,1.095,85,1.051,86,0.772,87,0.824,89,1.546,98,0.656,100,0.571,101,0.31,111,0.19,112,0.224,120,0.663,123,1.233,139,1.259,150,3.01,229,0.016,230,0.016,239,1.317,242,4.851,249,3.148,256,2.087,257,3.813,258,1.929,259,2.48,268,3.459,273,3.052,282,2.494,295,1.343,309,0.811,335,1.459,349,0.943,356,2.985,369,1.929,375,1.919,377,3.255,378,1.741,379,1.741,380,1.255,396,2.734,404,4.257,413,2.879,414,3.328,415,3.148,438,3.052,439,2.734,459,1.166,469,1.014,471,1.255,498,2.48,503,2.142,507,1.354,583,2.48,772,2.142,883,1.592,909,1.929,912,3.148,916,2.48,930,2.441,932,1.919,933,1.919,951,3.668,1029,2.734,1073,2.48,1124,3.148,1223,3.052,1241,3.052,1374,3.555,1382,3.478,1383,2.734,1385,3.478,1386,2.734,1680,3.555,1787,4.667,1788,3.638,1793,3.478,1824,4.408,1848,2.441,1857,2.441,1858,4.804,1859,4.804,1860,5.236,1861,5.236,1862,5.236,1863,5.236,1864,5.236,1865,6.051,1866,6.051,1867,4.124,1868,4.124,1869,2.895,1870,2.895,1871,3.052,1872,2.895,1873,2.895,1874,2.895,1875,4.124,1876,2.895,1877,4.415,1878,4.415,1879,2.895,1880,4.124,1881,2.895,1882,2.895,1883,4.124,1884,2.895,1885,2.895,1886,2.895,1887,2.895,1888,2.895,1889,2.895,1890,2.441,1891,2.441,1892,2.142,1893,2.895,1894,2.441,1895,1.592,1896,2.142,1897,2.441,1898,2.895,1899,4.124,1900,4.124,1901,4.124,1902,4.124,1903,2.895,1904,2.895,1905,4.804,1906,2.895,1907,2.895,1908,2.895,1909,2.895,1910,2.895,1911,4.124,1912,2.895,1913,2.895,1914,2.895,1915,2.895,1916,2.895,1917,2.895,1918,2.895,1919,2.895,1920,3.052,1921,2.142,1922,2.142,1923,2.441,1924,2.441,1925,2.441,1926,2.441,1927,2.895,1928,2.895,1929,2.441,1930,2.441]],["title/injectables/StateService.html",[403,2.205,469,0.818]],["body/injectables/StateService.html",[0,0.02,3,0.254,4,0.217,8,0.217,10,0.843,16,1.07,17,1.115,29,0.217,30,0.33,34,2.509,38,0.596,43,0.726,47,0.63,49,0.459,50,0.028,51,0.254,52,0.312,53,0.459,57,1.167,60,2.18,67,0.824,70,0.701,74,0.849,76,1.147,85,1.197,86,0.771,87,0.819,88,1.07,98,0.662,100,0.764,101,0.415,111,0.254,112,0.181,114,1.818,120,0.886,139,1.07,197,1.512,229,0.02,230,0.02,257,3.333,403,3.333,406,4.708,459,1.56,469,1.237,471,1.679,507,1.811,595,4.24,603,3.333,617,3.659,1081,4.378,1180,3.563,1196,4.373,1235,4.24,1238,4.373,1261,3.721,1282,2.865,1283,2.865,1284,2.13,1384,4.24,1393,4.132,1624,4.984,1931,5.57,1932,3.265,1933,5.584,1934,6.125,1935,5.91,1936,5.028,1937,5.91,1938,5.028,1939,6.606,1940,3.872,1941,3.872,1942,5.028,1943,5.028,1944,5.028,1945,4.24,1946,5.028,1947,5.028,1948,5.028,1949,5.028,1950,3.872,1951,3.872,1952,4.24,1953,5.028,1954,4.24,1955,5.028,1956,5.028,1957,3.872,1958,3.872,1959,3.872,1960,3.872,1961,5.028,1962,3.872,1963,3.872]],["title/injectables/ThreadService.html",[469,0.818,988,1.683]],["body/injectables/ThreadService.html",[3,0.154,4,0.131,8,0.31,10,0.935,17,0.963,19,0.335,29,0.131,30,0.333,32,1.738,38,0.419,39,1.409,43,0.504,47,0.643,49,0.602,50,0.028,51,0.374,52,0.367,53,0.602,57,1.299,59,3.394,60,1.532,62,1.788,67,1.007,69,2.464,70,0.716,75,3.867,76,0.976,78,2.846,85,0.976,86,0.815,87,0.828,88,1.179,89,1.324,98,0.633,100,0.463,101,0.251,111,0.154,112,0.109,114,1.738,120,1.084,123,0.463,125,2.314,139,0.905,150,2.213,229,0.014,230,0.019,239,1.222,249,3.053,254,1.943,256,2.395,259,2.556,262,2.124,268,2.124,271,3.366,282,1.532,284,2.793,295,1.151,309,1.086,317,3.053,335,1.542,349,0.763,356,2.666,369,1.652,375,3.137,377,2.603,378,2.124,379,1.41,380,1.016,385,1.943,392,1.554,393,3.502,444,3.361,459,0.944,469,0.869,471,1.016,482,3.95,503,1.735,507,1.096,563,3.538,590,2.342,601,3.053,603,2.342,613,1.977,652,1.735,737,2.979,820,2.979,836,3.146,845,2.342,909,2.824,912,2.556,916,2.124,920,3.867,926,3.585,932,1.554,933,2.818,951,2.342,953,2.979,954,1.977,958,1.977,988,1.788,994,4.238,1000,3.137,1029,3.867,1195,3.146,1206,2.979,1257,2.979,1284,1.289,1336,4.282,1370,2.124,1375,2.615,1393,3.95,1686,2.979,1692,3.585,1798,3.585,1824,2.818,1871,3.146,1877,2.979,1892,1.735,1897,1.977,1920,1.735,1921,1.735,1922,2.615,1945,2.979,1952,3.585,1964,1.977,1965,4.252,1966,4.252,1967,5.078,1968,4.252,1969,4.252,1970,4.252,1971,4.252,1972,4.252,1973,4.252,1974,5.338,1975,5.338,1976,5.338,1977,4.733,1978,3.533,1979,4.733,1980,5.338,1981,5.338,1982,5.338,1983,4.733,1984,5.338,1985,3.533,1986,3.533,1987,2.345,1988,3.533,1989,6.25,1990,4.733,1991,5.338,1992,4.733,1993,3.533,1994,2.345,1995,3.533,1996,3.533,1997,3.533,1998,2.345,1999,3.533,2000,4.252,2001,3.533,2002,2.345,2003,3.533,2004,2.345,2005,2.345,2006,3.533,2007,2.345,2008,2.979,2009,4.252,2010,4.252,2011,4.252,2012,2.345,2013,2.345,2014,3.533,2015,2.345,2016,3.533,2017,3.533,2018,3.533,2019,2.345,2020,4.252,2021,4.252,2022,2.345,2023,3.533,2024,2.345,2025,2.345,2026,4.252,2027,2.345,2028,3.533,2029,2.345,2030,2.345,2031,2.345,2032,2.345,2033,2.345,2034,2.345,2035,2.345,2036,2.345,2037,3.533,2038,2.345,2039,2.345,2040,2.345,2041,4.733,2042,4.252,2043,2.345,2044,2.345,2045,2.345,2046,2.345,2047,2.345,2048,2.345,2049,2.345,2050,2.345,2051,2.345,2052,2.345,2053,2.345,2054,2.345,2055,2.345,2056,2.345,2057,2.345,2058,2.345,2059,2.345,2060,2.345,2061,2.345,2062,2.345,2063,2.345,2064,2.345,2065,2.345,2066,2.345,2067,2.345,2068,3.533,2069,2.345,2070,4.733,2071,2.345,2072,2.345,2073,2.345,2074,2.345,2075,2.345,2076,2.345,2077,2.345,2078,2.345,2079,2.345,2080,2.345,2081,2.345]],["title/classes/UserData.html",[112,0.155,1895,1.829]],["body/classes/UserData.html",[3,0.316,4,0.27,8,0.27,19,0.689,29,0.27,30,0.378,43,0.573,47,0.638,49,0.573,50,0.028,51,0.419,52,0.371,53,0.573,85,1.055,111,0.316,112,0.225,125,2.832,229,0.023,230,0.023,309,1.141,385,3.394,386,3.572,491,2.675,518,3.2,522,4.269,524,3.572,1335,4.09,1346,4.071,1347,4.071,1348,3.572,1349,4.071,1350,4.071,1355,4.071,1356,3.572,1788,3.71,1895,3.173,2082,4.071,2083,5.769,2084,4.828,2085,4.828,2086,4.828,2087,4.828,2088,4.828]],["title/interfaces/UserInfo.html",[538,2,2089,2.205]],["body/interfaces/UserInfo.html",[3,0.333,4,0.285,8,0.285,29,0.285,30,0.39,50,0.027,51,0.426,52,0.371,85,1.153,111,0.333,229,0.024,230,0.024,309,1.17,385,3.576,491,2.819,538,3.058,539,3.764,1335,4.31,1788,3.909,2089,3.944,2090,4.289]],["title/components/UserMenuDialogComponent.html",[0,0.013,221,0.708]],["body/components/UserMenuDialogComponent.html",[0,0.023,1,0.661,2,0.992,3,0.204,4,0.174,5,0.764,6,0.711,7,0.764,8,0.174,10,0.712,13,0.711,14,1.562,15,1.675,16,1.149,17,0.959,18,0.992,19,0.712,20,1.066,23,1.318,24,0.661,25,1.066,27,1.227,29,0.174,30,0.284,32,1.916,33,1.745,34,2.423,38,0.514,39,1.318,41,3.248,43,0.368,44,1.867,45,3.125,46,3.416,47,0.602,49,0.368,50,0.028,51,0.354,52,0.329,53,0.368,57,1.162,62,2.193,70,0.592,72,2.193,74,1.128,76,0.792,85,1.038,86,0.704,87,0.704,88,1.149,89,1.624,98,0.772,99,0.764,100,0.613,101,0.333,103,1.251,111,0.204,112,0.145,113,1.867,114,1.625,116,1.708,117,2.383,118,1.452,119,1.708,120,0.711,143,2.059,150,2.026,177,0.764,178,1.066,179,0.992,180,0.568,181,1.329,182,0.764,183,1.228,184,0.922,185,1.329,186,0.922,187,0.661,188,0.764,189,0.711,190,0.711,191,0.764,192,0.661,193,0.764,194,0.661,195,0.764,196,0.661,197,0.711,198,0.661,199,0.764,200,0.661,201,0.764,202,0.711,203,0.764,204,0.661,205,0.764,206,0.711,207,0.764,208,0.711,209,0.764,210,0.661,211,0.764,212,0.661,213,0.764,214,0.922,215,1.143,216,0.764,217,0.661,218,0.764,219,0.711,220,0.764,221,1.149,222,1.565,223,0.661,224,0.764,225,0.711,226,0.613,227,0.711,228,0.764,229,0.017,230,0.017,239,1.382,269,2.872,284,2.383,335,0.943,351,2.606,352,1.867,353,2.872,354,2.872,367,2.059,368,2.059,370,2.059,373,2.619,409,2.298,427,2.298,434,2.059,435,2.619,442,2.619,443,2.059,446,2.619,447,2.059,448,1.867,468,1.346,500,1.708,506,1.867,546,2.745,604,2.606,607,3.236,883,1.708,929,3.207,988,2.733,1109,4.003,1110,3.694,1111,3.308,1112,4.209,1113,4.209,1114,4.69,1115,2.298,1119,2.298,1121,2.298,1122,2.619,1123,2.059,1270,3.207,1284,1.708,1327,2.619,1663,2.619,1666,4.962,1676,3.58,1677,3.654,1687,3.207,1721,2.619,1741,2.619,1753,2.619,1754,3.654,1895,2.383,1896,2.298,2008,3.654,2091,5.345,2092,4.992,2093,4.992,2094,5.885,2095,4.992,2096,3.106,2097,3.106,2098,3.654,2099,3.654,2100,4.334,2101,4.334,2102,4.334,2103,4.334,2104,3.106,2105,4.334,2106,4.334,2107,4.992,2108,3.106,2109,3.106,2110,4.334,2111,3.106,2112,3.106,2113,3.106,2114,3.106,2115,3.106,2116,3.106,2117,3.106,2118,4.334]],["title/injectables/UserService.html",[239,0.761,469,0.818]],["body/injectables/UserService.html",[0,0.012,3,0.129,4,0.11,8,0.241,10,0.768,19,0.543,29,0.11,30,0.283,38,0.366,39,1.729,43,0.233,47,0.626,49,0.672,50,0.028,51,0.419,52,0.35,53,0.696,55,1.696,57,1.307,59,3.112,63,2.735,67,1.178,69,2.169,70,0.769,74,1.16,75,2.044,76,0.696,78,1.854,79,1.156,80,1.442,85,0.788,86,0.611,87,0.611,88,1.106,98,0.556,100,0.388,101,0.211,111,0.129,112,0.092,120,1.344,123,1.175,125,1.869,139,1.206,150,1.78,215,0.706,229,0.012,230,0.012,239,0.706,250,3.68,257,3.296,258,0.919,270,2.593,277,1.696,282,1.337,284,1.696,307,2.6,309,1.143,317,2.593,321,3.68,322,1.454,327,2.044,335,1.783,356,3.042,369,1.442,375,1.302,376,1.657,377,3.411,378,1.181,379,1.181,380,0.852,385,3.564,392,1.302,395,2.6,396,3.671,397,3.21,413,1.696,443,4.312,459,0.791,468,0.852,469,0.759,471,0.852,480,2.523,487,4.193,491,2.456,507,0.919,508,0.852,564,2.99,568,3.848,569,2.282,583,2.817,601,1.854,607,1.696,652,1.454,665,1.302,809,1.302,812,2.282,832,4.193,833,2.6,839,2.817,845,2.858,854,2.593,909,2.518,912,1.854,916,2.99,923,2.817,932,1.302,933,1.302,951,2.044,993,3.21,1073,1.854,1090,3.21,1092,4.098,1124,1.854,1335,2.523,1348,1.454,1356,2.282,1370,1.854,1374,2.282,1383,3.296,1386,2.044,1440,3.467,1466,3.21,1507,3.636,1508,1.657,1509,1.657,1615,3.636,1662,3.21,1680,2.282,1687,2.817,1688,4.385,1788,3.238,1824,3.947,1871,3.848,1878,4.193,1890,1.657,1891,1.657,1892,1.454,1894,3.21,1895,2.094,1896,1.454,1920,2.282,1921,1.454,1922,1.454,1923,1.657,1924,2.6,1925,1.657,1926,1.657,1929,3.636,1930,1.657,1954,2.6,2089,3.756,2098,2.6,2099,3.21,2119,1.657,2120,3.807,2121,5.538,2122,3.807,2123,3.084,2124,3.084,2125,4.312,2126,4.973,2127,3.084,2128,3.084,2129,3.084,2130,5.385,2131,4.312,2132,5.385,2133,4.312,2134,4.312,2135,4.312,2136,3.084,2137,4.973,2138,4.973,2139,4.973,2140,3.084,2141,3.084,2142,1.965,2143,3.084,2144,1.965,2145,1.965,2146,3.084,2147,1.965,2148,4.973,2149,4.193,2150,3.084,2151,1.965,2152,4.973,2153,3.084,2154,3.084,2155,1.965,2156,4.312,2157,3.084,2158,1.965,2159,1.965,2160,3.951,2161,3.084,2162,3.084,2163,1.965,2164,4.973,2165,3.084,2166,1.965,2167,3.084,2168,1.965,2169,3.084,2170,4.312,2171,3.807,2172,3.807,2173,1.965,2174,4.312,2175,1.965,2176,3.084,2177,1.965,2178,3.084,2179,3.084,2180,3.084,2181,1.965,2182,3.807,2183,3.807,2184,4.686,2185,1.965,2186,1.965,2187,1.965,2188,1.965,2189,1.965,2190,1.965,2191,1.965,2192,1.965,2193,1.965,2194,1.965,2195,1.965,2196,1.965,2197,1.965,2198,3.084,2199,3.084,2200,1.965,2201,1.965,2202,3.084,2203,1.965,2204,1.965,2205,1.965,2206,1.965,2207,1.965,2208,1.965,2209,1.965,2210,1.965,2211,1.965,2212,1.965,2213,1.965,2214,1.965,2215,3.807,2216,1.965,2217,4.312,2218,1.965,2219,1.965,2220,1.965,2221,1.965,2222,1.965,2223,1.965,2224,1.965,2225,1.965,2226,1.965,2227,1.965,2228,1.965,2229,1.965,2230,1.965,2231,4.973,2232,1.965,2233,1.965,2234,1.965,2235,1.965,2236,3.084,2237,3.084,2238,3.084,2239,3.084,2240,1.965,2241,3.084,2242,1.965,2243,1.965,2244,1.965]],["title/components/VerifyComponent.html",[0,0.013,223,0.708]],["body/components/VerifyComponent.html",[0,0.022,1,0.82,2,1.148,3,0.253,4,0.216,5,0.948,6,0.882,7,0.948,8,0.216,10,0.842,13,0.882,14,1.588,15,1.704,16,1.255,17,0.941,18,1.148,19,0.795,20,1.233,23,1.471,24,0.82,25,1.233,27,1.42,29,0.216,30,0.329,34,1.879,38,0.595,39,1.471,43,0.457,46,3.014,47,0.589,49,0.457,50,0.028,51,0.387,52,0.33,53,0.457,57,0.99,60,2.173,70,0.457,73,3.71,74,0.996,80,2.344,86,0.503,87,0.503,98,0.725,99,0.948,100,0.761,101,0.413,102,1.445,103,1.553,111,0.253,112,0.18,143,2.555,172,3.014,177,0.948,178,1.233,179,1.148,180,0.705,181,1.451,182,0.948,183,1.37,184,0.82,185,1.451,186,0.82,187,0.82,188,0.948,189,0.882,190,0.882,191,0.948,192,0.82,193,0.948,194,0.82,195,0.948,196,0.82,197,0.882,198,0.82,199,0.948,200,0.82,201,0.948,202,0.882,203,0.948,204,0.82,205,0.948,206,0.882,207,0.948,208,0.882,209,0.948,210,0.82,211,0.948,212,0.82,213,0.948,214,0.82,215,0.882,216,0.948,217,0.82,218,0.948,219,0.882,220,0.948,221,0.82,222,0.882,223,1.255,224,1.37,225,0.882,226,0.761,227,0.882,228,0.948,229,0.02,230,0.02,256,2.537,309,0.846,335,1.171,470,3.448,480,4.156,508,1.671,800,3.693,804,4.698,850,4.227,854,3.547,860,3.323,871,3.251,894,3.71,910,3.71,911,4.227,1109,3.911,1111,3.693,1541,4.227,1676,3.323,1719,3.251,1748,3.251,2245,3.251,2246,5.014,2247,5.014,2248,6.27,2249,3.855,2250,5.014,2251,3.855,2252,5.014,2253,5.014,2254,3.855,2255,3.855,2256,3.855,2257,5.014]],["title/coverage.html",[2258,3.831]],["body/coverage.html",[0,0.027,1,0.853,8,0.224,9,3.806,10,0.884,11,3.409,12,3.806,17,1.011,24,0.853,32,1.306,37,1.739,50,0.028,52,0.224,74,1.07,94,2.658,106,2.658,112,0.265,180,0.733,184,0.853,186,0.853,187,0.853,189,0.918,190,0.918,192,0.853,194,0.853,196,0.853,198,0.853,200,0.853,202,0.918,204,0.853,206,0.918,208,0.918,210,0.853,212,0.853,214,0.853,217,0.853,219,0.918,221,0.853,222,1.177,223,0.853,226,0.792,229,0.02,230,0.02,239,0.918,349,2.178,350,3.806,351,3.092,352,3.601,403,2.658,434,2.658,458,3.382,469,1.634,470,2.206,472,3.382,519,3.382,538,3.092,540,3.382,542,3.382,563,2.658,711,4.337,772,2.968,798,3.382,898,3.382,899,3.382,966,2.968,967,3.382,988,2.03,1055,3.382,1114,2.968,1155,3.382,1171,3.382,1180,2.206,1243,3.382,1332,2.968,1333,3.382,1361,2.968,1362,3.382,1414,3.382,1439,3.382,1547,3.382,1578,3.382,1601,3.382,1602,3.382,1654,3.382,1655,3.382,1760,3.382,1857,3.382,1895,2.206,1931,3.382,1932,3.382,1964,3.382,2082,3.382,2089,2.658,2090,3.382,2091,3.382,2119,3.382,2149,3.382,2245,3.382,2258,3.382,2259,4.011,2260,4.011,2261,5.678,2262,3.382,2263,3.382,2264,5.678,2265,4.011,2266,4.011,2267,5.143,2268,4.011,2269,4.011,2270,5.143,2271,4.011,2272,4.011,2273,4.011,2274,4.011,2275,4.011,2276,4.011,2277,4.011,2278,4.011,2279,5.143,2280,4.011,2281,4.011,2282,4.011,2283,4.011,2284,4.011,2285,4.011,2286,4.011,2287,4.011,2288,4.011,2289,4.011,2290,4.011,2291,4.011,2292,4.011,2293,5.143,2294,4.011,2295,4.011,2296,4.011,2297,4.011,2298,4.011,2299,4.011,2300,3.382,2301,4.011,2302,4.011,2303,5.143,2304,4.011,2305,4.011,2306,4.011,2307,4.011,2308,4.011,2309,4.011,2310,4.011,2311,4.011,2312,4.011,2313,4.011,2314,4.011,2315,4.011,2316,4.011,2317,4.011,2318,4.011,2319,4.011,2320,4.011,2321,4.011,2322,4.011,2323,4.011,2324,4.011,2325,4.011,2326,4.011,2327,4.011,2328,4.011,2329,4.011,2330,4.011,2331,4.011]],["title/dependencies.html",[2332,2.054,2333,3.374]],["body/dependencies.html",[50,0.028,99,1.263,101,0.551,102,1.925,229,0.024,230,0.024,468,2.226,621,3.088,1000,3.404,1284,2.824,2333,4.33,2334,6.83,2335,5.135,2336,5.984,2337,5.135,2338,5.135,2339,5.135,2340,5.135,2341,5.984,2342,5.984,2343,5.135,2344,5.135,2345,5.135,2346,5.135,2347,5.135,2348,5.135,2349,5.135,2350,5.135,2351,5.135]],["title/index.html",[29,0.155,2352,2.776,2353,2.776]],["body/index.html",[0,0.024,4,0.271,10,0.69,16,1.029,50,0.023,51,0.317,229,0.023,230,0.023,485,2.909,543,2.661,579,3.58,584,4.08,585,4.094,607,2.661,666,2.661,698,4.91,813,4.57,832,3.58,836,3.58,1383,3.207,1388,4.871,1695,4.08,1795,4.08,2160,4.08,2332,3.58,2354,5.777,2355,4.838,2356,6.177,2357,4.08,2358,4.838,2359,4.838,2360,5.777,2361,6.538,2362,6.707,2363,4.838,2364,4.838,2365,4.838,2366,4.838,2367,4.838,2368,4.838,2369,4.838,2370,6.177,2371,4.838,2372,6.398,2373,4.838,2374,4.838,2375,4.838,2376,5.777,2377,5.777,2378,6.398,2379,4.838,2380,5.777,2381,4.838,2382,4.838,2383,4.838,2384,4.838,2385,5.777,2386,4.838,2387,4.838,2388,4.838,2389,4.838,2390,6.177,2391,4.838,2392,4.838,2393,3.58]],["title/modules.html",[2394,3.831]],["body/modules.html",[50,0.025,229,0.025,230,0.025,2394,4.608]],["title/overview.html",[2393,3.362]],["body/overview.html",[2,1.235,50,0.024,180,0.986,229,0.024,230,0.024,319,2.339,471,2.339,518,3.576,539,3.992,752,4.549,2300,4.549,2393,3.992,2395,5.395,2396,5.395]],["title/properties.html",[30,0.262,2332,2.054]],["body/properties.html",[30,0.357,50,0.026,229,0.025,230,0.025,2357,4.59,2397,5.443]],["title/miscellaneous/variables.html",[1636,2.961,2398,2.34]],["body/miscellaneous/variables.html",[29,0.287,50,0.028,52,0.287,86,0.668,87,0.668,229,0.024,230,0.024,465,5.334,466,5.334,500,2.817,1636,3.791,2262,4.32,2263,5.039,2398,4.32,2399,5.123,2400,5.123,2401,5.123,2402,5.123,2403,5.123,2404,5.123,2405,5.123,2406,5.123,2407,5.123,2408,5.123,2409,5.123,2410,5.123,2411,5.123,2412,5.123,2413,5.123,2414,5.123,2415,5.123,2416,5.123,2417,5.123,2418,5.123,2419,5.123,2420,5.123,2421,5.123,2422,5.123,2423,5.123]]],"invertedIndex":[["",{"_index":50,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":349,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"coverage.html":{}}}],["0.0.0",{"_index":2397,"title":{},"body":{"properties.html":{}}}],["0.14.2",{"_index":2351,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2264,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2312,"title":{},"body":{"coverage.html":{}}}],["0/21",{"_index":2317,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2261,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2310,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2313,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2311,"title":{},"body":{"coverage.html":{}}}],["000000000",{"_index":1170,"title":{},"body":{"components/ImprintComponent.html":{}}}],["1",{"_index":319,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"overview.html":{}}}],["1.1",{"_index":735,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["1.125rem",{"_index":782,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["1.1875rem",{"_index":704,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["1.25rem",{"_index":791,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["1.4s",{"_index":763,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["1/15",{"_index":2278,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":2274,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":2309,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":2396,"title":{},"body":{"overview.html":{}}}],["10/29",{"_index":2307,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":715,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{}}}],["1000",{"_index":884,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["100px",{"_index":784,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["10px",{"_index":756,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["11/12",{"_index":2320,"title":{},"body":{"coverage.html":{}}}],["11/27",{"_index":2298,"title":{},"body":{"coverage.html":{}}}],["1181px",{"_index":780,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["120px",{"_index":787,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["12px",{"_index":783,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["13/33",{"_index":2283,"title":{},"body":{"coverage.html":{}}}],["14/34",{"_index":2292,"title":{},"body":{"coverage.html":{}}}],["14/37",{"_index":2271,"title":{},"body":{"coverage.html":{}}}],["1440",{"_index":1642,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["1440px",{"_index":1631,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["16",{"_index":2308,"title":{},"body":{"coverage.html":{}}}],["16/42",{"_index":2326,"title":{},"body":{"coverage.html":{}}}],["168px",{"_index":713,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["16px",{"_index":703,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["17.0.0",{"_index":2334,"title":{},"body":{"dependencies.html":{}}}],["17.0.6",{"_index":2358,"title":{},"body":{"index.html":{}}}],["17.1.0",{"_index":2339,"title":{},"body":{"dependencies.html":{}}}],["17.3.10",{"_index":2336,"title":{},"body":{"dependencies.html":{}}}],["17/27",{"_index":2329,"title":{},"body":{"coverage.html":{}}}],["180deg",{"_index":631,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["184px",{"_index":758,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["186px",{"_index":757,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["19px",{"_index":1577,"title":{},"body":{"components/RegisterComponent.html":{}}}],["1:728652156728:web:52fda9767640c5a89efbcd",{"_index":2410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1px",{"_index":747,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["1rem",{"_index":797,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["2",{"_index":752,"title":{},"body":{"components/ChooseavatarComponent.html":{},"overview.html":{}}}],["2.3.0",{"_index":2349,"title":{},"body":{"dependencies.html":{}}}],["2/65",{"_index":2301,"title":{},"body":{"coverage.html":{}}}],["2/8",{"_index":2318,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":2273,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":2116,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["20px",{"_index":709,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["21",{"_index":2275,"title":{},"body":{"coverage.html":{}}}],["22/58",{"_index":2316,"title":{},"body":{"coverage.html":{}}}],["23",{"_index":2395,"title":{},"body":{"overview.html":{}}}],["24px",{"_index":700,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["25",{"_index":772,"title":{},"body":{"components/ChooseavatarComponent.html":{},"injectables/SidebarService.html":{},"coverage.html":{}}}],["27",{"_index":2293,"title":{},"body":{"coverage.html":{}}}],["28",{"_index":2289,"title":{},"body":{"coverage.html":{}}}],["2px",{"_index":1560,"title":{},"body":{"components/RegisterComponent.html":{}}}],["2rem",{"_index":692,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["3",{"_index":2300,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["3/10",{"_index":2305,"title":{},"body":{"coverage.html":{}}}],["3/11",{"_index":2294,"title":{},"body":{"coverage.html":{}}}],["3/14",{"_index":2276,"title":{},"body":{"coverage.html":{}}}],["3/37",{"_index":2288,"title":{},"body":{"coverage.html":{}}}],["3/7",{"_index":2314,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":2303,"title":{},"body":{"coverage.html":{}}}],["30deg",{"_index":1588,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["32px",{"_index":740,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["34",{"_index":2306,"title":{},"body":{"coverage.html":{}}}],["36",{"_index":2295,"title":{},"body":{"coverage.html":{}}}],["36px",{"_index":793,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["37",{"_index":2270,"title":{},"body":{"coverage.html":{}}}],["38",{"_index":2325,"title":{},"body":{"coverage.html":{}}}],["39",{"_index":2282,"title":{},"body":{"coverage.html":{}}}],["4/14",{"_index":2290,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":2297,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":1574,"title":{},"body":{"components/RegisterComponent.html":{}}}],["400px",{"_index":1575,"title":{},"body":{"components/RegisterComponent.html":{}}}],["40px",{"_index":687,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["41",{"_index":2291,"title":{},"body":{"coverage.html":{}}}],["42",{"_index":2267,"title":{},"body":{"coverage.html":{}}}],["422px",{"_index":794,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["42526e",{"_index":1573,"title":{},"body":{"components/RegisterComponent.html":{}}}],["44",{"_index":2321,"title":{},"body":{"coverage.html":{}}}],["444df2ce",{"_index":753,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["46",{"_index":2265,"title":{},"body":{"coverage.html":{}}}],["46px",{"_index":795,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["480",{"_index":1648,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["480px",{"_index":792,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["4px",{"_index":726,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["5",{"_index":1543,"title":{},"body":{"components/RegisterComponent.html":{}}}],["5/10",{"_index":2323,"title":{},"body":{"coverage.html":{}}}],["5/54",{"_index":2286,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":711,"title":{},"body":{"components/ChooseavatarComponent.html":{},"coverage.html":{}}}],["50px",{"_index":1552,"title":{},"body":{"components/RegisterComponent.html":{}}}],["56px",{"_index":796,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["57px",{"_index":768,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["58px",{"_index":767,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["6",{"_index":2277,"title":{},"body":{"coverage.html":{}}}],["6/14",{"_index":2268,"title":{},"body":{"coverage.html":{}}}],["6/20",{"_index":2304,"title":{},"body":{"coverage.html":{}}}],["600",{"_index":1646,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["60px",{"_index":790,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["62",{"_index":2328,"title":{},"body":{"coverage.html":{}}}],["64px",{"_index":725,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["67px",{"_index":688,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["7.8.0",{"_index":2347,"title":{},"body":{"dependencies.html":{}}}],["7/15",{"_index":2266,"title":{},"body":{"coverage.html":{}}}],["7/19",{"_index":2296,"title":{},"body":{"coverage.html":{}}}],["700",{"_index":694,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["728652156728",{"_index":2418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["72px",{"_index":724,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["75",{"_index":775,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["768px",{"_index":786,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["8",{"_index":1547,"title":{},"body":{"components/RegisterComponent.html":{},"coverage.html":{}}}],["8/16",{"_index":2272,"title":{},"body":{"coverage.html":{}}}],["8/18",{"_index":2322,"title":{},"body":{"coverage.html":{}}}],["8/29",{"_index":2327,"title":{},"body":{"coverage.html":{}}}],["8px",{"_index":785,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["9",{"_index":2285,"title":{},"body":{"coverage.html":{}}}],["9.2.0",{"_index":2346,"title":{},"body":{"dependencies.html":{}}}],["91",{"_index":2319,"title":{},"body":{"coverage.html":{}}}],["960",{"_index":1644,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["_elementref",{"_index":1422,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["a.timestamp",{"_index":2050,"title":{},"body":{"injectables/ThreadService.html":{}}}],["abbrechen",{"_index":1759,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["aborts",{"_index":1995,"title":{},"body":{"injectables/ThreadService.html":{}}}],["absolute",{"_index":749,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["abstractcontrol",{"_index":862,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["accept",{"_index":279,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["access",{"_index":921,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["accordingly",{"_index":820,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"injectables/ThreadService.html":{}}}],["actions",{"_index":1219,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["active",{"_index":1375,"title":{},"body":{"injectables/MutationObserverService.html":{},"components/SidebarComponent.html":{},"injectables/ThreadService.html":{}}}],["activechanneltitle",{"_index":1763,"title":{},"body":{"components/SidebarComponent.html":{}}}],["activedirectchannel",{"_index":1764,"title":{},"body":{"components/SidebarComponent.html":{}}}],["activeprivatechannel",{"_index":1765,"title":{},"body":{"components/SidebarComponent.html":{}}}],["actual",{"_index":1875,"title":{},"body":{"injectables/SidebarService.html":{}}}],["actual_component",{"_index":228,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["add",{"_index":16,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"index.html":{}}}],["addcheckemoji",{"_index":977,"title":{},"body":{"injectables/EmojiService.html":{}}}],["addcheckemoji(event",{"_index":990,"title":{},"body":{"injectables/EmojiService.html":{}}}],["adddoc",{"_index":375,"title":{},"body":{"components/AddUserDialogComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["adddoc(collection(this.firestore",{"_index":395,"title":{},"body":{"components/AddUserDialogComponent.html":{},"injectables/UserService.html":{}}}],["adddoc(this.refthreadmessages",{"_index":2052,"title":{},"body":{"injectables/ThreadService.html":{}}}],["added",{"_index":1382,"title":{},"body":{"injectables/MutationObserverService.html":{},"injectables/SidebarService.html":{}}}],["addeduser",{"_index":365,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["addeduser.reset",{"_index":383,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["addemoji",{"_index":978,"title":{},"body":{"injectables/EmojiService.html":{}}}],["addemoji(event",{"_index":996,"title":{},"body":{"injectables/EmojiService.html":{}}}],["addemojitoeditedmessage",{"_index":979,"title":{},"body":{"injectables/EmojiService.html":{}}}],["addemojitoeditedmessage(index",{"_index":999,"title":{},"body":{"injectables/EmojiService.html":{}}}],["adding",{"_index":419,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["addnewchannel",{"_index":1803,"title":{},"body":{"components/SidebarComponent.html":{}}}],["addnewchannelcomponent",{"_index":1,"title":{"components/AddNewChannelComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["addnewemoji",{"_index":980,"title":{},"body":{"injectables/EmojiService.html":{}}}],["addnewemoji(index",{"_index":1002,"title":{},"body":{"injectables/EmojiService.html":{}}}],["addnewusertochannelcomponent",{"_index":24,"title":{"components/AddNewUserToChannelComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["addraisedhandsemoji",{"_index":981,"title":{},"body":{"injectables/EmojiService.html":{}}}],["addraisedhandsemoji(event",{"_index":1005,"title":{},"body":{"injectables/EmojiService.html":{}}}],["address",{"_index":1473,"title":{},"body":{"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["adds",{"_index":259,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/MainsectionComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{}}}],["adduser",{"_index":355,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{}}}],["adduserdialogcomponent",{"_index":184,"title":{"components/AddUserDialogComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["addusertochanneldialogcomponent",{"_index":186,"title":{"components/AddUserToChannelDialogComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["adresse",{"_index":1168,"title":{},"body":{"components/ImprintComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{}}}],["afterclosed",{"_index":447,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["afterviewinit",{"_index":1056,"title":{},"body":{"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{}}}],["afterwards",{"_index":66,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["again",{"_index":2011,"title":{},"body":{"injectables/ThreadService.html":{}}}],["against",{"_index":844,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["ai",{"_index":721,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["aktiv",{"_index":1679,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["align",{"_index":706,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["alle",{"_index":341,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["allows",{"_index":1693,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["allusers",{"_index":2120,"title":{},"body":{"injectables/UserService.html":{}}}],["already",{"_index":1507,"title":{},"body":{"components/RegisterComponent.html":{},"injectables/UserService.html":{}}}],["alreadypushed",{"_index":1734,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["anderen",{"_index":175,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["angular",{"_index":585,"title":{},"body":{"components/ChooseavatarComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"index.html":{}}}],["angular/animations",{"_index":621,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{},"components/SidebarComponent.html":{},"dependencies.html":{}}}],["angular/cdk",{"_index":2335,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/dialog",{"_index":110,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["angular/common",{"_index":99,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":2337,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":101,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"dependencies.html":{}}}],["angular/fire",{"_index":2338,"title":{},"body":{"dependencies.html":{}}}],["angular/fire/app",{"_index":1487,"title":{},"body":{"components/RegisterComponent.html":{}}}],["angular/fire/app/app.module",{"_index":301,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["angular/fire/auth",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["angular/fire/firestore",{"_index":380,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["angular/forms",{"_index":102,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/VerifyComponent.html":{},"dependencies.html":{}}}],["angular/material",{"_index":2340,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":299,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["angular/material/dialog",{"_index":103,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["angular/material/menu",{"_index":298,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["angular/platform",{"_index":2341,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":468,"title":{},"body":{"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ImprintComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["animate",{"_index":620,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["animate('0.3s",{"_index":633,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["animation",{"_index":761,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["animations",{"_index":622,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{},"components/SidebarComponent.html":{}}}],["anmelden",{"_index":897,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["another",{"_index":2169,"title":{},"body":{"injectables/UserService.html":{}}}],["apikey",{"_index":2413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":15,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["app.component.html",{"_index":461,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":462,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":187,"title":{"components/AppComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":2263,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appear",{"_index":1228,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["appearance",{"_index":1557,"title":{},"body":{"components/RegisterComponent.html":{}}}],["appid",{"_index":2409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application",{"_index":2366,"title":{},"body":{"index.html":{}}}],["applicationconfig",{"_index":2400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appoutsideclick",{"_index":227,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["arguments",{"_index":1424,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["around",{"_index":789,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["array",{"_index":268,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{}}}],["arrayremove",{"_index":930,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"injectables/SidebarService.html":{}}}],["arrayremove(this.userservice.currentuser",{"_index":950,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["arrayunion",{"_index":376,"title":{},"body":{"components/AddUserDialogComponent.html":{},"injectables/UserService.html":{}}}],["arrayunion(this.createuserinfo.id",{"_index":2235,"title":{},"body":{"injectables/UserService.html":{}}}],["arrayunion(user.uid",{"_index":394,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["artifacts",{"_index":2373,"title":{},"body":{"index.html":{}}}],["assets/img/login/default_profil_img.png",{"_index":609,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["assign",{"_index":2152,"title":{},"body":{"injectables/UserService.html":{}}}],["async",{"_index":39,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["asynchronous",{"_index":2001,"title":{},"body":{"injectables/ThreadService.html":{}}}],["asynchronously",{"_index":256,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"components/VerifyComponent.html":{}}}],["aufgetreten",{"_index":1525,"title":{},"body":{"components/RegisterComponent.html":{}}}],["aus",{"_index":668,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["auth",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["auth/email",{"_index":1528,"title":{},"body":{"components/RegisterComponent.html":{}}}],["auth/invalid",{"_index":1532,"title":{},"body":{"components/RegisterComponent.html":{}}}],["authdomain",{"_index":2415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authentication",{"_index":2101,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["authentification",{"_index":2236,"title":{},"body":{"injectables/UserService.html":{}}}],["authservice",{"_index":470,"title":{"injectables/AuthService.html":{}},"body":{"injectables/AuthService.html":{},"components/ConfirmpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["automatically",{"_index":584,"title":{},"body":{"components/ChooseavatarComponent.html":{},"index.html":{}}}],["avatar",{"_index":599,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["avatars",{"_index":550,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["await",{"_index":335,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["b",{"_index":2049,"title":{},"body":{"injectables/ThreadService.html":{}}}],["b.timestamp",{"_index":2051,"title":{},"body":{"injectables/ThreadService.html":{}}}],["background",{"_index":744,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["bar",{"_index":1222,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["based",{"_index":282,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["bearbeiten",{"_index":961,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"components/ShowProfileComponent.html":{}}}],["behavior",{"_index":1139,"title":{},"body":{"components/HeaderComponent.html":{}}}],["behaviorsubject",{"_index":1952,"title":{},"body":{"injectables/StateService.html":{},"injectables/ThreadService.html":{}}}],["bei",{"_index":1534,"title":{},"body":{"components/RegisterComponent.html":{}}}],["being",{"_index":912,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"injectables/MutationObserverService.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["beispiel",{"_index":163,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["benutzer",{"_index":1512,"title":{},"body":{"components/RegisterComponent.html":{}}}],["ber",{"_index":1597,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["bereits",{"_index":1514,"title":{},"body":{"components/RegisterComponent.html":{}}}],["beschreibung",{"_index":176,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["besten",{"_index":156,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["bestimmte",{"_index":345,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["bestätigen",{"_index":2257,"title":{},"body":{"components/VerifyComponent.html":{}}}],["between",{"_index":720,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{}}}],["bild",{"_index":673,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["bitte",{"_index":172,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/VerifyComponent.html":{}}}],["block",{"_index":1131,"title":{},"body":{"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{}}}],["blub",{"_index":766,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["boolean",{"_index":85,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"injectables/AuthService.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{}}}],["border",{"_index":710,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["bottom",{"_index":708,"title":{},"body":{"components/ChooseavatarComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{}}}],["box",{"_index":117,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["browser",{"_index":2342,"title":{},"body":{"dependencies.html":{}}}],["btns",{"_index":695,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["bubble",{"_index":466,"title":{},"body":{"components/AppComponent.html":{},"miscellaneous/variables.html":{}}}],["build",{"_index":2372,"title":{},"body":{"index.html":{}}}],["button",{"_index":743,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["call",{"_index":1619,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["callback",{"_index":1624,"title":{},"body":{"injectables/ResizeListenerService.html":{},"injectables/StateService.html":{}}}],["callbacks",{"_index":1621,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["called",{"_index":64,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ChooseavatarComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{}}}],["calledfromfunction",{"_index":997,"title":{},"body":{"injectables/EmojiService.html":{}}}],["calling",{"_index":252,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["calls",{"_index":825,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{}}}],["capabilities",{"_index":2388,"title":{},"body":{"index.html":{}}}],["case",{"_index":1527,"title":{},"body":{"components/RegisterComponent.html":{}}}],["catch",{"_index":134,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{}}}],["catch((error",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["cb",{"_index":1653,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["center",{"_index":707,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["change",{"_index":2368,"title":{},"body":{"index.html":{}}}],["changed",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{},"components/ShowProfileComponent.html":{}}}],["changedata",{"_index":1974,"title":{},"body":{"injectables/ThreadService.html":{}}}],["changedata(data",{"_index":1986,"title":{},"body":{"injectables/ThreadService.html":{}}}],["changeddescription",{"_index":927,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["changeddescription.reset",{"_index":949,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["changedetector",{"_index":1176,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["changedetectorref",{"_index":1251,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["changeeditchannelstatus",{"_index":903,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["changeeditdescriptionstatus",{"_index":904,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["changes",{"_index":845,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"injectables/MutationObserverService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["channel",{"_index":17,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["channel'},{'name",{"_index":183,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["channel.component",{"_index":108,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/SidebarComponent.html":{}}}],["channel.component.html",{"_index":26,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.scss",{"_index":28,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts",{"_index":12,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"coverage.html":{}}}],["channel.component.ts:104",{"_index":247,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:112",{"_index":255,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:20",{"_index":291,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:21",{"_index":90,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:22",{"_index":97,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:23",{"_index":95,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:24",{"_index":93,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:25",{"_index":286,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:26",{"_index":287,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:27",{"_index":294,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:28",{"_index":48,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:29",{"_index":285,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:30",{"_index":91,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["channel.component.ts:31",{"_index":246,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:36",{"_index":71,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["channel.component.ts:41",{"_index":261,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:47",{"_index":56,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["channel.component.ts:59",{"_index":280,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:72",{"_index":77,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["channel.component.ts:74",{"_index":251,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:83",{"_index":267,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:96",{"_index":275,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.service",{"_index":1897,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/ThreadService.html":{}}}],["channel.title",{"_index":1851,"title":{},"body":{"components/SidebarComponent.html":{}}}],["channel.users.foreach((element",{"_index":1927,"title":{},"body":{"injectables/SidebarService.html":{}}}],["channel/add",{"_index":11,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/SidebarComponent.html":{},"coverage.html":{}}}],["channel/channel.component",{"_index":1279,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["channelcomponent",{"_index":189,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["channelcounter",{"_index":1905,"title":{},"body":{"injectables/SidebarService.html":{}}}],["channeldata",{"_index":106,"title":{"classes/ChannelData.html":{}},"body":{"components/AddNewChannelComponent.html":{},"classes/ChannelData.html":{},"coverage.html":{}}}],["channeldummy",{"_index":145,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["channeldummy.setdata(this.inputs.channelname",{"_index":146,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["channeldummy.tojson",{"_index":148,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["channelelement",{"_index":1177,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["channelid",{"_index":397,"title":{},"body":{"components/AddUserDialogComponent.html":{},"injectables/UserService.html":{}}}],["channelid.channelid",{"_index":2234,"title":{},"body":{"injectables/UserService.html":{}}}],["channelinfo",{"_index":94,"title":{"interfaces/ChannelInfo.html":{}},"body":{"components/AddNewChannelComponent.html":{},"interfaces/ChannelInfo.html":{},"coverage.html":{}}}],["channelmessagescomponent",{"_index":190,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["channelname",{"_index":92,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["channelname.reset",{"_index":941,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["channelnameexists",{"_index":31,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["channelnameexists:boolean",{"_index":935,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["channels",{"_index":150,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{}}}],["channelservice",{"_index":32,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"coverage.html":{}}}],["channelservice.channelmsgdata.creator",{"_index":964,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["channelservice.channelmsgdata.description",{"_index":963,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["channelservice.channelmsgdata.title",{"_index":960,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["channelservice.currentchannelusers",{"_index":455,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["channelusers",{"_index":1858,"title":{},"body":{"injectables/SidebarService.html":{}}}],["characterdata",{"_index":1412,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["check",{"_index":832,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"injectables/UserService.html":{},"index.html":{}}}],["checkandaddemoji",{"_index":982,"title":{},"body":{"injectables/EmojiService.html":{}}}],["checkandaddemoji(index",{"_index":1007,"title":{},"body":{"injectables/EmojiService.html":{}}}],["checkbox",{"_index":1555,"title":{},"body":{"components/RegisterComponent.html":{}}}],["checked",{"_index":1566,"title":{},"body":{"components/RegisterComponent.html":{}}}],["checked:hover",{"_index":1568,"title":{},"body":{"components/RegisterComponent.html":{}}}],["checkifuserexists",{"_index":2123,"title":{},"body":{"injectables/UserService.html":{}}}],["checkifuserexists(userid",{"_index":2141,"title":{},"body":{"injectables/UserService.html":{}}}],["checkmobilesmallscreen",{"_index":1771,"title":{},"body":{"components/SidebarComponent.html":{}}}],["checkregistereduser",{"_index":2124,"title":{},"body":{"injectables/UserService.html":{}}}],["checkregistereduser(email",{"_index":2143,"title":{},"body":{"injectables/UserService.html":{}}}],["checks",{"_index":262,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/MainsectionComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/ThreadService.html":{}}}],["checktitle",{"_index":124,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["checkuid",{"_index":320,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["checkupdateinput",{"_index":1665,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["child(4",{"_index":1554,"title":{},"body":{"components/RegisterComponent.html":{}}}],["childlist",{"_index":1410,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["children",{"_index":1381,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["choice",{"_index":2384,"title":{},"body":{"index.html":{}}}],["chooseavatar",{"_index":545,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["chooseavatar'},{'name",{"_index":193,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["chooseavatar.component.html",{"_index":549,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["chooseavatar.component.scss",{"_index":548,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["chooseavatarcomponent",{"_index":192,"title":{"components/ChooseavatarComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["class",{"_index":112,"title":{"classes/ChannelData.html":{},"classes/MessageData.html":{},"classes/UserData.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["classes",{"_index":518,"title":{},"body":{"classes/ChannelData.html":{},"classes/MessageData.html":{},"classes/UserData.html":{},"overview.html":{}}}],["clean",{"_index":1944,"title":{},"body":{"injectables/StateService.html":{}}}],["cleanup",{"_index":1234,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["clearactivestyle",{"_index":1772,"title":{},"body":{"components/SidebarComponent.html":{}}}],["clearfiledata",{"_index":1975,"title":{},"body":{"injectables/ThreadService.html":{}}}],["clears",{"_index":269,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["cli",{"_index":2356,"title":{},"body":{"index.html":{}}}],["click",{"_index":1702,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["clickedinside",{"_index":1436,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["closed",{"_index":1806,"title":{},"body":{"components/SidebarComponent.html":{}}}],["closedialog",{"_index":1666,"title":{},"body":{"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["closes",{"_index":1676,"title":{},"body":{"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["closesides",{"_index":1190,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["closing",{"_index":1215,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["code",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{},"components/ConfirmpasswordComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"index.html":{}}}],["collection",{"_index":377,"title":{},"body":{"components/AddUserDialogComponent.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["collection(this.firestore",{"_index":1920,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["color",{"_index":732,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["column",{"_index":755,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["command",{"_index":2385,"title":{},"body":{"index.html":{}}}],["commonmodule",{"_index":23,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["compareformcontrol",{"_index":806,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["compares",{"_index":816,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["complete",{"_index":1474,"title":{},"body":{"components/RegisterComponent.html":{}}}],["completed",{"_index":1462,"title":{},"body":{"components/RegisterComponent.html":{}}}],["component",{"_index":0,"title":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":182,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"overview.html":{}}}],["confirmnewpassword",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{},"components/ConfirmpasswordComponent.html":{}}}],["confirmnewpassword(code",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirmpassword",{"_index":799,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["confirmpassword'},{'name",{"_index":195,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["confirmpassword.component.html",{"_index":801,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["confirmpassword.component.scss",{"_index":802,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["confirmpasswordcomponent",{"_index":194,"title":{"components/ConfirmpasswordComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["confirmpasswordreset",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{},"components/ConfirmpasswordComponent.html":{}}}],["confirmpasswordreset(auth",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirms",{"_index":822,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["console.error(error",{"_index":136,"title":{},"body":{"components/AddNewChannelComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{}}}],["console.error(error.code",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(\"listener",{"_index":2072,"title":{},"body":{"injectables/ThreadService.html":{}}}],["console.log('hallo",{"_index":1326,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["console.log(addeduser.name",{"_index":381,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["console.log(error",{"_index":940,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["console.log(this.code",{"_index":870,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["console.log(this.messages",{"_index":2047,"title":{},"body":{"injectables/ThreadService.html":{}}}],["console.log(this.newchannelvalues.name",{"_index":943,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["console.log(this.newchannelvalues.newdescription",{"_index":948,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["console.log(this.selecteduser",{"_index":389,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["console.log(this.userservice.userinfo.email",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(user",{"_index":391,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["const",{"_index":123,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":43,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["constructor(_elementref",{"_index":1420,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["constructor(channelservice",{"_index":987,"title":{},"body":{"injectables/EmojiService.html":{}}}],["constructor(dialog",{"_index":44,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["constructor(dialogref",{"_index":2249,"title":{},"body":{"components/VerifyComponent.html":{}}}],["constructor(ngzone",{"_index":1612,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["constructor(obj",{"_index":522,"title":{},"body":{"classes/ChannelData.html":{},"classes/MessageData.html":{},"classes/UserData.html":{}}}],["constructor(private",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"injectables/EmojiService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["constructor(public",{"_index":113,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["constructor(router",{"_index":809,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/UserService.html":{}}}],["constructor(storageservice",{"_index":562,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["constructor(userservice",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructs",{"_index":1456,"title":{},"body":{"components/RegisterComponent.html":{}}}],["contain",{"_index":1563,"title":{},"body":{"components/RegisterComponent.html":{}}}],["container",{"_index":1089,"title":{},"body":{"components/HeaderComponent.html":{}}}],["contains",{"_index":317,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/HeaderComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["content",{"_index":742,"title":{},"body":{"components/ChooseavatarComponent.html":{},"injectables/MutationObserverService.html":{}}}],["continue",{"_index":1449,"title":{},"body":{"components/RegisterComponent.html":{}}}],["continues",{"_index":1459,"title":{},"body":{"components/RegisterComponent.html":{}}}],["control",{"_index":824,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["control.value",{"_index":890,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["controlname",{"_index":835,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["controls",{"_index":819,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/ShowProfileComponent.html":{}}}],["converts",{"_index":82,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["corner",{"_index":1122,"title":{},"body":{"components/HeaderComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["corresponding",{"_index":1466,"title":{},"body":{"components/RegisterComponent.html":{},"injectables/UserService.html":{}}}],["cover",{"_index":717,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["coverage",{"_index":2258,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["created",{"_index":2000,"title":{},"body":{"injectables/ThreadService.html":{}}}],["createnewchannel",{"_index":68,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["createnewchannel.reset",{"_index":137,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["creates",{"_index":78,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["createthreadmessage",{"_index":1976,"title":{},"body":{"injectables/ThreadService.html":{}}}],["createthreadmessage(obj",{"_index":1997,"title":{},"body":{"injectables/ThreadService.html":{}}}],["createuserinfo",{"_index":2121,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserprofile",{"_index":2125,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserwithemailandpassword",{"_index":615,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["createuserwithemailandpassword(auth",{"_index":649,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["creatorid",{"_index":306,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["css",{"_index":1241,"title":{},"body":{"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{}}}],["ctrl/ngx",{"_index":2344,"title":{},"body":{"dependencies.html":{}}}],["current",{"_index":916,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"components/MainsectionComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["currentchildcount",{"_index":1407,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["currentemoji",{"_index":1015,"title":{},"body":{"injectables/EmojiService.html":{}}}],["currentemojiindex",{"_index":1017,"title":{},"body":{"injectables/EmojiService.html":{}}}],["currently",{"_index":1374,"title":{},"body":{"injectables/MutationObserverService.html":{},"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["currentmessageindex",{"_index":991,"title":{},"body":{"injectables/EmojiService.html":{}}}],["currentuser",{"_index":2122,"title":{},"body":{"injectables/UserService.html":{}}}],["cursor",{"_index":729,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["da",{"_index":465,"title":{},"body":{"components/AppComponent.html":{},"miscellaneous/variables.html":{}}}],["dabubble",{"_index":666,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ImprintComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"index.html":{}}}],["data",{"_index":59,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["data.emoji",{"_index":2079,"title":{},"body":{"injectables/ThreadService.html":{}}}],["data.message",{"_index":2080,"title":{},"body":{"injectables/ThreadService.html":{}}}],["data.timestamp",{"_index":2077,"title":{},"body":{"injectables/ThreadService.html":{}}}],["database",{"_index":2170,"title":{},"body":{"injectables/UserService.html":{}}}],["dataset",{"_index":954,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"injectables/ThreadService.html":{}}}],["dataset.data()['channelid",{"_index":955,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["dataset.data()['timestamp",{"_index":2078,"title":{},"body":{"injectables/ThreadService.html":{}}}],["dataset.id",{"_index":958,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"injectables/ThreadService.html":{}}}],["datasubject",{"_index":1965,"title":{},"body":{"injectables/ThreadService.html":{}}}],["date.now",{"_index":1354,"title":{},"body":{"classes/MessageData.html":{}}}],["datei",{"_index":675,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["datenschutz",{"_index":679,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["datenschutzerklarung",{"_index":1551,"title":{},"body":{"components/RegisterComponent.html":{}}}],["datenschutzerklärungzu",{"_index":1550,"title":{},"body":{"components/RegisterComponent.html":{}}}],["decorators",{"_index":289,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{}}}],["default",{"_index":86,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":47,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["dein",{"_index":1539,"title":{},"body":{"components/RegisterComponent.html":{}}}],["deinem",{"_index":152,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/RegisterComponent.html":{}}}],["deinen",{"_index":667,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["deiner",{"_index":1537,"title":{},"body":{"components/RegisterComponent.html":{}}}],["delay",{"_index":555,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/MainsectionComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["delay(ms",{"_index":566,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["deletedoc",{"_index":931,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["deletedoc(doc(this.firestore",{"_index":956,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["dependencies",{"_index":2333,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependency",{"_index":1457,"title":{},"body":{"components/RegisterComponent.html":{}}}],["depending",{"_index":1684,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["der",{"_index":669,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["description",{"_index":67,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["desktop",{"_index":1079,"title":{},"body":{"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{}}}],["destroyed",{"_index":1235,"title":{},"body":{"components/MainsectionComponent.html":{},"injectables/StateService.html":{}}}],["determine",{"_index":1123,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["determines",{"_index":2105,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["dev",{"_index":2364,"title":{},"body":{"index.html":{}}}],["development",{"_index":2359,"title":{},"body":{"index.html":{}}}],["device",{"_index":1696,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["devices",{"_index":1939,"title":{},"body":{"injectables/StateService.html":{}}}],["devspace",{"_index":1148,"title":{},"body":{"components/HeaderComponent.html":{},"components/SidebarComponent.html":{}}}],["dflex($ai",{"_index":738,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["dflex($jc",{"_index":697,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["dialog",{"_index":34,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["dialog'},{'name",{"_index":185,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["dialog.component",{"_index":929,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["dialog.component.html",{"_index":353,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["dialog.component.scss",{"_index":354,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["dialog.component.ts",{"_index":352,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/UserMenuDialogComponent.html":{},"coverage.html":{}}}],["dialog.component.ts:18",{"_index":426,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["dialog.component.ts:19",{"_index":372,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["dialog.component.ts:20",{"_index":374,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["dialog.component.ts:21",{"_index":368,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["dialog.component.ts:22",{"_index":370,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["dialog.component.ts:23",{"_index":367,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["dialog.component.ts:24",{"_index":409,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["dialog.component.ts:25",{"_index":427,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["dialog.component.ts:26",{"_index":373,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["dialog.component.ts:27",{"_index":371,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["dialog.component.ts:28",{"_index":411,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["dialog.component.ts:29",{"_index":364,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["dialog.component.ts:32",{"_index":2097,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["dialog.component.ts:33",{"_index":417,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["dialog.component.ts:36",{"_index":908,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["dialog.component.ts:38",{"_index":421,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["dialog.component.ts:39",{"_index":362,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["dialog.component.ts:46",{"_index":919,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["dialog.component.ts:47",{"_index":422,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["dialog.component.ts:48",{"_index":2104,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["dialog.component.ts:56",{"_index":361,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["dialog.component.ts:58",{"_index":418,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["dialog.component.ts:59",{"_index":2096,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["dialog.component.ts:61",{"_index":359,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["dialog.component.ts:70",{"_index":360,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["dialog.component.ts:72",{"_index":914,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["dialog.component.ts:78",{"_index":366,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["dialog.component.ts:83",{"_index":925,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["dialog.component.ts:91",{"_index":917,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["dialog/add",{"_index":351,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/UserMenuDialogComponent.html":{},"coverage.html":{}}}],["dialog/edit",{"_index":899,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"coverage.html":{}}}],["dialog/user",{"_index":1114,"title":{},"body":{"components/HeaderComponent.html":{},"components/UserMenuDialogComponent.html":{},"coverage.html":{}}}],["dialogref",{"_index":46,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["dialogref.componentinstance.otheruser",{"_index":445,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["dialogref.componentinstance.profileeditable",{"_index":446,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["dialogrefadduser",{"_index":2095,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["die",{"_index":1529,"title":{},"body":{"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["dienen",{"_index":151,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["diesem",{"_index":1515,"title":{},"body":{"components/RegisterComponent.html":{}}}],["dieser",{"_index":166,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{}}}],["different",{"_index":1815,"title":{},"body":{"components/SidebarComponent.html":{}}}],["direct",{"_index":1793,"title":{},"body":{"components/SidebarComponent.html":{},"injectables/SidebarService.html":{}}}],["direction",{"_index":754,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["directive",{"_index":180,"title":{"directives/OutsideclickDirective.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{},"overview.html":{}}}],["directives",{"_index":225,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":2371,"title":{},"body":{"index.html":{}}}],["directmessages",{"_index":1930,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["directory",{"_index":2375,"title":{},"body":{"index.html":{}}}],["direktnachrichten",{"_index":1852,"title":{},"body":{"components/SidebarComponent.html":{}}}],["disconnect",{"_index":1366,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["disconnects",{"_index":1371,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["display",{"_index":1209,"title":{},"body":{"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{}}}],["displayheadlinemobile",{"_index":1191,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["displays",{"_index":573,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/HeaderComponent.html":{}}}],["dist",{"_index":2374,"title":{},"body":{"index.html":{}}}],["div",{"_index":414,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{}}}],["dm",{"_index":1794,"title":{},"body":{"components/SidebarComponent.html":{}}}],["dm.id",{"_index":1854,"title":{},"body":{"components/SidebarComponent.html":{}}}],["dm.name",{"_index":1856,"title":{},"body":{"components/SidebarComponent.html":{}}}],["dmuserid",{"_index":2233,"title":{},"body":{"injectables/UserService.html":{}}}],["doc",{"_index":378,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["doc(this.firestore",{"_index":1922,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["docref",{"_index":1921,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["docsnap",{"_index":1924,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["docsnap.data",{"_index":1926,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["docsnap.data()!['isloggedin",{"_index":2244,"title":{},"body":{"injectables/UserService.html":{}}}],["document",{"_index":1871,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["document.getelementbyid('messagecontainer')!.scrollto",{"_index":1138,"title":{},"body":{"components/HeaderComponent.html":{}}}],["document.getelementbyid('singlemessage",{"_index":1135,"title":{},"body":{"components/HeaderComponent.html":{}}}],["document.queryselector('input[type=\"file",{"_index":643,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["document:click",{"_index":1419,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["documentation",{"_index":2259,"title":{},"body":{"coverage.html":{}}}],["documentdata",{"_index":1894,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["dom",{"_index":6,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["domchanges",{"_index":1363,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["don't",{"_index":841,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["dots",{"_index":759,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["du",{"_index":457,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SidebarComponent.html":{}}}],["duration",{"_index":576,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{}}}],["dynamic",{"_index":2343,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":1167,"title":{},"body":{"components/ImprintComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{}}}],["e2e",{"_index":2382,"title":{},"body":{"index.html":{}}}],["e6d79",{"_index":2408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e6d79.appspot.com",{"_index":2412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e6d79.firebaseapp.com",{"_index":2416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e6e6e6",{"_index":733,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["each",{"_index":1817,"title":{},"body":{"components/SidebarComponent.html":{}}}],["early",{"_index":1392,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["ease",{"_index":634,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["edit",{"_index":197,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["editable",{"_index":2107,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["editchanneldialogcomponent",{"_index":196,"title":{"components/EditChannelDialogComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["editchanneldialogopenmobile",{"_index":1933,"title":{},"body":{"injectables/StateService.html":{}}}],["editchannelname",{"_index":900,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["editdescription",{"_index":901,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["edited",{"_index":913,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["editmessage",{"_index":968,"title":{},"body":{"injectables/EmojiService.html":{}}}],["editmessagethread",{"_index":969,"title":{},"body":{"injectables/EmojiService.html":{}}}],["editmode",{"_index":1658,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["editprofilepic",{"_index":1659,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["egatth4xds0ztubhnysr",{"_index":1923,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["eigenes",{"_index":672,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["ein",{"_index":1522,"title":{},"body":{"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["eine",{"_index":1545,"title":{},"body":{"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["einen",{"_index":174,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["eingeben",{"_index":1541,"title":{},"body":{"components/RegisterComponent.html":{},"components/VerifyComponent.html":{}}}],["element",{"_index":179,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["element's",{"_index":1380,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["element.id",{"_index":1737,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["element.index",{"_index":1146,"title":{},"body":{"components/HeaderComponent.html":{}}}],["element.nativeelement",{"_index":1390,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["element.nativeelement.children.length",{"_index":1403,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["element.nativeelement.scrollheight",{"_index":1401,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["element.nativeelement.scrolltop",{"_index":1400,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["element['id",{"_index":323,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["element['message",{"_index":1144,"title":{},"body":{"components/HeaderComponent.html":{}}}],["element['name",{"_index":316,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["element['profilepicture",{"_index":328,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["elementref",{"_index":423,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{}}}],["email",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{},"components/ImprintComponent.html":{},"classes/MessageData.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"injectables/UserService.html":{}}}],["emailexists",{"_index":1508,"title":{},"body":{"components/RegisterComponent.html":{},"injectables/UserService.html":{}}}],["emailquery",{"_index":2201,"title":{},"body":{"injectables/UserService.html":{}}}],["emailsnapshot",{"_index":2206,"title":{},"body":{"injectables/UserService.html":{}}}],["emailsnapshot.empty",{"_index":2210,"title":{},"body":{"injectables/UserService.html":{}}}],["emit",{"_index":1953,"title":{},"body":{"injectables/StateService.html":{}}}],["emitting",{"_index":2016,"title":{},"body":{"injectables/ThreadService.html":{}}}],["emoji",{"_index":1000,"title":{},"body":{"injectables/EmojiService.html":{},"classes/MessageData.html":{},"injectables/ThreadService.html":{},"dependencies.html":{}}}],["emojiservice",{"_index":966,"title":{"injectables/EmojiService.html":{}},"body":{"injectables/EmojiService.html":{},"coverage.html":{}}}],["emojiuserids.indexof(userid",{"_index":1048,"title":{},"body":{"injectables/EmojiService.html":{}}}],["emojiuserids.push(userid",{"_index":1050,"title":{},"body":{"injectables/EmojiService.html":{}}}],["emojiuserids.splice(userindex",{"_index":1049,"title":{},"body":{"injectables/EmojiService.html":{}}}],["end",{"_index":698,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{},"index.html":{}}}],["entwicklerteam",{"_index":344,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["environment.api_key",{"_index":2414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["erfolgreich",{"_index":681,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["erforderlich",{"_index":165,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["error",{"_index":135,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{}}}],["error(\"ein",{"_index":1511,"title":{},"body":{"components/RegisterComponent.html":{}}}],["error('titel",{"_index":131,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["error.code",{"_index":1591,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["error.message",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["errorcode",{"_index":1465,"title":{},"body":{"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["errormessage",{"_index":1443,"title":{},"body":{"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["erstellen",{"_index":149,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/RegisterComponent.html":{}}}],["erstellt",{"_index":682,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["event",{"_index":591,"title":{},"body":{"components/ChooseavatarComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"directives/OutsideclickDirective.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{}}}],["event.target",{"_index":1425,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["event['emoji']['native",{"_index":1039,"title":{},"body":{"injectables/EmojiService.html":{}}}],["eventemitter",{"_index":1423,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["events",{"_index":1616,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["example",{"_index":2165,"title":{},"body":{"injectables/UserService.html":{}}}],["execute",{"_index":1388,"title":{},"body":{"injectables/MutationObserverService.html":{},"index.html":{}}}],["executes",{"_index":1233,"title":{},"body":{"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{}}}],["executing",{"_index":1217,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["existiert",{"_index":171,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{}}}],["existing",{"_index":265,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["exists",{"_index":250,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/RegisterComponent.html":{},"injectables/UserService.html":{}}}],["export",{"_index":111,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["extra",{"_index":1781,"title":{},"body":{"components/SidebarComponent.html":{}}}],["false",{"_index":88,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{}}}],["falsy",{"_index":1391,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["family",{"_index":1570,"title":{},"body":{"components/RegisterComponent.html":{}}}],["fehler",{"_index":1524,"title":{},"body":{"components/RegisterComponent.html":{}}}],["ffnen",{"_index":1213,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["field",{"_index":270,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/UserService.html":{}}}],["fields",{"_index":81,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ConfirmpasswordComponent.html":{}}}],["fieldvalue",{"_index":1893,"title":{},"body":{"injectables/SidebarService.html":{}}}],["file",{"_index":8,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["filedata",{"_index":1966,"title":{},"body":{"injectables/ThreadService.html":{}}}],["fileinput",{"_index":642,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["fileinput.click",{"_index":644,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["filelist",{"_index":640,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["files",{"_index":1695,"title":{},"body":{"components/ShowProfileComponent.html":{},"index.html":{}}}],["filters",{"_index":281,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["finally",{"_index":827,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["firebase",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{},"components/RegisterComponent.html":{}}}],["firebase/auth",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{}}}],["firebaseappfactory",{"_index":300,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["firebaseerror",{"_index":1486,"title":{},"body":{"components/RegisterComponent.html":{}}}],["firestore",{"_index":356,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["first",{"_index":836,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"injectables/ThreadService.html":{},"index.html":{}}}],["firstfocus",{"_index":1444,"title":{},"body":{"components/RegisterComponent.html":{}}}],["fit",{"_index":716,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["flag",{"_index":910,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"injectables/MutationObserverService.html":{},"components/VerifyComponent.html":{}}}],["flex",{"_index":722,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/SidebarComponent.html":{}}}],["focus",{"_index":304,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/RegisterComponent.html":{}}}],["focuses",{"_index":248,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["focusonuserinput",{"_index":240,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["font",{"_index":690,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["form",{"_index":63,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/UserService.html":{}}}],["format",{"_index":84,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["formcontrol",{"_index":860,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/VerifyComponent.html":{}}}],["formcontrol(false",{"_index":1494,"title":{},"body":{"components/RegisterComponent.html":{}}}],["formcontrol(this.userservice.userinfo.email",{"_index":1725,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["formcontrol(this.userservice.userinfo.name",{"_index":1724,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["formgroup",{"_index":854,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["formgroup.get(controlname",{"_index":885,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["formgroup.get(matchingcontrolname",{"_index":887,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["formsmodule",{"_index":22,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["forogt",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{}}}],["foundemoji",{"_index":1040,"title":{},"body":{"injectables/EmojiService.html":{}}}],["function",{"_index":57,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"injectables/AuthService.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["further",{"_index":2389,"title":{},"body":{"index.html":{}}}],["gap",{"_index":739,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["geben",{"_index":1592,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["generate",{"_index":2370,"title":{},"body":{"index.html":{}}}],["generated",{"_index":2355,"title":{},"body":{"index.html":{}}}],["gesendet",{"_index":1600,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["getauth",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{},"components/UserMenuDialogComponent.html":{},"miscellaneous/variables.html":{}}}],["getauth().signout",{"_index":2113,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["getdmstatus",{"_index":404,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{}}}],["getdmstatus(index",{"_index":1785,"title":{},"body":{"components/SidebarComponent.html":{}}}],["getdmstatus(isloggedin",{"_index":1868,"title":{},"body":{"injectables/SidebarService.html":{}}}],["getdmstatus(userisloggedin",{"_index":410,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["getdoc",{"_index":1890,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["getdoc(doc(this.firestore",{"_index":2198,"title":{},"body":{"injectables/UserService.html":{}}}],["getdoc(docref",{"_index":1925,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["getdocs",{"_index":932,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["getdocs(namequery",{"_index":2209,"title":{},"body":{"injectables/UserService.html":{}}}],["getdocs(query(this.refchannels",{"_index":1918,"title":{},"body":{"injectables/SidebarService.html":{}}}],["getdocs(query(this.refthreadmessages",{"_index":2076,"title":{},"body":{"injectables/ThreadService.html":{}}}],["getdocs(query(this.userservice.refuserchannels",{"_index":952,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["geteditchanneldialogopenmobile",{"_index":1935,"title":{},"body":{"injectables/StateService.html":{}}}],["getfirebaseerrormessage",{"_index":1450,"title":{},"body":{"components/RegisterComponent.html":{}}}],["getfirebaseerrormessage(errorcode",{"_index":1463,"title":{},"body":{"components/RegisterComponent.html":{}}}],["getfirestore",{"_index":2420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getmenu",{"_index":241,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["getonlinestatusprofile",{"_index":2126,"title":{},"body":{"injectables/UserService.html":{}}}],["getonlinestatusprofile(id",{"_index":2146,"title":{},"body":{"injectables/UserService.html":{}}}],["getotheruserdata",{"_index":405,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["getotheruserdata(user",{"_index":416,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["gets",{"_index":2178,"title":{},"body":{"injectables/UserService.html":{}}}],["getstatustext",{"_index":1667,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["getstorage",{"_index":2422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getting",{"_index":2352,"title":{"index.html":{}},"body":{}}],["gettoggletext",{"_index":1192,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["getusersfromchannel",{"_index":242,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"injectables/SidebarService.html":{}}}],["getuserstatus",{"_index":1064,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{}}}],["getuserstatus(type",{"_index":1682,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["given",{"_index":812,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/UserService.html":{}}}],["go",{"_index":2392,"title":{},"body":{"index.html":{}}}],["goback",{"_index":1065,"title":{},"body":{"components/HeaderComponent.html":{}}}],["gotochannel",{"_index":1773,"title":{},"body":{"components/SidebarComponent.html":{}}}],["gotodirektmessage",{"_index":1774,"title":{},"body":{"components/SidebarComponent.html":{}}}],["gotodirektmessage(dm",{"_index":1791,"title":{},"body":{"components/SidebarComponent.html":{}}}],["gotoprivatemessage",{"_index":1775,"title":{},"body":{"components/SidebarComponent.html":{}}}],["green",{"_index":736,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["group:nth",{"_index":1553,"title":{},"body":{"components/RegisterComponent.html":{}}}],["gültige",{"_index":1546,"title":{},"body":{"components/RegisterComponent.html":{}}}],["h1",{"_index":781,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["h3",{"_index":689,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["handleclosemobile",{"_index":1782,"title":{},"body":{"components/SidebarComponent.html":{}}}],["handled",{"_index":1470,"title":{},"body":{"components/RegisterComponent.html":{}}}],["handleregistrationerror",{"_index":1451,"title":{},"body":{"components/RegisterComponent.html":{}}}],["handleregistrationerror(error",{"_index":1467,"title":{},"body":{"components/RegisterComponent.html":{}}}],["handles",{"_index":590,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"injectables/ThreadService.html":{}}}],["handleuserregistration",{"_index":1452,"title":{},"body":{"components/RegisterComponent.html":{}}}],["handleuserregistration(email",{"_index":1471,"title":{},"body":{"components/RegisterComponent.html":{}}}],["hanldeclosemobile",{"_index":1193,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["hast",{"_index":1538,"title":{},"body":{"components/RegisterComponent.html":{}}}],["hausnummer",{"_index":1162,"title":{},"body":{"components/ImprintComponent.html":{}}}],["header",{"_index":1057,"title":{},"body":{"components/HeaderComponent.html":{}}}],["header'},{'name",{"_index":199,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["header.component.html",{"_index":1058,"title":{},"body":{"components/HeaderComponent.html":{}}}],["header.component.scss",{"_index":1059,"title":{},"body":{"components/HeaderComponent.html":{}}}],["headercomponent",{"_index":198,"title":{"components/HeaderComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["headline",{"_index":1078,"title":{},"body":{"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{}}}],["headlinedesktop",{"_index":1060,"title":{},"body":{"components/HeaderComponent.html":{}}}],["headlinemobile",{"_index":1061,"title":{},"body":{"components/HeaderComponent.html":{}}}],["height",{"_index":714,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["help",{"_index":2390,"title":{},"body":{"index.html":{}}}],["hide",{"_index":1221,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["hides",{"_index":1080,"title":{},"body":{"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{}}}],["hidesidenav",{"_index":1194,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["hidethread",{"_index":1195,"title":{},"body":{"components/MainsectionComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/ThreadService.html":{}}}],["hidethreadsubject",{"_index":1967,"title":{},"body":{"injectables/ThreadService.html":{}}}],["hidethreadsubscription",{"_index":1178,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["hiding",{"_index":1206,"title":{},"body":{"components/MainsectionComponent.html":{},"injectables/ThreadService.html":{}}}],["hinzfügen",{"_index":399,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["hinzufügen",{"_index":340,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/SidebarComponent.html":{}}}],["hochladen",{"_index":676,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["home",{"_index":578,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["hostlistener",{"_index":1432,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["hostlistener('document:click",{"_index":1431,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["hostlisteners",{"_index":1418,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["hover",{"_index":731,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["hoverlogout",{"_index":2092,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["hoverprofile",{"_index":2093,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["html",{"_index":178,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["htmlelement",{"_index":1430,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["htmlinputelement",{"_index":588,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["http://localhost:4200",{"_index":2365,"title":{},"body":{"index.html":{}}}],["ich",{"_index":1548,"title":{},"body":{"components/RegisterComponent.html":{}}}],["icon",{"_index":400,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["id",{"_index":385,"title":{},"body":{"components/AddUserDialogComponent.html":{},"classes/MessageData.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":2149,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["identify",{"_index":2021,"title":{},"body":{"injectables/ThreadService.html":{}}}],["ids",{"_index":1883,"title":{},"body":{"injectables/SidebarService.html":{}}}],["ihnen",{"_index":1596,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["ihr",{"_index":1598,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["ihre",{"_index":1593,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["image",{"_index":1561,"title":{},"body":{"components/RegisterComponent.html":{}}}],["img",{"_index":327,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"injectables/UserService.html":{}}}],["implements",{"_index":543,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/SidebarComponent.html":{},"index.html":{}}}],["import",{"_index":98,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["important",{"_index":1572,"title":{},"body":{"components/RegisterComponent.html":{}}}],["imports",{"_index":20,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["impressum",{"_index":678,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ImprintComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["imprint",{"_index":1156,"title":{},"body":{"components/ImprintComponent.html":{}}}],["imprint'},{'name",{"_index":201,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["imprint.component.html",{"_index":1157,"title":{},"body":{"components/ImprintComponent.html":{}}}],["imprint.component.scss",{"_index":1158,"title":{},"body":{"components/ImprintComponent.html":{}}}],["imprintcomponent",{"_index":200,"title":{"components/ImprintComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["inaktiv",{"_index":1681,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["include",{"_index":696,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["includes",{"_index":2020,"title":{},"body":{"injectables/ThreadService.html":{}}}],["incoming",{"_index":2156,"title":{},"body":{"injectables/UserService.html":{}}}],["index",{"_index":29,"title":{"index.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"miscellaneous/variables.html":{}}}],["indicate",{"_index":911,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["indicates",{"_index":1385,"title":{},"body":{"injectables/MutationObserverService.html":{},"injectables/SidebarService.html":{}}}],["indicating",{"_index":1954,"title":{},"body":{"injectables/StateService.html":{},"injectables/UserService.html":{}}}],["indicator",{"_index":1074,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{}}}],["infinite",{"_index":764,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["information",{"_index":284,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{}}}],["inhalt",{"_index":164,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["initialchildcount",{"_index":1364,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["initialization",{"_index":586,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["initializeapp",{"_index":2406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initialized",{"_index":1226,"title":{},"body":{"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{}}}],["initializes",{"_index":581,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/MainsectionComponent.html":{}}}],["initialreferenceelementposition",{"_index":401,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["initmaps",{"_index":983,"title":{},"body":{"injectables/EmojiService.html":{}}}],["initmaps(source",{"_index":1009,"title":{},"body":{"injectables/EmojiService.html":{}}}],["inject",{"_index":100,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["inject(authservice",{"_index":850,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/VerifyComponent.html":{}}}],["inject(changedetectorref",{"_index":1252,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["inject(channelservice",{"_index":89,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{}}}],["inject(firestore",{"_index":369,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["inject(resizelistenerservice",{"_index":1261,"title":{},"body":{"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{}}}],["inject(sidebarservice",{"_index":96,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{}}}],["inject(stateservice",{"_index":430,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["inject(storageservice",{"_index":2037,"title":{},"body":{"injectables/ThreadService.html":{}}}],["inject(threadservice",{"_index":1270,"title":{},"body":{"components/MainsectionComponent.html":{},"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["inject(userservice",{"_index":295,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{}}}],["injectable",{"_index":469,"title":{"injectables/AuthService.html":{},"injectables/EmojiService.html":{},"injectables/MutationObserverService.html":{},"injectables/ResizeListenerService.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/EmojiService.html":{},"injectables/MutationObserverService.html":{},"injectables/ResizeListenerService.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmojiService.html":{},"injectables/MutationObserverService.html":{},"injectables/ResizeListenerService.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["input",{"_index":80,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["inputs",{"_index":35,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{}}}],["instance",{"_index":811,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["instanceof",{"_index":1520,"title":{},"body":{"components/RegisterComponent.html":{}}}],["interface",{"_index":538,"title":{"interfaces/ChannelInfo.html":{},"interfaces/UserInfo.html":{}},"body":{"interfaces/ChannelInfo.html":{},"interfaces/UserInfo.html":{},"coverage.html":{}}}],["interfaces",{"_index":539,"title":{},"body":{"interfaces/ChannelInfo.html":{},"interfaces/UserInfo.html":{},"overview.html":{}}}],["interfaces/userinfo",{"_index":2194,"title":{},"body":{"injectables/UserService.html":{}}}],["isactive",{"_index":1968,"title":{},"body":{"injectables/ThreadService.html":{}}}],["isdisabled",{"_index":803,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["iseditmessagespanclicked",{"_index":1434,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["isformsubmitted",{"_index":1445,"title":{},"body":{"components/RegisterComponent.html":{}}}],["isloggedin",{"_index":1788,"title":{},"body":{"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"injectables/UserService.html":{}}}],["issubscribed",{"_index":1969,"title":{},"body":{"injectables/ThreadService.html":{}}}],["ist",{"_index":167,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{}}}],["isthread",{"_index":1377,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["isthread=false",{"_index":1399,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["items",{"_index":1576,"title":{},"body":{"components/RegisterComponent.html":{}}}],["jc",{"_index":750,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["json",{"_index":83,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["justify",{"_index":788,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["karma",{"_index":2381,"title":{},"body":{"index.html":{}}}],["kevin.mueller@fenrirdev.de",{"_index":1590,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["key",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{},"components/ConfirmpasswordComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["key1",{"_index":879,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["key2",{"_index":880,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["keyform",{"_index":804,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/VerifyComponent.html":{}}}],["keyframes",{"_index":770,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["kommunikation",{"_index":155,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["kontakt",{"_index":1166,"title":{},"body":{"components/ImprintComponent.html":{}}}],["konto",{"_index":680,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["kurz",{"_index":169,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["können",{"_index":1599,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["land",{"_index":1165,"title":{},"body":{"components/ImprintComponent.html":{}}}],["landscape",{"_index":779,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["lastreply",{"_index":2056,"title":{},"body":{"injectables/ThreadService.html":{}}}],["leaks",{"_index":1948,"title":{},"body":{"injectables/StateService.html":{}}}],["leavechannel",{"_index":905,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["left",{"_index":438,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/MainsectionComponent.html":{},"injectables/SidebarService.html":{}}}],["legend",{"_index":177,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["leute",{"_index":339,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["lgscreen",{"_index":1603,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["list",{"_index":260,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"components/HeaderComponent.html":{}}}],["liste",{"_index":670,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["listener",{"_index":1989,"title":{},"body":{"injectables/ThreadService.html":{}}}],["listener.service",{"_index":1283,"title":{},"body":{"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{}}}],["listener.service.ts",{"_index":1602,"title":{},"body":{"injectables/ResizeListenerService.html":{},"coverage.html":{}}}],["listener.service.ts:12",{"_index":1630,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["listener.service.ts:14",{"_index":1634,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["listener.service.ts:16",{"_index":1632,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["listener.service.ts:18",{"_index":1635,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["listener.service.ts:20",{"_index":1614,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["listener.service.ts:34",{"_index":1617,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["listener.service.ts:44",{"_index":1629,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["listener.service.ts:57",{"_index":1623,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["listener.service.ts:66",{"_index":1626,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["listener.service.ts:9",{"_index":1633,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["listening",{"_index":2102,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["listens",{"_index":1615,"title":{},"body":{"injectables/ResizeListenerService.html":{},"injectables/UserService.html":{}}}],["literal",{"_index":288,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/SidebarComponent.html":{}}}],["loading",{"_index":574,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["loadingscreen",{"_index":556,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["log",{"_index":2118,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["logged",{"_index":1680,"title":{},"body":{"components/ShowProfileComponent.html":{},"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["loggedin",{"_index":439,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{}}}],["login",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{}}}],["login'},{'name",{"_index":203,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["login.component.scss",{"_index":684,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["logincomponent",{"_index":202,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["logout",{"_index":2094,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["logs",{"_index":2098,"title":{},"body":{"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{}}}],["mail",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{},"components/ImprintComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{}}}],["mail).then",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{}}}],["main",{"_index":685,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["mainsection",{"_index":1173,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["mainsection'},{'name",{"_index":205,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["mainsection.component",{"_index":1743,"title":{},"body":{"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{}}}],["mainsection.component.html",{"_index":1174,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["mainsection.component.scss",{"_index":1175,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["mainsection/channel/add",{"_index":2110,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["mainsection/mainsection.component",{"_index":1116,"title":{},"body":{"components/HeaderComponent.html":{}}}],["mainsection/sidebar/sidebar.component",{"_index":1117,"title":{},"body":{"components/HeaderComponent.html":{}}}],["mainsectioncomponent",{"_index":204,"title":{"components/MainsectionComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["make",{"_index":1227,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["manipulate",{"_index":922,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["margin",{"_index":699,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{}}}],["marketing",{"_index":161,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["mart",{"_index":2345,"title":{},"body":{"dependencies.html":{}}}],["matbuttonmodule",{"_index":232,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["match",{"_index":840,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["matching",{"_index":230,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["matchingcontrol",{"_index":886,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["matchingcontrol.errors",{"_index":888,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["matchingcontrol.errors['mustmatch",{"_index":889,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["matchingcontrol.seterrors",{"_index":892,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["matchingcontrol.seterrors(null",{"_index":893,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["matchingcontrol.value",{"_index":891,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["matchingcontrolname",{"_index":829,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["matdialog",{"_index":45,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["matdialogactions",{"_index":1110,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["matdialogclose",{"_index":1111,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["matdialogcontent",{"_index":1113,"title":{},"body":{"components/HeaderComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["matdialogmodule",{"_index":21,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["matdialogref",{"_index":1109,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["matdialogtitle",{"_index":1112,"title":{},"body":{"components/HeaderComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["matmenumodule",{"_index":231,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["matmenutrigger",{"_index":292,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["max",{"_index":741,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["mdscreen",{"_index":1604,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["means",{"_index":278,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["media",{"_index":777,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["memory",{"_index":1947,"title":{},"body":{"injectables/StateService.html":{}}}],["men",{"_index":1331,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["menu",{"_index":222,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["menuopened",{"_index":233,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["menus",{"_index":1816,"title":{},"body":{"components/SidebarComponent.html":{}}}],["menustates",{"_index":1766,"title":{},"body":{"components/SidebarComponent.html":{}}}],["message",{"_index":444,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"classes/MessageData.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/SidebarComponent.html":{},"injectables/ThreadService.html":{}}}],["message'},{'name",{"_index":207,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["message.message).substring(0,15",{"_index":1153,"title":{},"body":{"components/HeaderComponent.html":{}}}],["message.name",{"_index":1151,"title":{},"body":{"components/HeaderComponent.html":{}}}],["message.tolocalelowercase().indexof(this.searchmsg.msg.tolocalelowercase",{"_index":1145,"title":{},"body":{"components/HeaderComponent.html":{}}}],["messagecomponent",{"_index":206,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["messagedata",{"_index":1332,"title":{"classes/MessageData.html":{}},"body":{"classes/MessageData.html":{},"coverage.html":{}}}],["messageedit",{"_index":970,"title":{},"body":{"injectables/EmojiService.html":{}}}],["messageid",{"_index":992,"title":{},"body":{"injectables/EmojiService.html":{}}}],["messagelist",{"_index":1062,"title":{},"body":{"components/HeaderComponent.html":{}}}],["messagelist.length",{"_index":1149,"title":{},"body":{"components/HeaderComponent.html":{}}}],["messages",{"_index":1029,"title":{},"body":{"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{}}}],["messages'},{'name",{"_index":191,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["messages.component.ts",{"_index":2281,"title":{},"body":{"coverage.html":{}}}],["messages.map",{"_index":1033,"title":{},"body":{"injectables/EmojiService.html":{}}}],["messages/channel",{"_index":2280,"title":{},"body":{"coverage.html":{}}}],["messages/message/message.component.ts",{"_index":2284,"title":{},"body":{"coverage.html":{}}}],["messages[currentmessageindex].emoji[currentemojiindex].count",{"_index":1046,"title":{},"body":{"injectables/EmojiService.html":{}}}],["messages[index].edited",{"_index":1054,"title":{},"body":{"injectables/EmojiService.html":{}}}],["messages[index].message",{"_index":1053,"title":{},"body":{"injectables/EmojiService.html":{}}}],["messagestimestamp",{"_index":1970,"title":{},"body":{"injectables/ThreadService.html":{}}}],["messagingsenderid",{"_index":2417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":13,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["method",{"_index":254,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/HeaderComponent.html":{},"injectables/MutationObserverService.html":{},"components/SidebarComponent.html":{},"injectables/ThreadService.html":{}}}],["methods",{"_index":38,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["milliseconds",{"_index":571,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/MainsectionComponent.html":{}}}],["min",{"_index":398,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["mindestens",{"_index":1542,"title":{},"body":{"components/RegisterComponent.html":{}}}],["miscellaneous",{"_index":2398,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["mit",{"_index":1513,"title":{},"body":{"components/RegisterComponent.html":{}}}],["mitglieder",{"_index":342,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{}}}],["mobile",{"_index":1081,"title":{},"body":{"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{}}}],["models/userdata.class",{"_index":1896,"title":{},"body":{"injectables/SidebarService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{}}}],["modules",{"_index":2394,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":2391,"title":{},"body":{"index.html":{}}}],["mouseevent",{"_index":1428,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["moz",{"_index":1559,"title":{},"body":{"components/RegisterComponent.html":{}}}],["ms",{"_index":570,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["msg",{"_index":1103,"title":{},"body":{"components/HeaderComponent.html":{}}}],["msgelement",{"_index":1134,"title":{},"body":{"components/HeaderComponent.html":{}}}],["msgelement!.offsettop",{"_index":1137,"title":{},"body":{"components/HeaderComponent.html":{}}}],["msgid",{"_index":1334,"title":{},"body":{"classes/MessageData.html":{}}}],["mustmatch",{"_index":807,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["mustmatch(controlname",{"_index":828,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["mutation",{"_index":1372,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["mutationobserver",{"_index":1365,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["mutationobserver((mutations",{"_index":1405,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["mutationobserverservice",{"_index":1361,"title":{"injectables/MutationObserverService.html":{}},"body":{"injectables/MutationObserverService.html":{},"coverage.html":{}}}],["mutations.foreach(mutation",{"_index":1406,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["nachname",{"_index":1160,"title":{},"body":{"components/ImprintComponent.html":{},"components/RegisterComponent.html":{}}}],["nachricht",{"_index":1152,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{}}}],["nachrichten",{"_index":1150,"title":{},"body":{"components/HeaderComponent.html":{}}}],["name",{"_index":51,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"index.html":{}}}],["name.tolocalelowercase().indexof(this.adduser.name.tolocalelowercase",{"_index":384,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["name.tolocalelowercase().indexof(this.inputs.specificuser.tolocalelowercase",{"_index":318,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["named",{"_index":272,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["nameexists",{"_index":1509,"title":{},"body":{"components/RegisterComponent.html":{},"injectables/UserService.html":{}}}],["nameinput",{"_index":1446,"title":{},"body":{"components/RegisterComponent.html":{}}}],["namen",{"_index":1516,"title":{},"body":{"components/RegisterComponent.html":{}}}],["namequery",{"_index":2204,"title":{},"body":{"injectables/UserService.html":{}}}],["namesnapshot",{"_index":2207,"title":{},"body":{"injectables/UserService.html":{}}}],["namesnapshot.empty",{"_index":2211,"title":{},"body":{"injectables/UserService.html":{}}}],["nativeelement",{"_index":303,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["navigate",{"_index":1795,"title":{},"body":{"components/SidebarComponent.html":{},"index.html":{}}}],["navigates",{"_index":577,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{},"components/SidebarComponent.html":{}}}],["navigation",{"_index":814,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{}}}],["ndern",{"_index":896,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["necessary",{"_index":1231,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["need",{"_index":2386,"title":{},"body":{"index.html":{}}}],["neues",{"_index":1540,"title":{},"body":{"components/RegisterComponent.html":{}}}],["new",{"_index":10,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"coverage.html":{},"index.html":{}}}],["newchannel",{"_index":36,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["newchannelvalues",{"_index":902,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["newdescription",{"_index":915,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["newmessage",{"_index":1776,"title":{},"body":{"components/SidebarComponent.html":{}}}],["newprofilepicture",{"_index":1668,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["newuseravatar",{"_index":2127,"title":{},"body":{"injectables/UserService.html":{}}}],["newuseravatar(url",{"_index":2150,"title":{},"body":{"injectables/UserService.html":{}}}],["ng",{"_index":2362,"title":{},"body":{"index.html":{}}}],["ngafterviewinit",{"_index":1066,"title":{},"body":{"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{}}}],["ngform",{"_index":55,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"injectables/UserService.html":{}}}],["ngform.value",{"_index":2227,"title":{},"body":{"injectables/UserService.html":{}}}],["ngondestroy",{"_index":1196,"title":{},"body":{"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{}}}],["ngoninit",{"_index":557,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{}}}],["ngzone",{"_index":1613,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["none",{"_index":1133,"title":{},"body":{"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/SidebarComponent.html":{}}}],["null",{"_index":839,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/UserService.html":{}}}],["number",{"_index":437,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"components/SidebarComponent.html":{}}}],["obj",{"_index":125,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"classes/ChannelData.html":{},"components/EditChannelDialogComponent.html":{},"classes/MessageData.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"injectables/UserService.html":{}}}],["obj.collection",{"_index":532,"title":{},"body":{"classes/ChannelData.html":{}}}],["obj.description",{"_index":534,"title":{},"body":{"classes/ChannelData.html":{}}}],["obj.displayname",{"_index":2240,"title":{},"body":{"injectables/UserService.html":{}}}],["obj.email",{"_index":1356,"title":{},"body":{"classes/MessageData.html":{},"classes/UserData.html":{},"injectables/UserService.html":{}}}],["obj.emoji",{"_index":1358,"title":{},"body":{"classes/MessageData.html":{}}}],["obj.id",{"_index":386,"title":{},"body":{"components/AddUserDialogComponent.html":{},"classes/MessageData.html":{},"classes/UserData.html":{}}}],["obj.message",{"_index":1352,"title":{},"body":{"classes/MessageData.html":{}}}],["obj.msgid",{"_index":1360,"title":{},"body":{"classes/MessageData.html":{}}}],["obj.name",{"_index":1348,"title":{},"body":{"classes/MessageData.html":{},"classes/UserData.html":{},"injectables/UserService.html":{}}}],["obj.photourl",{"_index":2242,"title":{},"body":{"injectables/UserService.html":{}}}],["obj.profilepicture",{"_index":1350,"title":{},"body":{"classes/MessageData.html":{},"classes/UserData.html":{}}}],["obj.timestamp",{"_index":2057,"title":{},"body":{"injectables/ThreadService.html":{}}}],["obj.title",{"_index":127,"title":{},"body":{"components/AddNewChannelComponent.html":{},"classes/ChannelData.html":{},"components/EditChannelDialogComponent.html":{}}}],["obj.uid",{"_index":322,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"injectables/UserService.html":{}}}],["obj.users",{"_index":537,"title":{},"body":{"classes/ChannelData.html":{}}}],["object",{"_index":79,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/UserService.html":{}}}],["objectdata",{"_index":2179,"title":{},"body":{"injectables/UserService.html":{}}}],["observable",{"_index":1395,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["observe",{"_index":1367,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["observe(element",{"_index":1376,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["observed",{"_index":1387,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["observer",{"_index":1373,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["observes",{"_index":1379,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["oder",{"_index":170,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["offline",{"_index":415,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{}}}],["onclick",{"_index":1415,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["onclick(event",{"_index":1427,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["ondestroy",{"_index":1172,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["ongoing",{"_index":1996,"title":{},"body":{"injectables/ThreadService.html":{}}}],["onimageselected",{"_index":1669,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["onimageselected(input",{"_index":1689,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["oninit",{"_index":544,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{}}}],["oninput",{"_index":1453,"title":{},"body":{"components/RegisterComponent.html":{}}}],["online",{"_index":413,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["onresize",{"_index":1197,"title":{},"body":{"components/MainsectionComponent.html":{},"injectables/ResizeListenerService.html":{}}}],["onsnapshot",{"_index":1892,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["onsnapshot(doc(this.refuserprofile",{"_index":2212,"title":{},"body":{"injectables/UserService.html":{}}}],["onsnapshot(query(this.refchannels",{"_index":1898,"title":{},"body":{"injectables/SidebarService.html":{}}}],["onsnapshot(query(this.refthreadmessages",{"_index":2043,"title":{},"body":{"injectables/ThreadService.html":{}}}],["onsnapshot(query(this.refuserchannels",{"_index":2218,"title":{},"body":{"injectables/UserService.html":{}}}],["onsnapshot(query(this.refuserdirectmsgs",{"_index":1909,"title":{},"body":{"injectables/SidebarService.html":{}}}],["onsnapshot(query(this.refuserprofile",{"_index":2222,"title":{},"body":{"injectables/UserService.html":{}}}],["onsnapshot(query(this.userservice.refuserchannels",{"_index":1904,"title":{},"body":{"injectables/SidebarService.html":{}}}],["onsnapshot(query(this.userservice.refuserprofile",{"_index":1913,"title":{},"body":{"injectables/SidebarService.html":{}}}],["onsubmit",{"_index":40,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{}}}],["onsubmit(createnewchannel",{"_index":54,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["oobcode",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["opacity",{"_index":627,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["open",{"_index":604,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["opendialog",{"_index":41,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["opendialogadduser",{"_index":406,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"injectables/StateService.html":{}}}],["opendialoguserinfo",{"_index":407,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["opened",{"_index":1955,"title":{},"body":{"injectables/StateService.html":{}}}],["openeditmessagetoggle",{"_index":971,"title":{},"body":{"injectables/EmojiService.html":{}}}],["openeditmessagetogglethread",{"_index":972,"title":{},"body":{"injectables/EmojiService.html":{}}}],["openmenu",{"_index":253,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/HeaderComponent.html":{}}}],["opens",{"_index":72,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["operation",{"_index":1239,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["optional",{"_index":53,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["order",{"_index":1943,"title":{},"body":{"injectables/StateService.html":{}}}],["orientation",{"_index":778,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["originmessage",{"_index":1971,"title":{},"body":{"injectables/ThreadService.html":{}}}],["otheruser",{"_index":1660,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["otheruserid",{"_index":1661,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["otheruserinfo",{"_index":1662,"title":{},"body":{"components/ShowProfileComponent.html":{},"injectables/UserService.html":{}}}],["otherwise",{"_index":264,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/MainsectionComponent.html":{}}}],["out",{"_index":607,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"index.html":{}}}],["output",{"_index":1433,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["outputs",{"_index":1416,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["outsideclick",{"_index":1417,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["outsideclickdirective",{"_index":226,"title":{"directives/OutsideclickDirective.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["over",{"_index":420,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/ShowProfileComponent.html":{}}}],["overlay",{"_index":1249,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["overlayelement",{"_index":1179,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["overview",{"_index":2393,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["package",{"_index":2332,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["padding",{"_index":686,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["page",{"_index":579,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ResetpasswordComponent.html":{},"index.html":{}}}],["panelclass",{"_index":116,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["param",{"_index":120,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{}}}],["parameter",{"_index":69,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"injectables/MutationObserverService.html":{},"components/ShowProfileComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["parameters",{"_index":49,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["params",{"_index":805,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["passed",{"_index":1993,"title":{},"body":{"injectables/ThreadService.html":{}}}],["password",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{},"components/ConfirmpasswordComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["passwort",{"_index":894,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{},"components/VerifyComponent.html":{}}}],["path",{"_index":2182,"title":{},"body":{"injectables/UserService.html":{}}}],["picture",{"_index":1688,"title":{},"body":{"components/ShowProfileComponent.html":{},"injectables/UserService.html":{}}}],["picturepath",{"_index":2184,"title":{},"body":{"injectables/UserService.html":{}}}],["platform",{"_index":2383,"title":{},"body":{"index.html":{}}}],["pointer",{"_index":730,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["populates",{"_index":283,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["popup",{"_index":847,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["popupdisplay",{"_index":808,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["popupstate",{"_index":551,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["position",{"_index":718,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{}}}],["postleitzahl",{"_index":1163,"title":{},"body":{"components/ImprintComponent.html":{}}}],["preparedatanewuser",{"_index":2128,"title":{},"body":{"injectables/UserService.html":{}}}],["preparedatanewuser(obj",{"_index":2154,"title":{},"body":{"injectables/UserService.html":{}}}],["preparedatanewusergoogle",{"_index":2129,"title":{},"body":{"injectables/UserService.html":{}}}],["preparedatanewusergoogle(obj",{"_index":2157,"title":{},"body":{"injectables/UserService.html":{}}}],["preparenewchanneldata",{"_index":42,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["prepares",{"_index":58,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["present",{"_index":1999,"title":{},"body":{"injectables/ThreadService.html":{}}}],["prevent",{"_index":1946,"title":{},"body":{"injectables/StateService.html":{}}}],["privacycheck",{"_index":1493,"title":{},"body":{"components/RegisterComponent.html":{}}}],["privacypolicy'},{'name",{"_index":209,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["privacypolicycomponent",{"_index":208,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["private",{"_index":114,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ChooseavatarComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{}}}],["process",{"_index":1461,"title":{},"body":{"components/RegisterComponent.html":{}}}],["profil",{"_index":1754,"title":{},"body":{"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["profile",{"_index":443,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{}}}],["profile'},{'name",{"_index":216,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["profile.component",{"_index":435,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["profile.component.html",{"_index":1656,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.scss",{"_index":1657,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts",{"_index":1655,"title":{},"body":{"components/ShowProfileComponent.html":{},"coverage.html":{}}}],["profile.component.ts:105",{"_index":1683,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:124",{"_index":1678,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:137",{"_index":1673,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:143",{"_index":1699,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:163",{"_index":1697,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:180",{"_index":1700,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:187",{"_index":1675,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:27",{"_index":1716,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:28",{"_index":1718,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:29",{"_index":1705,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:30",{"_index":1715,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:31",{"_index":1710,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:32",{"_index":1714,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:33",{"_index":1704,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:34",{"_index":1717,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:35",{"_index":1711,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:36",{"_index":1713,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:37",{"_index":1707,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:38",{"_index":1708,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:39",{"_index":1712,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:40",{"_index":1672,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:44",{"_index":1706,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:45",{"_index":1703,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:62",{"_index":1698,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:70",{"_index":1701,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:82",{"_index":1690,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:94",{"_index":1685,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile/show",{"_index":434,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{},"coverage.html":{}}}],["profileeditable",{"_index":1663,"title":{},"body":{"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["profilepicture",{"_index":1335,"title":{},"body":{"classes/MessageData.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"injectables/UserService.html":{}}}],["project",{"_index":2354,"title":{},"body":{"index.html":{}}}],["projectid",{"_index":2407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise",{"_index":568,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{},"injectables/UserService.html":{}}}],["promise(resolve",{"_index":659,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["promise.all([getdocs(emailquery",{"_index":2208,"title":{},"body":{"injectables/UserService.html":{}}}],["properties",{"_index":30,"title":{"properties.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"properties.html":{}}}],["property",{"_index":600,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{}}}],["provideanimations",{"_index":2404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provideauth",{"_index":2423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":601,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["providedin",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmojiService.html":{},"injectables/MutationObserverService.html":{},"injectables/ResizeListenerService.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["providefirebaseapp",{"_index":2405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providefirestore",{"_index":2419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providerouter(routes",{"_index":2402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":2401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providestorage",{"_index":2421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prvoided",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{}}}],["public",{"_index":33,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"classes/ChannelData.html":{},"components/HeaderComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["purple1",{"_index":746,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["pushes",{"_index":273,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"injectables/SidebarService.html":{}}}],["pushtoselection",{"_index":243,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["pushtoselection(user",{"_index":266,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["px",{"_index":1637,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["query",{"_index":933,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["query(collection(this.firestore",{"_index":2202,"title":{},"body":{"injectables/UserService.html":{}}}],["querysnapshot",{"_index":951,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["querysnapshot.foreach",{"_index":1906,"title":{},"body":{"injectables/SidebarService.html":{}}}],["querysnapshot.foreach((doc",{"_index":2224,"title":{},"body":{"injectables/UserService.html":{}}}],["querysnapshot.foreach((userdm",{"_index":1911,"title":{},"body":{"injectables/SidebarService.html":{}}}],["querysnapshot.foreach(async",{"_index":953,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"injectables/ThreadService.html":{}}}],["querysnapshot.foreach(channel",{"_index":1900,"title":{},"body":{"injectables/SidebarService.html":{}}}],["querysnapshot.foreach(element",{"_index":2220,"title":{},"body":{"injectables/UserService.html":{}}}],["radius",{"_index":118,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"components/HeaderComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["reactiveformsmodule",{"_index":800,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/VerifyComponent.html":{}}}],["read",{"_index":425,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{}}}],["rearranges",{"_index":1880,"title":{},"body":{"injectables/SidebarService.html":{}}}],["received",{"_index":1469,"title":{},"body":{"components/RegisterComponent.html":{}}}],["refchannels",{"_index":1860,"title":{},"body":{"injectables/SidebarService.html":{}}}],["refcontainerposition",{"_index":408,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["reference",{"_index":1383,"title":{},"body":{"injectables/MutationObserverService.html":{},"injectables/SidebarService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["referenced",{"_index":2164,"title":{},"body":{"injectables/UserService.html":{}}}],["referenceelement",{"_index":449,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["referenceelement.getboundingclientrect().right",{"_index":453,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["referenceelement.getboundingclientrect().top",{"_index":452,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["reffile",{"_index":558,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["reffile(input",{"_index":587,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["refthreadmessages",{"_index":1977,"title":{},"body":{"injectables/ThreadService.html":{}}}],["refupdatefilepath",{"_index":1978,"title":{},"body":{"injectables/ThreadService.html":{}}}],["refupdatefilepath(id",{"_index":2003,"title":{},"body":{"injectables/ThreadService.html":{}}}],["refupdatethread",{"_index":1979,"title":{},"body":{"injectables/ThreadService.html":{}}}],["refuserchannels",{"_index":2130,"title":{},"body":{"injectables/UserService.html":{}}}],["refuserdirectmsgs",{"_index":1861,"title":{},"body":{"injectables/SidebarService.html":{}}}],["refuserprofile",{"_index":2131,"title":{},"body":{"injectables/UserService.html":{}}}],["register",{"_index":1440,"title":{},"body":{"components/RegisterComponent.html":{},"injectables/ResizeListenerService.html":{},"injectables/UserService.html":{}}}],["register'},{'name",{"_index":211,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["register.component.html",{"_index":1442,"title":{},"body":{"components/RegisterComponent.html":{}}}],["register.component.scss",{"_index":1441,"title":{},"body":{"components/RegisterComponent.html":{}}}],["register/register.component",{"_index":616,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["registercomponent",{"_index":210,"title":{"components/RegisterComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["registered",{"_index":1620,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["registerform",{"_index":1447,"title":{},"body":{"components/RegisterComponent.html":{}}}],["registerresizecallback",{"_index":1609,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["registerresizecallback(callback",{"_index":1622,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["registers",{"_index":595,"title":{},"body":{"components/ChooseavatarComponent.html":{},"injectables/StateService.html":{}}}],["registeruser",{"_index":559,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["registration",{"_index":1460,"title":{},"body":{"components/RegisterComponent.html":{}}}],["registrierung",{"_index":1535,"title":{},"body":{"components/RegisterComponent.html":{}}}],["related",{"_index":1798,"title":{},"body":{"components/SidebarComponent.html":{},"injectables/ThreadService.html":{}}}],["relative",{"_index":760,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["reload",{"_index":2367,"title":{},"body":{"index.html":{}}}],["removechanneluser",{"_index":1862,"title":{},"body":{"injectables/SidebarService.html":{}}}],["removes",{"_index":276,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["removeuserfromselection",{"_index":244,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["removeuserfromselection(user",{"_index":274,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["repeat",{"_index":1564,"title":{},"body":{"components/RegisterComponent.html":{}}}],["repeatedkey",{"_index":818,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["repliescount",{"_index":2054,"title":{},"body":{"injectables/ThreadService.html":{}}}],["represent",{"_index":1691,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["representing",{"_index":1814,"title":{},"body":{"components/SidebarComponent.html":{}}}],["represents",{"_index":1092,"title":{},"body":{"components/HeaderComponent.html":{},"components/SidebarComponent.html":{},"injectables/UserService.html":{}}}],["reset",{"_index":928,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["resetpassword",{"_index":1579,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["resetpassword'},{'name",{"_index":213,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["resetpassword.component.html",{"_index":1580,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["resetpassword.component.scss",{"_index":1581,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["resetpasswordcomponent",{"_index":212,"title":{"components/ResetpasswordComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["resets",{"_index":62,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/SidebarComponent.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{}}}],["resize",{"_index":1238,"title":{},"body":{"components/MainsectionComponent.html":{},"injectables/ResizeListenerService.html":{},"injectables/StateService.html":{}}}],["resizecallbacks",{"_index":1605,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["resizelistenerservice",{"_index":1180,"title":{"injectables/ResizeListenerService.html":{}},"body":{"components/MainsectionComponent.html":{},"injectables/ResizeListenerService.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{},"coverage.html":{}}}],["resolves",{"_index":569,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{},"injectables/UserService.html":{}}}],["rest",{"_index":1389,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["restart",{"_index":1991,"title":{},"body":{"injectables/ThreadService.html":{}}}],["restartlistener",{"_index":1980,"title":{},"body":{"injectables/ThreadService.html":{}}}],["restartlistener(data",{"_index":2006,"title":{},"body":{"injectables/ThreadService.html":{}}}],["restarts",{"_index":1988,"title":{},"body":{"injectables/ThreadService.html":{}}}],["results",{"_index":229,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":2172,"title":{},"body":{"injectables/UserService.html":{}}}],["retrieveallusers",{"_index":2132,"title":{},"body":{"injectables/UserService.html":{}}}],["retrievechannels",{"_index":1863,"title":{},"body":{"injectables/SidebarService.html":{}}}],["retrievecurrentchannels",{"_index":1864,"title":{},"body":{"injectables/SidebarService.html":{}}}],["retrievecurrentdirectmsgs",{"_index":1865,"title":{},"body":{"injectables/SidebarService.html":{}}}],["retrieved",{"_index":826,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["retrievedmuserdata",{"_index":1866,"title":{},"body":{"injectables/SidebarService.html":{}}}],["retrieveotheruserprofile",{"_index":2133,"title":{},"body":{"injectables/UserService.html":{}}}],["retrieveotheruserprofile(id",{"_index":2167,"title":{},"body":{"injectables/UserService.html":{}}}],["retrieves",{"_index":257,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/UserService.html":{}}}],["retrieveuserchannels",{"_index":2134,"title":{},"body":{"injectables/UserService.html":{}}}],["retrieveuserprofile",{"_index":2135,"title":{},"body":{"injectables/UserService.html":{}}}],["retrieving",{"_index":823,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["return",{"_index":139,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"classes/ChannelData.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["returned",{"_index":1124,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["returning",{"_index":2162,"title":{},"body":{"injectables/UserService.html":{}}}],["returns",{"_index":70,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["right",{"_index":1121,"title":{},"body":{"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["root",{"_index":459,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ConfirmpasswordComponent.html":{},"injectables/EmojiService.html":{},"injectables/MutationObserverService.html":{},"injectables/ResizeListenerService.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["root'},{'name",{"_index":188,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["rotate",{"_index":630,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/MainsectionComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["rotate(180deg",{"_index":865,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["rotateindicator",{"_index":1198,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["rotates",{"_index":1230,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["rotatetoggle",{"_index":1181,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["route",{"_index":849,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["router",{"_index":564,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/UserService.html":{}}}],["routerlink",{"_index":546,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ImprintComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["routeroutlet",{"_index":460,"title":{},"body":{"components/AppComponent.html":{}}}],["row",{"_index":1556,"title":{},"body":{"components/RegisterComponent.html":{}}}],["run",{"_index":2361,"title":{},"body":{"index.html":{}}}],["running",{"_index":2376,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1284,"title":{},"body":{"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"dependencies.html":{}}}],["same",{"_index":834,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/RegisterComponent.html":{}}}],["sans",{"_index":1571,"title":{},"body":{"components/RegisterComponent.html":{}}}],["saveeditchannelstatus",{"_index":906,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["saveeditchannelstatus(channelname",{"_index":918,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["saveeditdescriptionstatus",{"_index":907,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["saveeditdescriptionstatus(changeddescription",{"_index":924,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["scaffolding",{"_index":2369,"title":{},"body":{"index.html":{}}}],["scale",{"_index":734,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["scale(0.8",{"_index":774,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["scale(1",{"_index":771,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["scale(1.1",{"_index":773,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["scale(1.2",{"_index":776,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["scaleanimationblub",{"_index":769,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["scaleanimationdots",{"_index":765,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["scaleanimationimg",{"_index":762,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["schließen",{"_index":1212,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["schon",{"_index":132,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["screen",{"_index":575,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"injectables/ResizeListenerService.html":{},"components/SidebarComponent.html":{}}}],["scroll",{"_index":1091,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/MutationObserverService.html":{}}}],["scrolls",{"_index":1088,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/MutationObserverService.html":{}}}],["scrolltomessage",{"_index":1067,"title":{},"body":{"components/HeaderComponent.html":{}}}],["scrolltomessage(index",{"_index":1086,"title":{},"body":{"components/HeaderComponent.html":{}}}],["search",{"_index":1094,"title":{},"body":{"components/HeaderComponent.html":{}}}],["searchmessage",{"_index":1068,"title":{},"body":{"components/HeaderComponent.html":{}}}],["searchmsg",{"_index":1063,"title":{},"body":{"components/HeaderComponent.html":{}}}],["searchuser",{"_index":245,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["second",{"_index":837,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/RegisterComponent.html":{}}}],["section",{"_index":1799,"title":{},"body":{"components/SidebarComponent.html":{}}}],["sein",{"_index":160,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["select",{"_index":1694,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["selectavatar",{"_index":560,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["selectavatar(avatar",{"_index":596,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["selected",{"_index":263,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["selectedavatar",{"_index":552,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["selectedemojis",{"_index":973,"title":{},"body":{"injectables/EmojiService.html":{}}}],["selecteduser",{"_index":234,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["selection",{"_index":593,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["selector",{"_index":14,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["selects",{"_index":598,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["sendemail",{"_index":1582,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["sendemailverification",{"_index":614,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["sendemailverification(auth.currentuser",{"_index":657,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["senden",{"_index":1595,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["sendmessage",{"_index":1670,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["sendpasswordresetemail",{"_index":1587,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["sendpasswordresetemail(auth",{"_index":1589,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["sends",{"_index":1585,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["serve",{"_index":2363,"title":{},"body":{"index.html":{}}}],["server",{"_index":2360,"title":{},"body":{"index.html":{}}}],["service",{"_index":61,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/RegisterComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{}}}],["service.service",{"_index":432,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["service.service.ts",{"_index":1932,"title":{},"body":{"injectables/StateService.html":{},"coverage.html":{}}}],["service.service.ts:10",{"_index":1959,"title":{},"body":{"injectables/StateService.html":{}}}],["service.service.ts:11",{"_index":1957,"title":{},"body":{"injectables/StateService.html":{}}}],["service.service.ts:12",{"_index":1938,"title":{},"body":{"injectables/StateService.html":{}}}],["service.service.ts:25",{"_index":1950,"title":{},"body":{"injectables/StateService.html":{}}}],["service.service.ts:33",{"_index":1940,"title":{},"body":{"injectables/StateService.html":{}}}],["service.service.ts:40",{"_index":1951,"title":{},"body":{"injectables/StateService.html":{}}}],["service.service.ts:48",{"_index":1941,"title":{},"body":{"injectables/StateService.html":{}}}],["service.service.ts:9",{"_index":1958,"title":{},"body":{"injectables/StateService.html":{}}}],["services/auth.service",{"_index":1719,"title":{},"body":{"components/ShowProfileComponent.html":{},"components/VerifyComponent.html":{}}}],["services/channel.service",{"_index":1119,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["services/sidebar.service",{"_index":1118,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{}}}],["services/storage.service",{"_index":1722,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["services/thread.service",{"_index":1721,"title":{},"body":{"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["services/user.service",{"_index":1115,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["session",{"_index":2099,"title":{},"body":{"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{}}}],["sessionstorage",{"_index":2161,"title":{},"body":{"injectables/UserService.html":{}}}],["sessionstorage.getitem(\"uid",{"_index":1929,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["sessionstorage.getitem('uid",{"_index":307,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"injectables/UserService.html":{}}}],["sessionstorage.removeitem('uid",{"_index":2112,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["set",{"_index":1384,"title":{},"body":{"injectables/MutationObserverService.html":{},"injectables/StateService.html":{}}}],["setdata",{"_index":520,"title":{},"body":{"classes/ChannelData.html":{}}}],["setdata(collection",{"_index":528,"title":{},"body":{"classes/ChannelData.html":{}}}],["setdoc",{"_index":1891,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["setdoc(doc(this.firestore",{"_index":2230,"title":{},"body":{"injectables/UserService.html":{}}}],["seteditchanneldialogopenmobile",{"_index":1936,"title":{},"body":{"injectables/StateService.html":{}}}],["seteditchanneldialogopenmobile(state",{"_index":1949,"title":{},"body":{"injectables/StateService.html":{}}}],["sets",{"_index":60,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/VerifyComponent.html":{}}}],["settimeout",{"_index":883,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/SidebarService.html":{},"components/UserMenuDialogComponent.html":{}}}],["settimeout(resolve",{"_index":660,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["setting",{"_index":582,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["shadow",{"_index":119,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["shared/components/header/header.component",{"_index":1281,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["shared/components/show",{"_index":433,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["shared/interfaces/channelinfo",{"_index":105,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["shared/models/channels.class",{"_index":107,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["shared/services/auth.service",{"_index":864,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["shared/services/channel.service",{"_index":104,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/SidebarComponent.html":{}}}],["shared/services/resize",{"_index":1282,"title":{},"body":{"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{}}}],["shared/services/sidebar.service",{"_index":109,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/SidebarComponent.html":{}}}],["shared/services/state",{"_index":431,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["shared/services/storage.service",{"_index":613,"title":{},"body":{"components/ChooseavatarComponent.html":{},"injectables/ThreadService.html":{}}}],["shared/services/thread.service",{"_index":1027,"title":{},"body":{"injectables/EmojiService.html":{},"components/MainsectionComponent.html":{}}}],["shared/services/user.service",{"_index":297,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/SidebarComponent.html":{}}}],["short",{"_index":848,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["show",{"_index":215,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["showaddusersubject",{"_index":1934,"title":{},"body":{"injectables/StateService.html":{}}}],["showemojipickerarray",{"_index":974,"title":{},"body":{"injectables/EmojiService.html":{}}}],["showemojipickerarraythread",{"_index":975,"title":{},"body":{"injectables/EmojiService.html":{}}}],["showing",{"_index":1207,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["showloading",{"_index":553,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["showpassword",{"_index":1448,"title":{},"body":{"components/RegisterComponent.html":{}}}],["showprofile",{"_index":2106,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["showprofilecomponent",{"_index":214,"title":{"components/ShowProfileComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["shows",{"_index":1076,"title":{},"body":{"components/HeaderComponent.html":{}}}],["shows/hides",{"_index":1242,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["showsidenav",{"_index":1199,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["showthread",{"_index":1200,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["showuser",{"_index":2117,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["side",{"_index":1077,"title":{},"body":{"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{}}}],["sidebar",{"_index":1223,"title":{},"body":{"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{}}}],["sidebar'},{'name",{"_index":218,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["sidebar.component.html",{"_index":1761,"title":{},"body":{"components/SidebarComponent.html":{}}}],["sidebar.component.scss",{"_index":1762,"title":{},"body":{"components/SidebarComponent.html":{}}}],["sidebar/sidebar.component",{"_index":1278,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["sidebarcomponent",{"_index":217,"title":{"components/SidebarComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["sidebarelement",{"_index":1182,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["sidebarservice",{"_index":37,"title":{"injectables/SidebarService.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"coverage.html":{}}}],["sidebarservice.channels",{"_index":1850,"title":{},"body":{"components/SidebarComponent.html":{}}}],["sidebarservice.userdmdata",{"_index":1853,"title":{},"body":{"components/SidebarComponent.html":{}}}],["sidebarservice:sidebarservice",{"_index":934,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["sidenav",{"_index":1210,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["sidenav/thread",{"_index":1250,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["sidenavopen",{"_index":1183,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["sidesstatus",{"_index":1201,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["sie",{"_index":158,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["signinwithemailandpassword",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithemailandpassword(auth",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{}}}],["signs",{"_index":2100,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["size",{"_index":691,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/SidebarComponent.html":{}}}],["sizes",{"_index":1618,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["small",{"_index":1780,"title":{},"body":{"components/SidebarComponent.html":{}}}],["smooth",{"_index":1140,"title":{},"body":{"components/HeaderComponent.html":{}}}],["smscreen",{"_index":1606,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["snapshot",{"_index":1878,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["solid",{"_index":727,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["sollten",{"_index":157,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"index.html":{}}}],["space",{"_index":719,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["span",{"_index":701,"title":{},"body":{"components/ChooseavatarComponent.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{}}}],["specific",{"_index":249,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/HeaderComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{}}}],["specificuser",{"_index":235,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["specificuserinput",{"_index":236,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["specified",{"_index":277,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ResetpasswordComponent.html":{},"components/SidebarComponent.html":{},"injectables/UserService.html":{}}}],["speichern",{"_index":962,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"components/ShowProfileComponent.html":{}}}],["spinner",{"_index":748,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src",{"_index":2026,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/.../app.config.ts",{"_index":2399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app.component.ts",{"_index":458,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:15",{"_index":467,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:16",{"_index":464,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:17",{"_index":463,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":2262,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/imprint/imprint.component.ts",{"_index":1155,"title":{},"body":{"components/ImprintComponent.html":{},"coverage.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts",{"_index":542,"title":{},"body":{"components/ChooseavatarComponent.html":{},"coverage.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:107",{"_index":567,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:114",{"_index":572,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:37",{"_index":610,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:38",{"_index":608,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:39",{"_index":611,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:40",{"_index":612,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:41",{"_index":606,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:42",{"_index":565,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:50",{"_index":580,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:58",{"_index":597,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:67",{"_index":602,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:77",{"_index":589,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:88",{"_index":594,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts",{"_index":798,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"coverage.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts:105",{"_index":830,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts:36",{"_index":851,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts:37",{"_index":858,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts:38",{"_index":857,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts:39",{"_index":852,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts:40",{"_index":855,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts:41",{"_index":853,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts:42",{"_index":810,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts:59",{"_index":842,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts:73",{"_index":821,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts:82",{"_index":815,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts:91",{"_index":846,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["src/app/login/login.component.ts",{"_index":2269,"title":{},"body":{"coverage.html":{}}}],["src/app/login/register/register.component.ts",{"_index":1439,"title":{},"body":{"components/RegisterComponent.html":{},"coverage.html":{}}}],["src/app/login/register/register.component.ts:105",{"_index":1468,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:120",{"_index":1464,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:17",{"_index":1480,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:18",{"_index":1484,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:19",{"_index":1479,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:20",{"_index":1481,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:21",{"_index":1485,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:22",{"_index":1482,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:23",{"_index":1455,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:43",{"_index":1475,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:52",{"_index":1477,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:60",{"_index":1478,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:68",{"_index":1458,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:88",{"_index":1472,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/resetpassword/resetpassword.component.ts",{"_index":1578,"title":{},"body":{"components/ResetpasswordComponent.html":{},"coverage.html":{}}}],["src/app/login/resetpassword/resetpassword.component.ts:35",{"_index":1586,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["src/app/login/resetpassword/resetpassword.component.ts:36",{"_index":1583,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["src/app/login/resetpassword/resetpassword.component.ts:43",{"_index":1584,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["src/app/mainsection/channel/add",{"_index":350,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"coverage.html":{}}}],["src/app/mainsection/channel/channel",{"_index":2279,"title":{},"body":{"coverage.html":{}}}],["src/app/mainsection/channel/channel.component.ts",{"_index":2287,"title":{},"body":{"coverage.html":{}}}],["src/app/mainsection/channel/edit",{"_index":898,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"coverage.html":{}}}],["src/app/mainsection/mainsection.component.ts",{"_index":1171,"title":{},"body":{"components/MainsectionComponent.html":{},"coverage.html":{}}}],["src/app/mainsection/mainsection.component.ts:111",{"_index":1240,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:126",{"_index":1246,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:146",{"_index":1244,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:165",{"_index":1220,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:175",{"_index":1224,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:185",{"_index":1208,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:200",{"_index":1204,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:21",{"_index":1277,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:213",{"_index":1214,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:22",{"_index":1262,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:224",{"_index":1211,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:23",{"_index":1271,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:231",{"_index":1232,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:24",{"_index":1258,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:25",{"_index":1253,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:26",{"_index":1263,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:27",{"_index":1266,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:28",{"_index":1269,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:29",{"_index":1274,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:30",{"_index":1275,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:31",{"_index":1276,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:32",{"_index":1273,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:33",{"_index":1265,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:34",{"_index":1268,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:35",{"_index":1255,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:36",{"_index":1260,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:37",{"_index":1203,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:47",{"_index":1236,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:58",{"_index":1237,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:71",{"_index":1225,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:86",{"_index":1247,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:97",{"_index":1248,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/sidebar/add",{"_index":9,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"coverage.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts",{"_index":1760,"title":{},"body":{"components/SidebarComponent.html":{},"coverage.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:106",{"_index":1813,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:115",{"_index":1805,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:124",{"_index":1789,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:137",{"_index":1786,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:146",{"_index":1797,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:159",{"_index":1783,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:165",{"_index":1800,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:32",{"_index":1823,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:33",{"_index":1819,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:34",{"_index":1811,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:35",{"_index":1818,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:36",{"_index":1808,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:37",{"_index":1810,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:38",{"_index":1809,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:39",{"_index":1820,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:40",{"_index":1821,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:41",{"_index":1822,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:42",{"_index":1778,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:44",{"_index":1812,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:51",{"_index":1801,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:58",{"_index":1802,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:65",{"_index":1790,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:76",{"_index":1796,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:86",{"_index":1792,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:95",{"_index":1779,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/thread/thread.component.ts",{"_index":2299,"title":{},"body":{"coverage.html":{}}}],["src/app/outsideclick.directive.ts",{"_index":1414,"title":{},"body":{"directives/OutsideclickDirective.html":{},"coverage.html":{}}}],["src/app/outsideclick.directive.ts:13",{"_index":1426,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["src/app/outsideclick.directive.ts:8",{"_index":1421,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["src/app/privacypolicy/privacypolicy.component.ts",{"_index":2302,"title":{},"body":{"coverage.html":{}}}],["src/app/shared/components/header/header.component.ts",{"_index":1055,"title":{},"body":{"components/HeaderComponent.html":{},"coverage.html":{}}}],["src/app/shared/components/header/header.component.ts:105",{"_index":1093,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:29",{"_index":1106,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:30",{"_index":1108,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:31",{"_index":1105,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:32",{"_index":1096,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:33",{"_index":1107,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:34",{"_index":1102,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:35",{"_index":1104,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:38",{"_index":1101,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:39",{"_index":1069,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:41",{"_index":1097,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:43",{"_index":1082,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:46",{"_index":1083,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:53",{"_index":1084,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:64",{"_index":1072,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:73",{"_index":1075,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:86",{"_index":1087,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:97",{"_index":1070,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/user",{"_index":2091,"title":{},"body":{"components/UserMenuDialogComponent.html":{},"coverage.html":{}}}],["src/app/shared/components/show",{"_index":1654,"title":{},"body":{"components/ShowProfileComponent.html":{},"coverage.html":{}}}],["src/app/shared/components/verify/verify.component.ts",{"_index":2245,"title":{},"body":{"components/VerifyComponent.html":{},"coverage.html":{}}}],["src/app/shared/components/verify/verify.component.ts:15",{"_index":2254,"title":{},"body":{"components/VerifyComponent.html":{}}}],["src/app/shared/components/verify/verify.component.ts:16",{"_index":2255,"title":{},"body":{"components/VerifyComponent.html":{}}}],["src/app/shared/components/verify/verify.component.ts:17",{"_index":2250,"title":{},"body":{"components/VerifyComponent.html":{}}}],["src/app/shared/components/verify/verify.component.ts:29",{"_index":2251,"title":{},"body":{"components/VerifyComponent.html":{}}}],["src/app/shared/interfaces/channelinfo.ts",{"_index":540,"title":{},"body":{"interfaces/ChannelInfo.html":{},"coverage.html":{}}}],["src/app/shared/interfaces/userinfo.ts",{"_index":2090,"title":{},"body":{"interfaces/UserInfo.html":{},"coverage.html":{}}}],["src/app/shared/models/channels.class.ts",{"_index":519,"title":{},"body":{"classes/ChannelData.html":{},"coverage.html":{}}}],["src/app/shared/models/channels.class.ts:14",{"_index":529,"title":{},"body":{"classes/ChannelData.html":{}}}],["src/app/shared/models/channels.class.ts:2",{"_index":525,"title":{},"body":{"classes/ChannelData.html":{}}}],["src/app/shared/models/channels.class.ts:21",{"_index":530,"title":{},"body":{"classes/ChannelData.html":{}}}],["src/app/shared/models/channels.class.ts:3",{"_index":526,"title":{},"body":{"classes/ChannelData.html":{}}}],["src/app/shared/models/channels.class.ts:4",{"_index":527,"title":{},"body":{"classes/ChannelData.html":{}}}],["src/app/shared/models/channels.class.ts:5",{"_index":523,"title":{},"body":{"classes/ChannelData.html":{}}}],["src/app/shared/models/message.class.ts",{"_index":1333,"title":{},"body":{"classes/MessageData.html":{},"coverage.html":{}}}],["src/app/shared/models/message.class.ts:2",{"_index":1339,"title":{},"body":{"classes/MessageData.html":{}}}],["src/app/shared/models/message.class.ts:22",{"_index":1345,"title":{},"body":{"classes/MessageData.html":{}}}],["src/app/shared/models/message.class.ts:3",{"_index":1341,"title":{},"body":{"classes/MessageData.html":{}}}],["src/app/shared/models/message.class.ts:4",{"_index":1342,"title":{},"body":{"classes/MessageData.html":{}}}],["src/app/shared/models/message.class.ts:5",{"_index":1343,"title":{},"body":{"classes/MessageData.html":{}}}],["src/app/shared/models/message.class.ts:6",{"_index":1340,"title":{},"body":{"classes/MessageData.html":{}}}],["src/app/shared/models/message.class.ts:7",{"_index":1344,"title":{},"body":{"classes/MessageData.html":{}}}],["src/app/shared/models/message.class.ts:8",{"_index":1338,"title":{},"body":{"classes/MessageData.html":{}}}],["src/app/shared/models/message.class.ts:9",{"_index":1337,"title":{},"body":{"classes/MessageData.html":{}}}],["src/app/shared/models/userdata.class.ts",{"_index":2082,"title":{},"body":{"classes/UserData.html":{},"coverage.html":{}}}],["src/app/shared/models/userdata.class.ts:2",{"_index":2084,"title":{},"body":{"classes/UserData.html":{}}}],["src/app/shared/models/userdata.class.ts:3",{"_index":2085,"title":{},"body":{"classes/UserData.html":{}}}],["src/app/shared/models/userdata.class.ts:4",{"_index":2086,"title":{},"body":{"classes/UserData.html":{}}}],["src/app/shared/models/userdata.class.ts:5",{"_index":2087,"title":{},"body":{"classes/UserData.html":{}}}],["src/app/shared/models/userdata.class.ts:6",{"_index":2083,"title":{},"body":{"classes/UserData.html":{}}}],["src/app/shared/services/auth.service.ts",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/app/shared/services/auth.service.ts:11",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/shared/services/auth.service.ts:12",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/shared/services/auth.service.ts:20",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/shared/services/auth.service.ts:34",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/shared/services/auth.service.ts:47",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/shared/services/channel.service.ts",{"_index":2315,"title":{},"body":{"coverage.html":{}}}],["src/app/shared/services/emoji.service.ts",{"_index":967,"title":{},"body":{"injectables/EmojiService.html":{},"coverage.html":{}}}],["src/app/shared/services/emoji.service.ts:12",{"_index":1023,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/app/shared/services/emoji.service.ts:120",{"_index":995,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/app/shared/services/emoji.service.ts:124",{"_index":1006,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/app/shared/services/emoji.service.ts:128",{"_index":1001,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/app/shared/services/emoji.service.ts:13",{"_index":1020,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/app/shared/services/emoji.service.ts:14",{"_index":1026,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/app/shared/services/emoji.service.ts:15",{"_index":1021,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/app/shared/services/emoji.service.ts:16",{"_index":1022,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/app/shared/services/emoji.service.ts:17",{"_index":1018,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/app/shared/services/emoji.service.ts:18",{"_index":1019,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/app/shared/services/emoji.service.ts:19",{"_index":1024,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/app/shared/services/emoji.service.ts:20",{"_index":1025,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/app/shared/services/emoji.service.ts:22",{"_index":1011,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/app/shared/services/emoji.service.ts:26",{"_index":1010,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/app/shared/services/emoji.service.ts:36",{"_index":998,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/app/shared/services/emoji.service.ts:51",{"_index":1008,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/app/shared/services/emoji.service.ts:68",{"_index":1004,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/app/shared/services/emoji.service.ts:76",{"_index":1013,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/app/shared/services/emoji.service.ts:8",{"_index":989,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/app/shared/services/emoji.service.ts:88",{"_index":1016,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/app/shared/services/mutation.observer.service.ts",{"_index":1362,"title":{},"body":{"injectables/MutationObserverService.html":{},"coverage.html":{}}}],["src/app/shared/services/mutation.observer.service.ts:10",{"_index":1394,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["src/app/shared/services/mutation.observer.service.ts:11",{"_index":1397,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["src/app/shared/services/mutation.observer.service.ts:12",{"_index":1368,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["src/app/shared/services/mutation.observer.service.ts:28",{"_index":1378,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["src/app/shared/services/mutation.observer.service.ts:60",{"_index":1369,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["src/app/shared/services/mutation.observer.service.ts:9",{"_index":1398,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["src/app/shared/services/resize",{"_index":1601,"title":{},"body":{"injectables/ResizeListenerService.html":{},"coverage.html":{}}}],["src/app/shared/services/sidebar.service.ts",{"_index":1857,"title":{},"body":{"injectables/SidebarService.html":{},"coverage.html":{}}}],["src/app/shared/services/sidebar.service.ts:10",{"_index":1887,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:107",{"_index":1874,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:11",{"_index":1889,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:12",{"_index":1885,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:122",{"_index":1872,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:13",{"_index":1884,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:130",{"_index":1870,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:139",{"_index":1873,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:14",{"_index":1886,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:15",{"_index":1888,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:16",{"_index":1867,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:24",{"_index":1876,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:43",{"_index":1879,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:62",{"_index":1881,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:77",{"_index":1882,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:99",{"_index":1869,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/state",{"_index":1931,"title":{},"body":{"injectables/StateService.html":{},"coverage.html":{}}}],["src/app/shared/services/storage.service.ts",{"_index":2324,"title":{},"body":{"coverage.html":{}}}],["src/app/shared/services/thread.service.ts",{"_index":1964,"title":{},"body":{"injectables/ThreadService.html":{},"coverage.html":{}}}],["src/app/shared/services/thread.service.ts:106",{"_index":2013,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:12",{"_index":2022,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:121",{"_index":2007,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:13",{"_index":2040,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:134",{"_index":2019,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:14",{"_index":2027,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:146",{"_index":2002,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:15",{"_index":2038,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:150",{"_index":2005,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:159",{"_index":2015,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:16",{"_index":2035,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:17",{"_index":2031,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:18",{"_index":2025,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:19",{"_index":2024,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:20",{"_index":2030,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:21",{"_index":2029,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:22",{"_index":2032,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:23",{"_index":2039,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:24",{"_index":2033,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:25",{"_index":2034,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:26",{"_index":2036,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:27",{"_index":1985,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:37",{"_index":1987,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:46",{"_index":2012,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:70",{"_index":1998,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:90",{"_index":2004,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:98",{"_index":1994,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/user.service.ts",{"_index":2119,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/app/shared/services/user.service.ts:109",{"_index":2173,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:12",{"_index":2190,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:123",{"_index":2166,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:13",{"_index":2189,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:137",{"_index":2177,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:14",{"_index":2193,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:15",{"_index":2191,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:153",{"_index":2181,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:16",{"_index":2192,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:162",{"_index":2145,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:17",{"_index":2187,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:176",{"_index":2163,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:18",{"_index":2188,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:186",{"_index":2159,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:195",{"_index":2155,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:206",{"_index":2158,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:218",{"_index":2151,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:229",{"_index":2147,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:25",{"_index":2140,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:37",{"_index":2142,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:49",{"_index":2144,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:64",{"_index":2175,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:78",{"_index":2168,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:88",{"_index":2185,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:98",{"_index":2186,"title":{},"body":{"injectables/UserService.html":{}}}],["stadt",{"_index":1164,"title":{},"body":{"components/ImprintComponent.html":{}}}],["standalone",{"_index":18,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["start",{"_index":702,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["started",{"_index":2353,"title":{"index.html":{}},"body":{}}],["starting",{"_index":2010,"title":{},"body":{"injectables/ThreadService.html":{}}}],["startlistenerchannel",{"_index":1981,"title":{},"body":{"injectables/ThreadService.html":{}}}],["startmutationobserver",{"_index":1972,"title":{},"body":{"injectables/ThreadService.html":{}}}],["starts",{"_index":1877,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/ThreadService.html":{}}}],["state",{"_index":617,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/MainsectionComponent.html":{},"components/ResetpasswordComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{}}}],["state('closed",{"_index":1826,"title":{},"body":{"components/SidebarComponent.html":{}}}],["state('in",{"_index":624,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["state('open",{"_index":1827,"title":{},"body":{"components/SidebarComponent.html":{}}}],["state('out",{"_index":628,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["stateeditchanneldialogopenmobile",{"_index":402,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["statements",{"_index":2260,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":1229,"title":{},"body":{"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{}}}],["stateservice",{"_index":403,"title":{"injectables/StateService.html":{}},"body":{"components/AddUserToChannelDialogComponent.html":{},"injectables/StateService.html":{},"coverage.html":{}}}],["static",{"_index":1099,"title":{},"body":{"components/HeaderComponent.html":{}}}],["status",{"_index":1073,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["stimme",{"_index":1549,"title":{},"body":{"components/RegisterComponent.html":{}}}],["stoplistener",{"_index":1982,"title":{},"body":{"injectables/ThreadService.html":{}}}],["stopping",{"_index":2009,"title":{},"body":{"injectables/ThreadService.html":{}}}],["stops",{"_index":2008,"title":{},"body":{"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{}}}],["storage",{"_index":1687,"title":{},"body":{"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{}}}],["storagebucket",{"_index":2411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["storageservice",{"_index":563,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/ThreadService.html":{},"coverage.html":{}}}],["stored",{"_index":2160,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["stores",{"_index":2174,"title":{},"body":{"injectables/UserService.html":{}}}],["straße",{"_index":1161,"title":{},"body":{"components/ImprintComponent.html":{}}}],["string",{"_index":309,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["style",{"_index":618,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{},"components/SidebarComponent.html":{}}}],["styles",{"_index":541,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{},"components/SidebarComponent.html":{}}}],["styles.scss",{"_index":683,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["styleurl",{"_index":27,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["styleurls",{"_index":547,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["subject",{"_index":1393,"title":{},"body":{"injectables/MutationObserverService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{}}}],["submitkey",{"_index":2248,"title":{},"body":{"components/VerifyComponent.html":{}}}],["submitted",{"_index":65,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["submituser",{"_index":357,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["submituser(addeduser",{"_index":363,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["subscribe",{"_index":448,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["subscribeon",{"_index":2109,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["subscribes",{"_index":1085,"title":{},"body":{"components/HeaderComponent.html":{}}}],["subscription",{"_index":1257,"title":{},"body":{"components/MainsectionComponent.html":{},"injectables/ThreadService.html":{}}}],["subtree",{"_index":1411,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["such",{"_index":1692,"title":{},"body":{"components/ShowProfileComponent.html":{},"injectables/ThreadService.html":{}}}],["switch",{"_index":1526,"title":{},"body":{"components/RegisterComponent.html":{}}}],["table",{"_index":2331,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2330,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":271,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/ThreadService.html":{}}}],["targetelement",{"_index":1429,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["targetelement.classlist.contains('edit",{"_index":1435,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["team",{"_index":153,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["telefon",{"_index":1169,"title":{},"body":{"components/ImprintComponent.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["templateurl",{"_index":25,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["term",{"_index":1095,"title":{},"body":{"components/HeaderComponent.html":{}}}],["test",{"_index":2379,"title":{},"body":{"index.html":{}}}],["testing",{"_index":2387,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2378,"title":{},"body":{"index.html":{}}}],["text",{"_index":705,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/MainsectionComponent.html":{},"components/ShowProfileComponent.html":{}}}],["themenbezogen",{"_index":159,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["then(async",{"_index":652,"title":{},"body":{"components/ChooseavatarComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["this._elementref.nativeelement.contains(targetelement",{"_index":1437,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["this.activechanneltitle",{"_index":1839,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.activedirectchannel",{"_index":1842,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.activeprivatechannel",{"_index":1840,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.addemoji(event",{"_index":1052,"title":{},"body":{"injectables/EmojiService.html":{}}}],["this.addemojitoeditedmessage(index",{"_index":1043,"title":{},"body":{"injectables/EmojiService.html":{}}}],["this.addnewemoji(index",{"_index":1044,"title":{},"body":{"injectables/EmojiService.html":{}}}],["this.adduser.name",{"_index":387,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["this.adduser.nativeelement",{"_index":450,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["this.allusers",{"_index":2223,"title":{},"body":{"injectables/UserService.html":{}}}],["this.allusers.push(doc.data",{"_index":2225,"title":{},"body":{"injectables/UserService.html":{}}}],["this.authservice.confirmnewpassword(this.code",{"_index":877,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["this.authservice.updateusermail(this.updateuserform.controls['email'].value",{"_index":1749,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.authservice.verified",{"_index":1748,"title":{},"body":{"components/ShowProfileComponent.html":{},"components/VerifyComponent.html":{}}}],["this.authservice.verifychange(this.keyform.controls['key'].value",{"_index":2256,"title":{},"body":{"components/VerifyComponent.html":{}}}],["this.avatars",{"_index":1726,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.changedetector.detectchanges",{"_index":1305,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.channelnameexists",{"_index":138,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["this.channels",{"_index":1899,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.channels.length",{"_index":1907,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.channels.push(channel.data",{"_index":1902,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.channelservice.channelmsg",{"_index":1848,"title":{},"body":{"components/SidebarComponent.html":{},"injectables/SidebarService.html":{}}}],["this.channelservice.channelmsgdata.collection",{"_index":393,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/ThreadService.html":{}}}],["this.channelservice.channelmsgdata.description",{"_index":945,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["this.channelservice.channelmsgdata.title",{"_index":937,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"components/SidebarComponent.html":{}}}],["this.channelservice.choosechanneltype(true",{"_index":1740,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.channelservice.createnewchannel(this.channelservice.newchannel",{"_index":312,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["this.channelservice.currentchannelusers",{"_index":1919,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.channelservice.currentchannelusers.some(checkuid",{"_index":388,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["this.channelservice.messages",{"_index":1030,"title":{},"body":{"injectables/EmojiService.html":{},"components/SidebarComponent.html":{}}}],["this.channelservice.messages.foreach((element",{"_index":1143,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.channelservice.newchannel",{"_index":141,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["this.channelservice.newchannel?.users.push(creatorid",{"_index":308,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["this.channelservice.newchannel?.users.push(user",{"_index":338,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["this.channelservice.newchannel?.users.push(user.uid",{"_index":311,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["this.channelservice.privatemsg",{"_index":1847,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.channelservice.refreshchanneldata",{"_index":1903,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.channelservice.resetmessagetype",{"_index":959,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["this.channelservice.stoplistener",{"_index":2114,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["this.channelservice.updatechanneldescription(this.newchannelvalues.newdescription",{"_index":947,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["this.channelservice.updatechanneltitle(this.newchannelvalues.name",{"_index":942,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["this.channelservice.updateuserdm(this.userservice.otheruserinfo",{"_index":1735,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.channelusers.push(element",{"_index":1928,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.checkandaddemoji(index",{"_index":1041,"title":{},"body":{"injectables/EmojiService.html":{}}}],["this.checkmobilesmallscreen",{"_index":1838,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.clearactivestyle",{"_index":1836,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.clearfiledata",{"_index":2069,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.closedialog",{"_index":1746,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.closesides",{"_index":1325,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.code",{"_index":868,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["this.collection",{"_index":531,"title":{},"body":{"classes/ChannelData.html":{}}}],["this.compareformcontrol",{"_index":874,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["this.createuserinfo",{"_index":2232,"title":{},"body":{"injectables/UserService.html":{}}}],["this.createuserinfo.email",{"_index":2238,"title":{},"body":{"injectables/UserService.html":{}}}],["this.createuserinfo.id",{"_index":2231,"title":{},"body":{"injectables/UserService.html":{}}}],["this.createuserinfo.isloggedin",{"_index":2239,"title":{},"body":{"injectables/UserService.html":{}}}],["this.createuserinfo.name",{"_index":2237,"title":{},"body":{"injectables/UserService.html":{}}}],["this.createuserinfo.profilepicture",{"_index":2241,"title":{},"body":{"injectables/UserService.html":{}}}],["this.currentuser",{"_index":2215,"title":{},"body":{"injectables/UserService.html":{}}}],["this.datasubject.asobservable",{"_index":2023,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.datasubject.next(data",{"_index":1990,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.delay(1000",{"_index":664,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["this.delay(2500",{"_index":662,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["this.description",{"_index":533,"title":{},"body":{"classes/ChannelData.html":{}}}],["this.dialog.closeall",{"_index":1753,"title":{},"body":{"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["this.dialog.open(addnewchannelcomponent",{"_index":1837,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.dialog.open(addnewusertochannelcomponent",{"_index":115,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["this.dialog.open(showprofilecomponent",{"_index":442,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["this.dialog.open(usermenudialogcomponent",{"_index":1120,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.dialog.open(verifycomponent",{"_index":1747,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.dialogref.close",{"_index":143,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["this.displayheadlinemobile",{"_index":1298,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.domchanges.asobservable",{"_index":1396,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["this.domchanges.next([mutation",{"_index":1408,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["this.editchanneldialogopenmobile",{"_index":1961,"title":{},"body":{"injectables/StateService.html":{}}}],["this.editchannelname",{"_index":938,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["this.editdescription",{"_index":946,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["this.editmessage",{"_index":1037,"title":{},"body":{"injectables/EmojiService.html":{}}}],["this.editmessagethread",{"_index":1038,"title":{},"body":{"injectables/EmojiService.html":{}}}],["this.editmode",{"_index":1751,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.editprofilepic",{"_index":1752,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.email",{"_index":1355,"title":{},"body":{"classes/MessageData.html":{},"classes/UserData.html":{}}}],["this.emoji",{"_index":1357,"title":{},"body":{"classes/MessageData.html":{}}}],["this.errormessage",{"_index":1498,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.filedata",{"_index":2068,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.filedata.name",{"_index":2062,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.filedata.src",{"_index":2060,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.filedata.type",{"_index":2064,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.fileinput.nativeelement.click",{"_index":1728,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.firstfocus",{"_index":1497,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.getfirebaseerrormessage(error.code",{"_index":1521,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.getusersfromchannel",{"_index":313,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["this.handleregistrationerror(error",{"_index":1505,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.handleuserregistration(email",{"_index":1504,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.headercomponent.headlinedesktop.nativeelement.style.display",{"_index":1324,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.headercomponent.headlinemobile.nativeelement.style.display",{"_index":1323,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.headlinedesktop.nativeelement.style.display",{"_index":1130,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.headlinemobile.nativeelement.style.display",{"_index":1132,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.hidesidenav",{"_index":1302,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.hidethread",{"_index":1295,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.hidethreadsubject.asobservable",{"_index":2028,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.hidethreadsubject.next",{"_index":2081,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.hidethreadsubscription",{"_index":1293,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.hidethreadsubscription.unsubscribe",{"_index":1328,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.id",{"_index":1346,"title":{},"body":{"classes/MessageData.html":{},"classes/UserData.html":{}}}],["this.initialchildcount",{"_index":1402,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["this.initialreferenceelementposition",{"_index":451,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["this.inputs.channelname",{"_index":128,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["this.inputs.description",{"_index":147,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["this.inputs.specificuser",{"_index":324,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["this.isdisabled",{"_index":882,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["this.isformsubmitted",{"_index":1500,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.isloggedin",{"_index":2088,"title":{},"body":{"classes/UserData.html":{}}}],["this.issubscribed",{"_index":2041,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.key",{"_index":875,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["this.keyform",{"_index":871,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/VerifyComponent.html":{}}}],["this.keyform.controls['key'].value",{"_index":876,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["this.keyform.controls['repeatedkey'].value",{"_index":881,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["this.keyform.controls['repeatedkey'].valuechanges",{"_index":873,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["this.lgscreen",{"_index":1641,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["this.loadingscreen",{"_index":648,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["this.mainsectioncomponent.hanldeclosemobile",{"_index":1844,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.mainsectioncomponent.rotatetoggle",{"_index":1129,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.mainsectioncomponent.showsidenav",{"_index":1126,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.mainsectioncomponent.toggleelement.nativeelement.classlist.remove('rotate",{"_index":1127,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.mdscreen",{"_index":1645,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["this.menustates[menu",{"_index":1845,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.message",{"_index":1351,"title":{},"body":{"classes/MessageData.html":{}}}],["this.messageedit",{"_index":1028,"title":{},"body":{"injectables/EmojiService.html":{}}}],["this.messagelist",{"_index":1142,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.messagelist.push(element",{"_index":1147,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.messages",{"_index":2044,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.messages.length",{"_index":2055,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.messages.sort((a",{"_index":2048,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.messages.unshift(doc.data",{"_index":2046,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.messagestimestamp",{"_index":2045,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.msgid",{"_index":1359,"title":{},"body":{"classes/MessageData.html":{}}}],["this.mustmatch('key",{"_index":872,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["this.mutationobserver",{"_index":1404,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["this.mutationobserver.disconnect",{"_index":1413,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["this.mutationobserver.observe(element.nativeelement",{"_index":1409,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["this.name",{"_index":1347,"title":{},"body":{"classes/MessageData.html":{},"classes/UserData.html":{}}}],["this.nameinput.nativeelement.focus",{"_index":1496,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.newchannel",{"_index":142,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["this.newchannelvalues.name",{"_index":936,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["this.newchannelvalues.name.length",{"_index":939,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["this.newchannelvalues.newdescription",{"_index":944,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["this.onresize",{"_index":1296,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.opendialog",{"_index":144,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ShowProfileComponent.html":{}}}],["this.opendialoguserinfo",{"_index":441,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["this.openeditmessagetoggle",{"_index":1035,"title":{},"body":{"injectables/EmojiService.html":{}}}],["this.openeditmessagetogglethread",{"_index":1036,"title":{},"body":{"injectables/EmojiService.html":{}}}],["this.originmessage.msgid",{"_index":2070,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.otheruser",{"_index":1731,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.otheruserinfo",{"_index":2216,"title":{},"body":{"injectables/UserService.html":{}}}],["this.otheruserinfo.isloggedin",{"_index":2243,"title":{},"body":{"injectables/UserService.html":{}}}],["this.outsideclick.emit(event",{"_index":1438,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["this.overlayelement",{"_index":1309,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.overlayelement.nativeelement",{"_index":1310,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.overlayelement.nativeelement.style.display",{"_index":1311,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.params",{"_index":866,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["this.params.get('oobcode",{"_index":869,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["this.popupdisplay",{"_index":878,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["this.popupstate",{"_index":663,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["this.preparenewchanneldata",{"_index":140,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["this.profilepicture",{"_index":1349,"title":{},"body":{"classes/MessageData.html":{},"classes/UserData.html":{}}}],["this.registerform",{"_index":1488,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.registerform.controls['email'].value",{"_index":1502,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.registerform.controls['name'].value",{"_index":1503,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.registerform.controls['password'].value",{"_index":1518,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.registerform.valid",{"_index":1501,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.removechanneluser",{"_index":1908,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.resizecallbacks",{"_index":1651,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["this.resizecallbacks.filter(cb",{"_index":1652,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["this.resizecallbacks.foreach(callback",{"_index":1639,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["this.resizecallbacks.push(callback",{"_index":1650,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["this.resizelistenerservice.lgscreen",{"_index":1306,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.resizelistenerservice.mdscreen",{"_index":1301,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.resizelistenerservice.registerresizecallback(this.geteditchanneldialogopenmobile.bind(this",{"_index":1960,"title":{},"body":{"injectables/StateService.html":{}}}],["this.resizelistenerservice.registerresizecallback(this.onresize.bind(this",{"_index":1285,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.resizelistenerservice.smscreen",{"_index":1322,"title":{},"body":{"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{}}}],["this.resizelistenerservice.unregisterresizecallback(this.geteditchanneldialogopenmobile.bind(this",{"_index":1963,"title":{},"body":{"injectables/StateService.html":{}}}],["this.resizelistenerservice.unregisterresizecallback(this.onresize.bind(this",{"_index":1329,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.resizelistenerservice.xmdscreen",{"_index":1315,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.resizelistenerservice.xsmscreen",{"_index":1843,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.restartlistener(data",{"_index":1992,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.rotatetoggle",{"_index":1303,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.router.navigate",{"_index":665,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/UserService.html":{}}}],["this.router.navigate(['/register/chooseavatar",{"_index":1519,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.router.url",{"_index":2195,"title":{},"body":{"injectables/UserService.html":{}}}],["this.router.url.includes('confirmpassword",{"_index":2196,"title":{},"body":{"injectables/UserService.html":{}}}],["this.searchmsg.msg",{"_index":1141,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.selectedavatar",{"_index":638,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["this.selecteduser.foreach(async",{"_index":390,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["this.selecteduser.foreach(user",{"_index":310,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["this.selecteduser.indexof(user",{"_index":332,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["this.selecteduser.push(user",{"_index":331,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["this.selecteduser.some(checkuid",{"_index":325,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["this.selecteduser.splice(contains",{"_index":333,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["this.showaddusersubject.asobservable",{"_index":1956,"title":{},"body":{"injectables/StateService.html":{}}}],["this.showaddusersubject.next",{"_index":1962,"title":{},"body":{"injectables/StateService.html":{}}}],["this.showemojipickerarray",{"_index":1032,"title":{},"body":{"injectables/EmojiService.html":{}}}],["this.showemojipickerarraythread",{"_index":1034,"title":{},"body":{"injectables/EmojiService.html":{}}}],["this.showloading",{"_index":661,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["this.showpassword",{"_index":1499,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.showsidenav",{"_index":1313,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.sidebarelement.nativeelement.classlist.add('hide",{"_index":1319,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.sidebarelement.nativeelement.classlist.add('margin",{"_index":1300,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.sidebarelement.nativeelement.classlist.remove('hide",{"_index":1317,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.sidebarelement.nativeelement.classlist.remove('margin",{"_index":1318,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.sidebarservice.channels.foreach",{"_index":122,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["this.sidebarservice.channels.some(checktitle",{"_index":129,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["this.sidebarservice.channelusers.foreach(user",{"_index":337,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["this.sidebarservice.getusersfromchannel",{"_index":336,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["this.sidebarservice.retrievechannels",{"_index":1829,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.sidebarservice.retrievecurrentchannels",{"_index":1831,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.sidebarservice.retrievecurrentdirectmsgs",{"_index":1833,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.sidebarservice.retrievedmuserdata",{"_index":1835,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.sidebarservice.userdmdata",{"_index":1849,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.sidebarservice.userdmdata.foreach(element",{"_index":1736,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.sidebarservice.userdmdata.push(this.userservice.otheruserinfo",{"_index":1739,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.sidebarservice.userdmdata[index].isloggedin",{"_index":1846,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.sidenavopen",{"_index":1307,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.sidesstatus",{"_index":1299,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.smscreen",{"_index":1649,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["this.specificuser",{"_index":305,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["this.specificuserinput?.nativeelement.focus",{"_index":334,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["this.startlistenerchannel",{"_index":2075,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.stateservice.geteditchanneldialogopenmobile",{"_index":429,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["this.stateservice.triggeradduser",{"_index":454,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["this.stoplistener",{"_index":2074,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.storageservice.abortuploadforthread",{"_index":2071,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.storageservice.avatars",{"_index":605,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["this.storageservice.downloadurlthread",{"_index":2061,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.storageservice.filenametextareathread",{"_index":2063,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.storageservice.files",{"_index":639,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["this.storageservice.files?.item(0",{"_index":646,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["this.storageservice.filestextareathread",{"_index":2058,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.storageservice.filestextareathread.length",{"_index":2059,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.storageservice.onfileselected(input",{"_index":645,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["this.storageservice.uploadedfiletypethread",{"_index":2065,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.storageservice.uploadfile(this.userservice.createuserinfo.id",{"_index":656,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["this.storageservice.uploadfile(this.userservice.currentuser",{"_index":1729,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.threadbarelement.nativeelement.classlist.add('hide",{"_index":1321,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.threadbarelement.nativeelement.classlist.add('margin",{"_index":1314,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.threadbarelement.nativeelement.classlist.remove('hide",{"_index":1316,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.threadbarelement.nativeelement.classlist.remove('margin",{"_index":1320,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.threadmessageedit",{"_index":1042,"title":{},"body":{"injectables/EmojiService.html":{}}}],["this.threadopen",{"_index":1308,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.threadservice.hidethread$.subscribe",{"_index":1294,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.threadservice.isactive",{"_index":1745,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.threadservice.messages",{"_index":1031,"title":{},"body":{"injectables/EmojiService.html":{}}}],["this.threadservice.stoplistener",{"_index":1741,"title":{},"body":{"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["this.threadservice.triggerhidethread",{"_index":1742,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.timestamp",{"_index":1353,"title":{},"body":{"classes/MessageData.html":{}}}],["this.title",{"_index":535,"title":{},"body":{"classes/ChannelData.html":{}}}],["this.toggleelement.nativeelement.classlist.add('rotate",{"_index":1304,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.toggleelement.nativeelement.classlist.remove('rotate",{"_index":1312,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.trigger.openmenu",{"_index":329,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["this.unsub",{"_index":2042,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.unsubchannels",{"_index":1828,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.unsubcurrentchannels",{"_index":1830,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.unsubprofile",{"_index":1286,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.unsubuserchannels",{"_index":1288,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.unsubuserdmdata",{"_index":1834,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.unsubuserdmids",{"_index":1832,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.unsubuserlist",{"_index":1290,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.updatechannelusers",{"_index":382,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["this.updatemessage(currentmessageindex",{"_index":1051,"title":{},"body":{"injectables/EmojiService.html":{}}}],["this.updatemessage(index",{"_index":1045,"title":{},"body":{"injectables/EmojiService.html":{}}}],["this.updateoverlaydisplay",{"_index":1297,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.updatescreensize",{"_index":1638,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["this.updateuserform",{"_index":1723,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.updateuserform.valid",{"_index":1733,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.userchannels",{"_index":2219,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userchannels.unshift(element.data()['channelid",{"_index":2221,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userdmdata",{"_index":1914,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.userdmdata.push(data",{"_index":1917,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.userdmids",{"_index":1910,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.userdmids.includes(userdm.id",{"_index":1915,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.userdmids.push(userdm.data()['dmuserid",{"_index":1912,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.userinfo",{"_index":2213,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userlist",{"_index":314,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["this.userlist.push",{"_index":326,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["this.username",{"_index":636,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["this.users",{"_index":536,"title":{},"body":{"classes/ChannelData.html":{}}}],["this.userservice.allusers.foreach(element",{"_index":315,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["this.userservice.checkregistereduser(email",{"_index":1510,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.userservice.createuserinfo.email",{"_index":650,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["this.userservice.createuserinfo.id",{"_index":654,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["this.userservice.createuserinfo.name",{"_index":637,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["this.userservice.createuserinfo.profilepicture",{"_index":641,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["this.userservice.createuserprofile",{"_index":658,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["this.userservice.currentuser",{"_index":957,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["this.userservice.key",{"_index":651,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["this.userservice.otheruserinfo",{"_index":440,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/ShowProfileComponent.html":{}}}],["this.userservice.otheruserinfo.id",{"_index":1738,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.userservice.otheruserinfo.isloggedin",{"_index":1732,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.userservice.preparedatanewuser(this.registerform.value",{"_index":1517,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.userservice.retrieveallusers",{"_index":1291,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.userservice.retrieveuserchannels",{"_index":1289,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.userservice.retrieveuserprofile",{"_index":1287,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.userservice.updateuserprofile(this.updateuserform",{"_index":1750,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.userservice.updateuserprofilepicture(this.userservice.createuserinfo.profilepicture",{"_index":1730,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.userservice.userchannels.includes(channel.id",{"_index":1901,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.userservice.userinfo",{"_index":2115,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["this.userservice.userinfo.email",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.userinfo.isloggedin",{"_index":1125,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{}}}],["this.userservice.userinfo.name",{"_index":1841,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.userservice.userinfo.profilepicture",{"_index":1727,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.userservice.userloggedin",{"_index":1292,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.userservice.userloggedout",{"_index":1327,"title":{},"body":{"components/MainsectionComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["this.xmdscreen",{"_index":1643,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["this.xsmscreen",{"_index":1647,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["thread",{"_index":994,"title":{},"body":{"injectables/EmojiService.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"injectables/ThreadService.html":{}}}],["thread'},{'name",{"_index":220,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["thread.service",{"_index":1744,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["thread/thread.component",{"_index":1280,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["threadbarelement",{"_index":1184,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["threadcomponent",{"_index":219,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["threadmessageedit",{"_index":976,"title":{},"body":{"injectables/EmojiService.html":{}}}],["threadopen",{"_index":1185,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["threads",{"_index":2103,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["threadservice",{"_index":988,"title":{"injectables/ThreadService.html":{}},"body":{"injectables/EmojiService.html":{},"components/MainsectionComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"coverage.html":{}}}],["threadservice:threadservice",{"_index":2111,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["through",{"_index":2017,"title":{},"body":{"injectables/ThreadService.html":{}}}],["throw",{"_index":130,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{}}}],["throws",{"_index":1506,"title":{},"body":{"components/RegisterComponent.html":{}}}],["timeout",{"_index":1476,"title":{},"body":{"components/RegisterComponent.html":{}}}],["timestamp",{"_index":1336,"title":{},"body":{"classes/MessageData.html":{},"injectables/ThreadService.html":{}}}],["title",{"_index":126,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AppComponent.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/SidebarComponent.html":{}}}],["titles",{"_index":1784,"title":{},"body":{"components/SidebarComponent.html":{}}}],["toggle",{"_index":1128,"title":{},"body":{"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{}}}],["togglechangeprofilepic",{"_index":1671,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["toggled",{"_index":1807,"title":{},"body":{"components/SidebarComponent.html":{}}}],["toggleeditmode",{"_index":984,"title":{},"body":{"injectables/EmojiService.html":{}}}],["toggleelement",{"_index":1186,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["togglemenu",{"_index":1777,"title":{},"body":{"components/SidebarComponent.html":{}}}],["togglemenu(menu",{"_index":1804,"title":{},"body":{"components/SidebarComponent.html":{}}}],["togglepasswordvisibility",{"_index":1454,"title":{},"body":{"components/RegisterComponent.html":{}}}],["toggles",{"_index":1205,"title":{},"body":{"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{}}}],["tojson",{"_index":521,"title":{},"body":{"classes/ChannelData.html":{},"classes/MessageData.html":{}}}],["top",{"_index":436,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"components/HeaderComponent.html":{},"components/RegisterComponent.html":{}}}],["toppos",{"_index":1136,"title":{},"body":{"components/HeaderComponent.html":{}}}],["track",{"_index":346,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{}}}],["transform",{"_index":625,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["transition",{"_index":619,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["transition('in",{"_index":635,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["transition('out",{"_index":632,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["translatex(0",{"_index":626,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["translatex(100",{"_index":629,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["transparent",{"_index":728,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["tree",{"_index":7,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["trigger",{"_index":237,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{}}}],["trigger('openclose",{"_index":1825,"title":{},"body":{"components/SidebarComponent.html":{}}}],["trigger('slideinout",{"_index":623,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["triggeradduser",{"_index":1937,"title":{},"body":{"injectables/StateService.html":{}}}],["triggered",{"_index":592,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["triggerfileinput",{"_index":561,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["triggerhidethread",{"_index":1983,"title":{},"body":{"injectables/ThreadService.html":{}}}],["triggering",{"_index":1071,"title":{},"body":{"components/HeaderComponent.html":{}}}],["triggers",{"_index":603,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{}}}],["true",{"_index":19,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["try",{"_index":121,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{}}}],["tslib",{"_index":2348,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":833,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"injectables/UserService.html":{}}}],["type",{"_index":52,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":1370,"title":{},"body":{"injectables/MutationObserverService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["uid",{"_index":321,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"injectables/UserService.html":{}}}],["und",{"_index":1536,"title":{},"body":{"components/RegisterComponent.html":{}}}],["unerwarteter",{"_index":1523,"title":{},"body":{"components/RegisterComponent.html":{}}}],["ungültige",{"_index":1533,"title":{},"body":{"components/RegisterComponent.html":{}}}],["unique",{"_index":2148,"title":{},"body":{"injectables/UserService.html":{}}}],["unit",{"_index":2377,"title":{},"body":{"index.html":{}}}],["unregister",{"_index":1627,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["unregistered",{"_index":1628,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["unregisterresizecallback",{"_index":1610,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["unregisterresizecallback(callback",{"_index":1625,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["unregisters",{"_index":1942,"title":{},"body":{"injectables/StateService.html":{}}}],["unsub",{"_index":1973,"title":{},"body":{"injectables/ThreadService.html":{}}}],["unsubchannels",{"_index":1767,"title":{},"body":{"components/SidebarComponent.html":{}}}],["unsubcurrentchannels",{"_index":1768,"title":{},"body":{"components/SidebarComponent.html":{}}}],["unsubprofile",{"_index":1187,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["unsubscribe",{"_index":1824,"title":{},"body":{"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["unsubscribed",{"_index":2073,"title":{},"body":{"injectables/ThreadService.html":{}}}],["unsubscribes",{"_index":2014,"title":{},"body":{"injectables/ThreadService.html":{}}}],["unsubuserchannels",{"_index":1188,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["unsubuserdmdata",{"_index":1769,"title":{},"body":{"components/SidebarComponent.html":{}}}],["unsubuserdmids",{"_index":1770,"title":{},"body":{"components/SidebarComponent.html":{}}}],["unsubuserlist",{"_index":1189,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["up",{"_index":1945,"title":{},"body":{"injectables/StateService.html":{},"injectables/ThreadService.html":{}}}],["update",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ResizeListenerService.html":{},"injectables/ThreadService.html":{}}}],["updatechannelmessage",{"_index":1984,"title":{},"body":{"injectables/ThreadService.html":{}}}],["updatechannelmessage(data",{"_index":2018,"title":{},"body":{"injectables/ThreadService.html":{}}}],["updatechannelusers",{"_index":358,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["updated",{"_index":2183,"title":{},"body":{"injectables/UserService.html":{}}}],["updatedoc",{"_index":379,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["updatedoc(doc(this.firestore",{"_index":392,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["updatedoc(doc(this.refuserprofile",{"_index":2217,"title":{},"body":{"injectables/UserService.html":{}}}],["updatedoc(this.refupdatefilepath(docref.id",{"_index":2066,"title":{},"body":{"injectables/ThreadService.html":{}}}],["updatedoc(this.refupdatethread",{"_index":2053,"title":{},"body":{"injectables/ThreadService.html":{}}}],["updateemail",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateemail(auth.currentuser",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["updatemessage",{"_index":985,"title":{},"body":{"injectables/EmojiService.html":{}}}],["updatemessage(index",{"_index":1012,"title":{},"body":{"injectables/EmojiService.html":{}}}],["updateoverlaydisplay",{"_index":1202,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["updatepassword",{"_index":859,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["updatereaction",{"_index":986,"title":{},"body":{"injectables/EmojiService.html":{}}}],["updatereaction(currentemojiindex",{"_index":1014,"title":{},"body":{"injectables/EmojiService.html":{}}}],["updates",{"_index":909,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"components/MainsectionComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["updatescreensize",{"_index":1611,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["updateuserform",{"_index":1664,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["updateusermail",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateusermail(mail",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserprofile",{"_index":2136,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserprofile(ngform",{"_index":2176,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserprofilepicture",{"_index":2137,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserprofilepicture(picturepath",{"_index":2180,"title":{},"body":{"injectables/UserService.html":{}}}],["updating",{"_index":926,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"injectables/ThreadService.html":{}}}],["upload",{"_index":737,"title":{},"body":{"components/ChooseavatarComponent.html":{},"injectables/ThreadService.html":{}}}],["uploaded",{"_index":2153,"title":{},"body":{"injectables/UserService.html":{}}}],["uploadedfile",{"_index":2067,"title":{},"body":{"injectables/ThreadService.html":{}}}],["uploads",{"_index":1686,"title":{},"body":{"components/ShowProfileComponent.html":{},"injectables/ThreadService.html":{}}}],["url",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{},"components/ShowProfileComponent.html":{},"injectables/UserService.html":{}}}],["url(/assets/img/login/checkbox.png",{"_index":1562,"title":{},"body":{"components/RegisterComponent.html":{}}}],["url(/assets/img/login/checkbox_checked.png",{"_index":1567,"title":{},"body":{"components/RegisterComponent.html":{}}}],["url(/assets/img/login/checkbox_checked_hover.png",{"_index":1569,"title":{},"body":{"components/RegisterComponent.html":{}}}],["url(/assets/img/login/checkbox_hover.png",{"_index":1565,"title":{},"body":{"components/RegisterComponent.html":{}}}],["url.createobjecturl(this.storageservice.fileurl",{"_index":647,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["urlsearchparams",{"_index":856,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["urlsearchparams(window.location.search",{"_index":867,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["use",{"_index":813,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/RegisterComponent.html":{},"index.html":{}}}],["used",{"_index":920,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"injectables/MutationObserverService.html":{},"components/ShowProfileComponent.html":{},"injectables/ThreadService.html":{}}}],["user",{"_index":74,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["user's",{"_index":583,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["user.name",{"_index":456,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["user.service",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{}}}],["user.uid",{"_index":330,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["user.user",{"_index":347,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["userchannels",{"_index":396,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["usercredential",{"_index":653,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["usercredential.user.uid",{"_index":655,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["userdata",{"_index":1895,"title":{"classes/UserData.html":{}},"body":{"injectables/SidebarService.html":{},"classes/UserData.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userdata(user.data",{"_index":2214,"title":{},"body":{"injectables/UserService.html":{}}}],["userdm.data",{"_index":1916,"title":{},"body":{"injectables/SidebarService.html":{}}}],["userdmdata",{"_index":1787,"title":{},"body":{"components/SidebarComponent.html":{},"injectables/SidebarService.html":{}}}],["userdmids",{"_index":1859,"title":{},"body":{"injectables/SidebarService.html":{}}}],["userdoc",{"_index":2197,"title":{},"body":{"injectables/UserService.html":{}}}],["userdoc.exists",{"_index":2200,"title":{},"body":{"injectables/UserService.html":{}}}],["userexists",{"_index":2199,"title":{},"body":{"injectables/UserService.html":{}}}],["userid",{"_index":993,"title":{},"body":{"injectables/EmojiService.html":{},"injectables/UserService.html":{}}}],["userindex",{"_index":1047,"title":{},"body":{"injectables/EmojiService.html":{}}}],["userinfo",{"_index":2089,"title":{"interfaces/UserInfo.html":{}},"body":{"interfaces/UserInfo.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userisloggedin",{"_index":412,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["userlist",{"_index":238,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["userlist.length",{"_index":348,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["userloggedin",{"_index":2138,"title":{},"body":{"injectables/UserService.html":{}}}],["userloggedout",{"_index":2139,"title":{},"body":{"injectables/UserService.html":{}}}],["usermatched",{"_index":1003,"title":{},"body":{"injectables/EmojiService.html":{}}}],["usermenudialogcomponent",{"_index":221,"title":{"components/UserMenuDialogComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["username",{"_index":554,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["userprofiledata",{"_index":2226,"title":{},"body":{"injectables/UserService.html":{}}}],["userprofiledata.email",{"_index":2229,"title":{},"body":{"injectables/UserService.html":{}}}],["userprofiledata.name",{"_index":2228,"title":{},"body":{"injectables/UserService.html":{}}}],["users",{"_index":258,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/EditChannelDialogComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["userservice",{"_index":239,"title":{"injectables/UserService.html":{}},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userservice.otheruserinfo.email",{"_index":1756,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["userservice.otheruserinfo.name",{"_index":1755,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["userservice.userinfo.email",{"_index":1757,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["userservice.userinfo.id",{"_index":1855,"title":{},"body":{"components/SidebarComponent.html":{}}}],["userservice.userinfo.name",{"_index":1154,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{}}}],["using",{"_index":75,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ConfirmpasswordComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["valid",{"_index":1674,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["validates",{"_index":843,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["validationerrors",{"_index":863,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["validator",{"_index":831,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["validatorfn",{"_index":838,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["validators",{"_index":861,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{}}}],["validators.email",{"_index":1491,"title":{},"body":{"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{}}}],["validators.minlength(5",{"_index":1490,"title":{},"body":{"components/RegisterComponent.html":{}}}],["validators.minlength(8",{"_index":1492,"title":{},"body":{"components/RegisterComponent.html":{}}}],["validators.required",{"_index":1489,"title":{},"body":{"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{}}}],["validators.requiredtrue",{"_index":1495,"title":{},"body":{"components/RegisterComponent.html":{}}}],["value",{"_index":87,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":817,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["var",{"_index":181,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["variable",{"_index":1243,"title":{},"body":{"components/MainsectionComponent.html":{},"coverage.html":{}}}],["variables",{"_index":1636,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/ResizeListenerService.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":1218,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["verification",{"_index":2253,"title":{},"body":{"components/VerifyComponent.html":{}}}],["verified",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{},"components/ShowProfileComponent.html":{}}}],["verifies",{"_index":2252,"title":{},"body":{"components/VerifyComponent.html":{}}}],["verify",{"_index":224,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["verify.component.html",{"_index":2246,"title":{},"body":{"components/VerifyComponent.html":{}}}],["verify.component.scss",{"_index":2247,"title":{},"body":{"components/VerifyComponent.html":{}}}],["verify/verify.component",{"_index":1720,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["verifychange",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifychange(key",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifycomponent",{"_index":223,"title":{"components/VerifyComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["verlassen",{"_index":965,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["version",{"_index":2357,"title":{},"body":{"index.html":{},"properties.html":{}}}],["verwenden",{"_index":674,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["verwendet",{"_index":1531,"title":{},"body":{"components/RegisterComponent.html":{}}}],["via",{"_index":2380,"title":{},"body":{"index.html":{}}}],["view",{"_index":1216,"title":{},"body":{"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{}}}],["viewchild",{"_index":296,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{}}}],["viewchild(\"specificuserinput",{"_index":302,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["viewchild('adduser",{"_index":424,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["viewchild('channel",{"_index":1254,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["viewchild('fileinput",{"_index":1709,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["viewchild('headlinedesktop",{"_index":1098,"title":{},"body":{"components/HeaderComponent.html":{}}}],["viewchild('headlinemobile",{"_index":1100,"title":{},"body":{"components/HeaderComponent.html":{}}}],["viewchild('icon",{"_index":428,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["viewchild('nameinput",{"_index":1483,"title":{},"body":{"components/RegisterComponent.html":{}}}],["viewchild('overlay",{"_index":1259,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["viewchild('sidebar",{"_index":1264,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["viewchild('specificuserinput",{"_index":290,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["viewchild('threadbar",{"_index":1267,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["viewchild('toggle",{"_index":1272,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["viewchild(headercomponent",{"_index":1256,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["viewchild(matmenutrigger",{"_index":293,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["viewchildren",{"_index":2108,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["visibility",{"_index":1245,"title":{},"body":{"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{}}}],["void",{"_index":76,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"classes/ChannelData.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/EmojiService.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{}}}],["vollständiger",{"_index":1758,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["von",{"_index":343,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["vorhanden",{"_index":133,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["vorname",{"_index":1159,"title":{},"body":{"components/ImprintComponent.html":{}}}],["want",{"_index":1090,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/UserService.html":{}}}],["webkit",{"_index":1558,"title":{},"body":{"components/RegisterComponent.html":{}}}],["weight",{"_index":693,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["weiter",{"_index":677,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["where(\"email",{"_index":2203,"title":{},"body":{"injectables/UserService.html":{}}}],["where(\"name",{"_index":2205,"title":{},"body":{"injectables/UserService.html":{}}}],["whether",{"_index":1386,"title":{},"body":{"injectables/MutationObserverService.html":{},"components/ShowProfileComponent.html":{},"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["white",{"_index":745,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["whose",{"_index":2171,"title":{},"body":{"injectables/UserService.html":{}}}],["width",{"_index":712,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{},"injectables/ResizeListenerService.html":{}}}],["window",{"_index":73,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ShowProfileComponent.html":{},"components/VerifyComponent.html":{}}}],["window.innerwidth",{"_index":1640,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["windows",{"_index":1677,"title":{},"body":{"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["wir",{"_index":1594,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["wird",{"_index":1530,"title":{},"body":{"components/RegisterComponent.html":{}}}],["within",{"_index":923,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"components/SidebarComponent.html":{},"injectables/UserService.html":{}}}],["withviewtransitions",{"_index":2403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["workspace",{"_index":1330,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["wrap",{"_index":723,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["wähle",{"_index":173,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ChooseavatarComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["wählen",{"_index":671,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["xmdscreen",{"_index":1607,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["xsmscreen",{"_index":1608,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["yes",{"_index":524,"title":{},"body":{"classes/ChannelData.html":{},"classes/MessageData.html":{},"classes/UserData.html":{}}}],["z",{"_index":751,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["zeichen",{"_index":1544,"title":{},"body":{"components/RegisterComponent.html":{}}}],["zone.js",{"_index":2350,"title":{},"body":{"dependencies.html":{}}}],["zu",{"_index":168,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{}}}],["zum",{"_index":162,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["zur",{"_index":154,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["zurücksetzen",{"_index":895,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AddNewChannelComponent.html":{"url":"components/AddNewChannelComponent.html","title":"component - AddNewChannelComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AddNewChannelComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mainsection/sidebar/add-new-channel/add-new-channel.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-add-new-channel\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatDialogModule\n                            FormsModule\n                            CommonModule\n                                AddNewUserToChannelComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./add-new-channel.component.html\n            \n\n\n\n            \n                styleUrl\n                ./add-new-channel.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelNameExists\n                            \n                            \n                                channelService\n                            \n                            \n                                    Public\n                                dialog\n                            \n                            \n                                inputs\n                            \n                            \n                                newChannel\n                            \n                            \n                                sidebarService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onSubmit\n                            \n                            \n                                openDialog\n                            \n                            \n                                prepareNewChannelData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialog: MatDialog, dialogRef: DialogRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/mainsection/sidebar/add-new-channel/add-new-channel.component.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                    DialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onSubmit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onSubmit(createNewChannel: NgForm)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/add-new-channel/add-new-channel.component.ts:47\n                        \n                    \n\n\n            \n                \n                        The onSubmit function prepares new channel data, sets it in the channel service, and resets the\nform.\nThe function onSubmit is called when a form is submitted, and it resets the form\nafterwards.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createNewChannel\n                                            \n                                                        NgForm\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \ncreateNewChannel is a parameter of type NgForm.\nThe function onSubmit is called when a form is submitted, and it resets the form\nafterwards.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openDialog\n                        \n                    \n                \n            \n            \n                \nopenDialog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/add-new-channel/add-new-channel.component.ts:36\n                        \n                    \n\n\n            \n                \n                        The openDialog function opens a dialog window to add new user to a channel using the\nAddNewUserToChannelComponent.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prepareNewChannelData\n                        \n                    \n                \n            \n            \n                \nprepareNewChannelData()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/add-new-channel/add-new-channel.component.ts:72\n                        \n                    \n\n\n            \n                \n                        The function prepareNewChannelData creates a new channel object with data from input fields and\nconverts it to JSON format.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelNameExists\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-channel/add-new-channel.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelService\n\n                    \n                \n                \n                    \n                        Default value : inject(ChannelService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-channel/add-new-channel.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatDialog\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-channel/add-new-channel.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inputs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    'channelName': '',\n    'description': ''\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-channel/add-new-channel.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newChannel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelInfo\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-channel/add-new-channel.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sidebarService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SidebarService\n\n                    \n                \n                \n                    \n                        Default value : inject(SidebarService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-channel/add-new-channel.component.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, inject, input } from '@angular/core';\nimport { FormsModule, NgForm } from '@angular/forms';\nimport { MatDialogModule, MatDialog } from '@angular/material/dialog';\nimport { ChannelService } from '../../../shared/services/channel.service';\nimport { ChannelInfo } from '../../../shared/interfaces/channelinfo';\nimport { ChannelData } from '../../../shared/models/channels.class';\nimport { AddNewUserToChannelComponent } from '../add-new-user-to-channel/add-new-user-to-channel.component';\nimport { SidebarService } from '../../../shared/services/sidebar.service';\nimport { DialogRef } from '@angular/cdk/dialog';\n\n@Component({\n  selector: 'app-add-new-channel',\n  standalone: true,\n  imports: [MatDialogModule, FormsModule, CommonModule, AddNewUserToChannelComponent],\n  templateUrl: './add-new-channel.component.html',\n  styleUrl: './add-new-channel.component.scss'\n})\n\nexport class AddNewChannelComponent {\n  channelService: ChannelService = inject(ChannelService);\n  sidebarService: SidebarService = inject(SidebarService);\n  newChannel!: ChannelInfo;\n  inputs = {\n    'channelName': '',\n    'description': ''\n  }\n  channelNameExists: boolean = false;\n\n  constructor(public dialog: MatDialog, private dialogRef: DialogRef) { }\n\n  /**\n   * The `openDialog` function opens a dialog window to add new user to a channel using the\n   * `AddNewUserToChannelComponent`.\n   */\n  openDialog() {\n    this.dialog.open(AddNewUserToChannelComponent, { panelClass: ['add-user', 'box-radius', 'box-shadow'] });\n  }\n\n  /**\n   * The onSubmit function prepares new channel data, sets it in the channel service, and resets the\n   * form.\n   * @param {NgForm} createNewChannel - `createNewChannel` is a parameter of type `NgForm`.\n   * The function `onSubmit` is called when a form is submitted, and it resets the form\n   * afterwards.\n   */\n  async onSubmit(createNewChannel: NgForm) {\n    try {\n      this.sidebarService.channels.forEach(() => {\n        const checkTitle = (obj: { title: any; }) => obj.title === this.inputs.channelName;\n        if (this.sidebarService.channels.some(checkTitle)) {\n          throw new Error('Titel schon vorhanden !')\n        }\n      });\n    } catch (error) {\n      console.error(error);\n      createNewChannel.reset();\n      this.channelNameExists = true;\n      return\n    }\n    this.prepareNewChannelData();\n    this.channelService.newChannel = this.newChannel;\n    createNewChannel.reset();\n    this.dialogRef.close();\n    this.openDialog();\n  }\n\n  /**\n   * The function `prepareNewChannelData` creates a new channel object with data from input fields and\n   * converts it to JSON format.\n   */\n  prepareNewChannelData() {\n    let channelDummy = new ChannelData('');\n    channelDummy.setData(this.inputs.channelName, this.inputs.description, this.inputs.channelName);\n    this.newChannel = channelDummy.toJson();\n  }\n}\n\n    \n\n    \n        \n    \n    \n    \n        Channel erstellen\n    \n    \n        Channels dienen deinem Team zur Kommunikation. Am besten sollten sie themenbezogen sein \n            #marketing zum Beispiel.\n    \n    \n        \n             Channel-Name\n            \n        \n        \n            Inhalt erforderlich !\n        \n        \n            Dieser Channelname ist zu kurz oder existiert schon, bitte wähle einen anderen !\n        \n        \n             Beschreibung (optional)\n            \n        \n        \n            \n                Erstellen\n            \n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    Channel erstellen                Channels dienen deinem Team zur Kommunikation. Am besten sollten sie themenbezogen sein             #marketing zum Beispiel.                             Channel-Name                                        Inhalt erforderlich !                            Dieser Channelname ist zu kurz oder existiert schon, bitte wähle einen anderen !                             Beschreibung (optional)                                                        Erstellen                        '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'AddNewChannelComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AddNewUserToChannelComponent.html":{"url":"components/AddNewUserToChannelComponent.html","title":"component - AddNewUserToChannelComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AddNewUserToChannelComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-add-new-user-to-channel\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatDialogModule\n                            MatMenuModule\n                            MatButtonModule\n                            FormsModule\n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./add-new-user-to-channel.component.html\n            \n\n\n\n            \n                styleUrl\n                ./add-new-user-to-channel.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelService\n                            \n                            \n                                inputs\n                            \n                            \n                                menuOpened\n                            \n                            \n                                selectedUser\n                            \n                            \n                                sidebarService\n                            \n                            \n                                specificUser\n                            \n                            \n                                    \n                                    Optional\n                                specificUserInput\n                            \n                            \n                                    \n                                trigger\n                            \n                            \n                                userList\n                            \n                            \n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                focusOnUserInput\n                            \n                            \n                                getMenu\n                            \n                            \n                                    Async\n                                getUsersFromChannel\n                            \n                            \n                                onSubmit\n                            \n                            \n                                pushToSelection\n                            \n                            \n                                removeUserFromSelection\n                            \n                            \n                                searchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:31\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        focusOnUserInput\n                        \n                    \n                \n            \n            \n                \nfocusOnUserInput()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:104\n                        \n                    \n\n\n            \n                \n                        The function focusOnUserInput focuses on a specific user input element if it exists.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMenu\n                        \n                    \n                \n            \n            \n                \ngetMenu()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:74\n                        \n                    \n\n\n            \n                \n                        The getMenu function opens the menu by calling the openMenu method on the trigger object.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUsersFromChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsersFromChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:112\n                        \n                    \n\n\n            \n                \n                        The function getUsersFromChannel asynchronously retrieves users from a channel and adds them to a\nuser list.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmit\n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:41\n                        \n                    \n\n\n            \n                \n                        The onSubmit function checks if a specific user is selected and adds them to a new channel,\notherwise it retrieves users from an existing channel.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushToSelection\n                        \n                    \n                \n            \n            \n                \npushToSelection(user: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:83\n                        \n                    \n\n\n            \n                \n                        The function pushToSelection adds a user object to the selectedUser array, clears the userList\narray, and resets the specificUser input field.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \ntakes an object as a parameter named user and pushes it into selectedUser.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeUserFromSelection\n                        \n                    \n                \n            \n            \n                \nremoveUserFromSelection(user: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:96\n                        \n                    \n\n\n            \n                \n                        The function removeUserFromSelection removes a specified user from the selectedUser array.\nwhich means it can accept any data type as its value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user parameter in the removeUserFromSelection function is of type any,\nwhich means it can accept any data type as its value.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchUser\n                        \n                    \n                \n            \n            \n                \nsearchUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:59\n                        \n                    \n\n\n            \n                \n                        The searchUser function filters a list of users based on a specific user input and populates a new\nlist with matching users' information.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelService\n\n                    \n                \n                \n                    \n                        Default value : inject(ChannelService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inputs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    specificUser: ''\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        menuOpened\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sidebarService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SidebarService\n\n                    \n                \n                \n                    \n                        Default value : inject(SidebarService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        specificUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        specificUserInput\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('specificUserInput')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        trigger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatMenuTrigger\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild(MatMenuTrigger)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Default value : inject(UserService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, ViewChild, inject, viewChild } from '@angular/core';\nimport { FormsModule, NgForm } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { ChannelService } from '../../../shared/services/channel.service';\nimport { UserService } from '../../../shared/services/user.service';\nimport { MatMenuModule, MatMenuTrigger } from '@angular/material/menu';\nimport { MatButtonModule } from '@angular/material/button';\nimport { firebaseAppFactory } from '@angular/fire/app/app.module';\nimport { SidebarService } from '../../../shared/services/sidebar.service';\n\n@Component({\n  selector: 'app-add-new-user-to-channel',\n  standalone: true,\n  imports: [MatDialogModule, MatMenuModule, MatButtonModule, FormsModule, CommonModule],\n  templateUrl: './add-new-user-to-channel.component.html',\n  styleUrl: './add-new-user-to-channel.component.scss',\n})\nexport class AddNewUserToChannelComponent {\n  @ViewChild(\"specificUserInput\") specificUserInput?: { nativeElement: { focus: () => void; }; }\n  @ViewChild(MatMenuTrigger) trigger!: MatMenuTrigger;\n  channelService: ChannelService = inject(ChannelService);\n  sidebarService: SidebarService = inject(SidebarService);\n  userService: UserService = inject(UserService);\n  menuOpened: boolean = false;\n  specificUser: boolean;\n  userList: any[] = [];\n  selectedUser: any[] = [];\n  inputs = {\n    specificUser: ''\n  }\n\n  constructor() {\n    this.specificUser = false;\n  }\n\n  /**\n   * The onSubmit function checks if a specific user is selected and adds them to a new channel,\n   * otherwise it retrieves users from an existing channel.\n   */\n  onSubmit() {\n    const creatorId = sessionStorage.getItem('uid')\n    this.channelService.newChannel?.users.push(creatorId as string)\n    if (this.specificUser == true) {\n      this.selectedUser.forEach(user => {\n        this.channelService.newChannel?.users.push(user.uid)\n      });\n      this.channelService.createNewChannel(this.channelService.newChannel!);\n    } else {\n      this.getUsersFromChannel();\n      this.channelService.createNewChannel(this.channelService.newChannel!);\n    }\n  }\n\n  /**\n   * The `searchUser` function filters a list of users based on a specific user input and populates a new\n   * list with matching users' information.\n   */\n  searchUser() {\n    this.userList = [];\n    this.userService.allUsers.forEach(element => {\n      const name: string = element['name'];\n      const contains: boolean = name.toLocaleLowerCase().indexOf(this.inputs.specificUser.toLocaleLowerCase()) != -1;\n      const checkUid = (obj: { uid: any; }) => obj.uid === element['id'];\n      if (contains && this.inputs.specificUser != '' && !this.selectedUser.some(checkUid)) {\n        this.userList.push({ user: name, uid: element['id'], img: element['profilePicture'] });\n      }\n    });\n  }\n\n  /**\n   * The `getMenu` function opens the menu by calling the `openMenu` method on the `trigger` object.\n   */\n  getMenu() {\n    this.trigger.openMenu();\n  }\n\n  /**\n   * The function `pushToSelection` adds a user object to the selectedUser array, clears the userList\n   * array, and resets the specificUser input field.\n   * @param {object} user - takes an `object` as a parameter named `user` and pushes it into `selectedUser`.\n   */\n  pushToSelection(user: any) {\n    const checkUid = (obj: { uid: any; }) => obj.uid === user.uid;\n    if (!this.selectedUser.some(checkUid))\n      this.selectedUser.push(user);\n    this.userList = [];\n    this.inputs.specificUser = ''\n  }\n\n  /**\n   * The function `removeUserFromSelection` removes a specified user from the `selectedUser` array.\n   * @param {any} user - The `user` parameter in the `removeUserFromSelection` function is of type `any`,\n   * which means it can accept any data type as its value.\n   */\n  removeUserFromSelection(user: any) {\n    const contains = this.selectedUser.indexOf(user);\n    this.selectedUser.splice(contains, 1);\n  }\n\n  /**\n   * The function `focusOnUserInput` focuses on a specific user input element if it exists.\n   */\n  focusOnUserInput() {\n    this.specificUserInput?.nativeElement.focus();\n  }\n\n  /**\n   * The function `getUsersFromChannel` asynchronously retrieves users from a channel and adds them to a\n   * user list.\n   */\n  async getUsersFromChannel() {\n    this.userList = [];\n    await this.sidebarService.getUsersFromChannel();\n    this.sidebarService.channelUsers.forEach(user => {\n      this.channelService.newChannel?.users.push(user);\n    });\n  }\n}\n\n    \n\n    \n        \n    \n    \n    \n    \n        Leute hinzufügen\n    \n    \n        \n            \n            Alle Mitglieder von EntwicklerTeam hinzufügen\n        \n        \n            \n            Bestimmte Leute hinzufügen\n        \n        \n            \n                @for (user of selectedUser; track $index) {\n                \n                    \n                    {{user.user}}\n                    \n                \n                }\n                \n            \n        \n        \n            \n                Erstellen\n            \n        \n        \n            @if (userList.length != 0) {\n            \n                @for (user of userList; track $index) {\n                \n                    \n                    {{user.user}}\n                \n                }\n            \n            }\n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        Leute hinzufügen                                        Alle Mitglieder von EntwicklerTeam hinzufügen                                        Bestimmte Leute hinzufügen                                            @for (user of selectedUser; track $index) {                                                        {{user.user}}                                                    }                                                                        Erstellen                                        @if (userList.length != 0) {                            @for (user of userList; track $index) {                                                        {{user.user}}                                }                        }            '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'AddNewUserToChannelComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AddUserDialogComponent.html":{"url":"components/AddUserDialogComponent.html","title":"component - AddUserDialogComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AddUserDialogComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-add-user-dialog\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatDialogModule\n                            MatMenuModule\n                            CommonModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./add-user-dialog.component.html\n            \n\n\n\n            \n                styleUrl\n                ./add-user-dialog.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                addUser\n                            \n                            \n                                channelService\n                            \n                            \n                                firestore\n                            \n                            \n                                selectedUser\n                            \n                            \n                                    \n                                trigger\n                            \n                            \n                                userList\n                            \n                            \n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getMenu\n                            \n                            \n                                pushToSelection\n                            \n                            \n                                removeUserFromSelection\n                            \n                            \n                                searchUser\n                            \n                            \n                                    Async\n                                submitUser\n                            \n                            \n                                    Async\n                                updateChannelUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getMenu\n                        \n                    \n                \n            \n            \n                \ngetMenu()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:61\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushToSelection\n                        \n                    \n                \n            \n            \n                \npushToSelection(user: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:70\n                        \n                    \n\n\n            \n                \n                        The function pushToSelection adds a user object to the selectedUser array, clears the userList\narray, and resets the specificUser input field.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \ntakes an object as a parameter named user and pushes it into selectedUser.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeUserFromSelection\n                        \n                    \n                \n            \n            \n                \nremoveUserFromSelection(user: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:56\n                        \n                    \n\n\n            \n                \n                        The function removeUserFromSelection removes a specified user from the selectedUser array.\nwhich means it can accept any data type as its value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user parameter in the removeUserFromSelection function is of type any,\nwhich means it can accept any data type as its value.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchUser\n                        \n                    \n                \n            \n            \n                \nsearchUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:39\n                        \n                    \n\n\n            \n                \n                        The searchUser function filters a list of users based on a specific user input and populates a new\nlist with matching users' information.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        submitUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    submitUser(addedUser: NgForm)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                addedUser\n                                            \n                                                        NgForm\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateChannelUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateChannelUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:78\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        addUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    name: ''\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelService\n\n                    \n                \n                \n                    \n                        Default value : inject(ChannelService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firestore\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Firestore\n\n                    \n                \n                \n                    \n                        Default value : inject(Firestore)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        trigger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatMenuTrigger\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild(MatMenuTrigger)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Default value : inject(UserService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, ViewChild, inject } from '@angular/core';\nimport { FormsModule, NgForm } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { UserService } from '../../../shared/services/user.service';\nimport { MatMenuModule, MatMenuTrigger } from '@angular/material/menu';\nimport { Firestore, addDoc, arrayUnion, collection, doc, updateDoc } from '@angular/fire/firestore';\nimport { ChannelService } from '../../../shared/services/channel.service';\n\n@Component({\n  selector: 'app-add-user-dialog',\n  standalone: true,\n  imports: [MatDialogModule, MatMenuModule, CommonModule, FormsModule],\n  templateUrl: './add-user-dialog.component.html',\n  styleUrl: './add-user-dialog.component.scss',\n})\n\nexport class AddUserDialogComponent {\n  @ViewChild(MatMenuTrigger) trigger!: MatMenuTrigger;\n  userService: UserService = inject(UserService);\n  channelService: ChannelService = inject(ChannelService);\n  firestore: Firestore = inject(Firestore);\n  addUser = {\n    name: ''\n  }\n  userList: any[] = [];\n  selectedUser: any[] = [];\n\n  async submitUser(addedUser: NgForm) {\n    console.log(addedUser.name);\n    await this.updateChannelUsers();\n    addedUser.reset();\n  }\n\n  /**\n  * The `searchUser` function filters a list of users based on a specific user input and populates a new\n  * list with matching users' information.\n  */\n  searchUser() {\n    this.userList = [];\n    this.userService.allUsers.forEach(element => {\n      const name: string = element['name'];\n      const contains: boolean = name.toLocaleLowerCase().indexOf(this.addUser.name.toLocaleLowerCase()) != -1;\n      const checkUid = (obj: { id: any; }) => obj.id === element['id'];\n      if (contains && this.addUser.name != '' && !this.channelService.currentChannelUsers.some(checkUid)) {\n        this.userList.push({ user: name, uid: element['id'], img: element['profilePicture'] });\n      }\n    });\n  }\n\n  /**\n  * The function `removeUserFromSelection` removes a specified user from the `selectedUser` array.\n  * @param {any} user - The `user` parameter in the `removeUserFromSelection` function is of type `any`,\n  * which means it can accept any data type as its value.\n  */\n  removeUserFromSelection(user: any) {\n    const contains = this.selectedUser.indexOf(user);\n    this.selectedUser.splice(contains, 1);\n  }\n\n  getMenu() {\n    this.trigger.openMenu();\n  }\n\n  /**\n  * The function `pushToSelection` adds a user object to the selectedUser array, clears the userList\n  * array, and resets the specificUser input field.\n  * @param {object} user - takes an `object` as a parameter named `user` and pushes it into `selectedUser`.\n  */\n  pushToSelection(user: any) {\n    const checkUid = (obj: { uid: any; }) => obj.uid === user.uid;\n    if (!this.selectedUser.some(checkUid))\n      this.selectedUser.push(user);\n    this.userList = [];\n    this.addUser.name = ''\n  }\n\n  async updateChannelUsers() {\n    console.log(this.selectedUser);\n    this.selectedUser.forEach(async user => {\n      console.log(user);\n      await updateDoc(doc(this.firestore, \"Channels\", this.channelService.channelMsgData.collection), {\n        users: arrayUnion(user.uid)\n      });\n      await addDoc(collection(this.firestore, 'user', user.uid, 'userchannels'), { channelid: this.channelService.channelMsgData.collection });\n    });\n  }\n}\n\n    \n\n    \n        \n    \n    \n    \n        Leute hinzufügen\n    \n    \n        \n        Entwicklerteam\n    \n    \n        @for (user of selectedUser; track $index) {\n        \n            \n            {{user.user}}\n            \n        \n        }\n        \n    \n    \n        Min. 1 User erforderlich !\n    \n    \n        \n            Hinzfügen\n        \n    \n    \n        @if (userList.length != 0) {\n        \n            @for (user of userList; track $index) {\n            \n                \n                {{user.user}}\n            \n            }\n        \n        }\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    Leute hinzufügen                        Entwicklerteam                @for (user of selectedUser; track $index) {                                {{user.user}}                            }                        Min. 1 User erforderlich !                            Hinzfügen                        @if (userList.length != 0) {                    @for (user of userList; track $index) {                                            {{user.user}}                        }                }    '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'AddUserDialogComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AddUserToChannelDialogComponent.html":{"url":"components/AddUserToChannelDialogComponent.html","title":"component - AddUserToChannelDialogComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AddUserToChannelDialogComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-add-user-to-channel-dialog\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatDialogModule\n                            CommonModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./add-user-to-channel-dialog.component.html\n            \n\n\n\n            \n                styleUrl\n                ./add-user-to-channel-dialog.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addUser\n                            \n                            \n                                channelService\n                            \n                            \n                                    Public\n                                dialog\n                            \n                            \n                                    \n                                icon\n                            \n                            \n                                initialReferenceElementPosition\n                            \n                            \n                                stateEditChannelDialogOpenMobile\n                            \n                            \n                                stateService\n                            \n                            \n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getDmStatus\n                            \n                            \n                                    Async\n                                getOtherUserData\n                            \n                            \n                                openDialogAddUser\n                            \n                            \n                                    Async\n                                openDialogUserInfo\n                            \n                            \n                                refContainerPosition\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialog: MatDialog)\n                    \n                \n                        \n                            \n                                Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getDmStatus\n                        \n                    \n                \n            \n            \n                \ngetDmStatus(userIsLoggedIn: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userIsLoggedIn\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     \"online-div\" | \"offline-div\"\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOtherUserData\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOtherUserData(user: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openDialogAddUser\n                        \n                    \n                \n            \n            \n                \nopenDialogAddUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:58\n                        \n                    \n\n\n            \n                \n                        Opens dialog for adding user to channel over stateService\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        openDialogUserInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    openDialogUserInfo()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:38\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refContainerPosition\n                        \n                    \n                \n            \n            \n                \nrefContainerPosition()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('addUser', {read: ElementRef})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelService\n\n                    \n                \n                \n                    \n                        Default value : inject(ChannelService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatDialog\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('icon', {read: ElementRef})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initialReferenceElementPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stateEditChannelDialogOpenMobile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : this.stateService.getEditChannelDialogOpenMobile()\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stateService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StateService\n\n                    \n                \n                \n                    \n                        Default value : inject(StateService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Default value : inject(UserService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, ElementRef, ViewChild, inject } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { ChannelService } from '../../../shared/services/channel.service';\nimport { UserService } from '../../../shared/services/user.service';\nimport { StateService } from '../../../shared/services/state-service.service';\nimport { ShowProfileComponent } from '../../../shared/components/show-profile/show-profile.component';\n\n@Component({\n  selector: 'app-add-user-to-channel-dialog',\n  standalone: true,\n  imports: [MatDialogModule, CommonModule, FormsModule],\n  templateUrl: './add-user-to-channel-dialog.component.html',\n  styleUrl: './add-user-to-channel-dialog.component.scss'\n})\nexport class AddUserToChannelDialogComponent {\n  @ViewChild('addUser', { read: ElementRef }) addUser!: ElementRef;\n  @ViewChild('icon', { read: ElementRef }) icon!: ElementRef;\n  channelService: ChannelService = inject(ChannelService);\n  userService: UserService = inject(UserService);\n  stateService: StateService = inject(StateService);\n  initialReferenceElementPosition!: { top: number; left: number };\n  stateEditChannelDialogOpenMobile: boolean = this.stateService.getEditChannelDialogOpenMobile();\n  constructor(public dialog: MatDialog) {\n  }\n\n  getDmStatus(userIsLoggedIn: boolean) {\n    const loggedIn = userIsLoggedIn == true ? 'online-div' : 'offline-div';\n    return loggedIn;\n  }\n\n  async getOtherUserData(user: any) {\n    this.userService.otherUserInfo = user;\n    this.openDialogUserInfo();\n  }\n\n  async openDialogUserInfo() {\n    let dialogRef = this.dialog.open(ShowProfileComponent, { panelClass: ['show-profile-from-message', 'box-shadow', 'box-radius'] });\n    dialogRef.componentInstance.otherUser = true;\n    dialogRef.componentInstance.profileEditable = false;\n    dialogRef\n      .afterClosed()\n      .subscribe();\n  }\n\n  refContainerPosition() {\n    const referenceElement = this.addUser.nativeElement;\n    this.initialReferenceElementPosition = {\n      top: referenceElement.getBoundingClientRect().top,\n      left: referenceElement.getBoundingClientRect().right\n    };\n  }\n\n  /**\n   * Opens dialog for adding user to channel over stateService\n   */\n  openDialogAddUser() {\n    this.stateService.triggerAddUser();\n  }\n}\n\n\n    \n\n    \n        \n    \n    \n        Mitglieder\n    \n    \n         @for (user of channelService.currentChannelUsers; track $index) {\n            \n                \n                \n                \n                    {{user.name}}\n                    (Du)\n                \n            \n         }\n        \n            \n            Mitglieder hinzufügen\n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                Mitglieder                 @for (user of channelService.currentChannelUsers; track $index) {                                                                                {{user.name}}                    (Du)                                     }                                Mitglieder hinzufügen            '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'AddUserToChannelDialogComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            RouterOutlet\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n            \n                styleUrl\n                ./app.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                firestore\n                            \n                            \n                                title\n                            \n                            \n                                userService\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:17\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        firestore\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Firestore\n\n                    \n                \n                \n                    \n                        Default value : inject(Firestore)\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'da-bubble'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Default value : inject(UserService)\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterOutlet } from '@angular/router';\nimport { UserService } from './shared/services/user.service';\nimport { Firestore } from '@angular/fire/firestore';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [CommonModule, RouterOutlet],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n  title = 'da-bubble';\n  firestore: Firestore = inject(Firestore);\n  userService: UserService = inject(UserService);\n  constructor() { }\n}\n\n    \n\n    \n        \n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                firestore\n                            \n                            \n                                verified\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirmNewPassword\n                            \n                            \n                                    Async\n                                updateUserMail\n                            \n                            \n                                    Async\n                                verifyChange\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        confirmNewPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    confirmNewPassword(code: string, key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/auth.service.ts:47\n                        \n                    \n\n\n            \n                \n                        Update Password of the user who forogt his password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    string - oobCode of the url\n\n                                            \n                                        \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    string - changed password as a string\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUserMail\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserMail(mail: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/auth.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Update email of the user in firebase auth\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                mail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    string - prvoided email\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyChange\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyChange(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/auth.service.ts:20\n                        \n                    \n\n\n            \n                \n                        Function to login into firebase auth\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    string - key to login to firebase auth\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        firestore\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Firestore\n\n                    \n                \n                \n                    \n                        Default value : inject(Firestore)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/auth.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/auth.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, inject } from '@angular/core';\nimport { Firestore } from '@angular/fire/firestore';\nimport { User, getAuth, updateEmail } from \"firebase/auth\";\nimport { UserService } from './user.service';\nimport { confirmPasswordReset, signInWithEmailAndPassword } from '@angular/fire/auth';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  firestore: Firestore = inject(Firestore);\n  verified: boolean = false;\n\n  constructor(private userService: UserService) { }\n\n  /**\n   * Function to login into firebase auth\n   * @param key string - key to login to firebase auth\n   */\n  async verifyChange(key: string) {\n    const auth = getAuth();\n    console.log(this.userService.userInfo.email);\n    await signInWithEmailAndPassword(auth, this.userService.userInfo.email, key)\n      .then(() => {})\n      .catch((error) => {\n        console.error(error.code, error.message);\n      });\n  }\n\n  /**\n   * Update email of the user in firebase auth\n   * @param mail string - prvoided email\n   */\n  async updateUserMail(mail: string) {\n    const auth = getAuth();\n    updateEmail(auth.currentUser as User, mail).then(() => {})\n    .catch((error) => {\n      console.error(error);\n    });\n  }\n\n  /**\n   * Update Password of the user who forogt his password\n   * @param code string - oobCode of the url\n   * @param key string - changed password as a string\n   */\n  async confirmNewPassword(code: string, key: string) {\n    const auth = getAuth();\n    ;\n    await confirmPasswordReset(auth, code, key)\n      .then(() => {})\n      .catch((error) => {\n        console.error(error.code, '', error.message);\n      })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChannelData.html":{"url":"classes/ChannelData.html","title":"class - ChannelData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChannelData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/channels.class.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                collection\n                            \n                            \n                                description\n                            \n                            \n                                title\n                            \n                            \n                                users\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                setData\n                            \n                            \n                                    Public\n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(obj?: any)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/models/channels.class.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        obj\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        collection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/channels.class.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/channels.class.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/channels.class.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/channels.class.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setData\n                        \n                    \n                \n            \n            \n                \n                        \n                    setData(collection: string, description: string, title: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/models/channels.class.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                collection\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                description\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                title\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        toJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    toJson()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/models/channels.class.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { collection: string; description: string; title: string; users: {}; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class ChannelData {\n    collection: string;\n    description: string;\n    title: string;\n    users: string[];\n\n    constructor(obj?: any) {\n        this.collection = obj ? obj.collection : \"\";\n        this.description = obj ? obj.description : \"\";\n        this.title = obj ? obj.title : \"\";\n        this.users = obj ? obj.users : [];\n    }\n\n    public setData(collection: string, description: string, title: string) {\n        this.collection = collection;\n        this.description = description;\n        this.title = title;\n        this.users = [];\n    }\n\n    public toJson() {\n        return {\n            collection: this.collection,\n            description: this.description,\n            title: this.title,\n            users: this.users\n        };\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChannelInfo.html":{"url":"interfaces/ChannelInfo.html","title":"interface - ChannelInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChannelInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/channelinfo.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            collection\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            users\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        collection\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        collection:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        users\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        users:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ChannelInfo {\n    collection: string,\n    description: string,\n    title: string,\n    users: string[]\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChooseavatarComponent.html":{"url":"components/ChooseavatarComponent.html","title":"component - ChooseavatarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ChooseavatarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login/chooseavatar/chooseavatar.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-chooseavatar\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterLink\n                            CommonModule\n                                RegisterComponent\n                \n            \n\n            \n                styleUrls\n                ./chooseavatar.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./chooseavatar.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatars\n                            \n                            \n                                popupState\n                            \n                            \n                                selectedAvatar\n                            \n                            \n                                showLoading\n                            \n                            \n                                userName\n                            \n                            \n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delay\n                            \n                            \n                                    Async\n                                loadingScreen\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                refFile\n                            \n                            \n                                registerUser\n                            \n                            \n                                selectAvatar\n                            \n                            \n                                triggerFileInput\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(storageService: StorageService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/login/chooseavatar/chooseavatar.component.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        storageService\n                                                  \n                                                        \n                                                                        StorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delay\n                        \n                    \n                \n            \n            \n                \ndelay(ms: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/chooseavatar/chooseavatar.component.ts:107\n                        \n                    \n\n\n            \n                \n                        Creates a Promise that resolves after a specified delay.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ms\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe delay in milliseconds.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        loadingScreen\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadingScreen()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/chooseavatar/chooseavatar.component.ts:114\n                        \n                    \n\n\n            \n                \n                        Displays a loading screen for a specified duration and navigates to the home page.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/chooseavatar/chooseavatar.component.ts:50\n                        \n                    \n\n\n            \n                \n                        Initializes the component, setting the list of avatars and the user's name.\nCalled automatically by Angular on component initialization.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refFile\n                        \n                    \n                \n            \n            \n                \nrefFile(input: HTMLInputElement)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/chooseavatar/chooseavatar.component.ts:77\n                        \n                    \n\n\n            \n                \n                        Handles the event when a file is selected.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                input\n                                            \n                                                        HTMLInputElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe input element that triggered the file selection.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerUser\n                        \n                    \n                \n            \n            \n                \nregisterUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/chooseavatar/chooseavatar.component.ts:88\n                        \n                    \n\n\n            \n                \n                        Registers a new user.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectAvatar\n                        \n                    \n                \n            \n            \n                \nselectAvatar(avatar: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/chooseavatar/chooseavatar.component.ts:58\n                        \n                    \n\n\n            \n                \n                        Selects an avatar by setting the selectedAvatar property to the provided avatar.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                avatar\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe avatar to be selected.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        triggerFileInput\n                        \n                    \n                \n            \n            \n                \ntriggerFileInput()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/chooseavatar/chooseavatar.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Triggers the file input element to open the file selection dialog.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        avatars\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : this.storageService.avatars\n                    \n                \n                    \n                        \n                                Defined in src/app/login/chooseavatar/chooseavatar.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        popupState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'out'\n                    \n                \n                    \n                        \n                                Defined in src/app/login/chooseavatar/chooseavatar.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedAvatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '../../assets/img/login/default_profil_img.png'\n                    \n                \n                    \n                        \n                                Defined in src/app/login/chooseavatar/chooseavatar.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showLoading\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login/chooseavatar/chooseavatar.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/login/chooseavatar/chooseavatar.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Default value : inject(UserService)\n                    \n                \n                    \n                        \n                                Defined in src/app/login/chooseavatar/chooseavatar.component.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router, RouterLink } from '@angular/router';\nimport { StorageService } from '../../shared/services/storage.service';\nimport { UserService } from '../../shared/services/user.service';\nimport { User, sendEmailVerification, getAuth, createUserWithEmailAndPassword } from '@angular/fire/auth';\nimport { RegisterComponent } from '../register/register.component';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\n\n@Component({\n  selector: 'app-chooseavatar',\n  standalone: true,\n  imports: [RouterLink, CommonModule, RegisterComponent],\n  templateUrl: './chooseavatar.component.html',\n  styleUrls: ['./chooseavatar.component.scss'],\n  animations: [\n    trigger('slideInOut', [\n      state('in', style({\n        transform: 'translateX(0)',\n        opacity: '1'\n      })),\n      state('out', style({\n        transform: 'translateX(100%)' + 'rotate(-180deg)',\n        opacity: '0'\n      })),\n      transition('out => in', [\n        animate('0.3s ease-in-out')\n      ]),\n      transition('in => out', [\n        animate('0.3s ease-in-out')\n      ])\n    ])\n  ]\n})\n\nexport class ChooseavatarComponent implements OnInit {\n  selectedAvatar: string = '../../assets/img/login/default_profil_img.png';\n  popupState = 'out';\n  showLoading = false;\n  userName: string = '';\n  avatars: any = this.storageService.avatars;\n  userService: UserService = inject(UserService);\n\n  constructor(private storageService: StorageService, private router: Router) { }\n\n  /**\n   * Initializes the component, setting the list of avatars and the user's name.\n   * Called automatically by Angular on component initialization.\n   */\n  ngOnInit() {\n    this.userName = this.userService.createUserInfo.name;\n  }\n\n  /**\n   * Selects an avatar by setting the selectedAvatar property to the provided avatar.\n   * @param {string} avatar - The avatar to be selected.\n   */\n  selectAvatar(avatar: string) {\n    this.selectedAvatar = avatar;\n    this.storageService.files = {} as FileList;\n    this.userService.createUserInfo.profilePicture = this.selectedAvatar;\n  }\n\n  /**\n   * Triggers the file input element to open the file selection dialog.\n   */\n  triggerFileInput() {\n    const fileInput = document.querySelector('input[type=\"file\"]') as HTMLInputElement;\n    fileInput.click();\n    this.selectedAvatar;\n  }\n\n  /**\n   * Handles the event when a file is selected.\n   * @param {HTMLInputElement} input - The input element that triggered the file selection.\n   */\n  refFile(input: HTMLInputElement) {\n    this.storageService.onFileSelected(input);\n    const file = this.storageService.files?.item(0);\n    if (file) {\n      this.selectedAvatar = URL.createObjectURL(this.storageService.fileUrl);\n    }\n  }\n\n  /**\n   * Registers a new user.\n   */\n  registerUser() {\n    this.loadingScreen();\n    const auth = getAuth();\n    createUserWithEmailAndPassword(auth, this.userService.createUserInfo.email, this.userService.key)\n      .then(async (userCredential) => {\n        this.userService.createUserInfo.id = userCredential.user.uid;\n        await this.storageService.uploadFile(this.userService.createUserInfo.id);\n        /* await sendEmailVerification(auth.currentUser as User); */\n        await this.userService.createUserProfile();\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }\n\n  /**\n   * Creates a Promise that resolves after a specified delay.\n   * @param {number} ms - The delay in milliseconds.\n   */\n  delay(ms: number): Promise {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Displays a loading screen for a specified duration and navigates to the home page.\n   */\n  async loadingScreen() {\n    this.showLoading = true;\n    await this.delay(2500);\n    this.showLoading = false;\n    this.popupState = 'in';\n    await this.delay(1000);\n    this.popupState = 'out';\n    this.router.navigate(['/']);\n  }\n}\n\n    \n\n    \n        \n    \n        \n            \n            DaBubble\n        \n    \n    \n        \n        \n            Wähle deinen Avatar\n        \n        \n            \n        \n        {{userName}}\n        Aus der Liste wählen\n        \n            \n        \n        \n            eigenes Bild verwenden \n            Datei hochladen\n            \n        \n        \n            weiter\n        \n    \n    \n        Impressum\n        Datenschutz\n    \n    \n        \n            \n                \n                    \n                \n                \n                    \n                        \n                        \n                        \n                    \n                    \n                \n            \n            \n                \n                    \n                        \n                        \n                        \n                    \n                    \n                \n                \n                    \n                \n            \n        \n    \n    \n        Konto erfolgreich erstellt!\n    \n\n    \n\n    \n                \n                    ./chooseavatar.component.scss\n                \n                @import \"../../../styles.scss\";\n@import \"../login.component.scss\";\n\nmain {\n    padding: 40px 67px;\n\n    h3 {\n        font-size: 2rem;\n        font-weight: 700;\n    }\n}\n\n.login-btns {\n    @include dFlex($jc: end);\n    margin-top: 24px;\n}\n\n.title {\n    margin: 0;\n}\n\nspan {\n    @include dFlex($jc: start);\n    margin: 16px 0;\n    font-size: 1.1875rem;\n}\n\n.avatar {\n    text-align: center;\n    margin-bottom: 20px;\n    border-radius: 50%;\n    width: 168px;\n    height: 168px;\n    img {\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n        object-position: center;\n    }\n}\n\n.avatar-list {\n    @include dFlex($jc: space-between, $ai: center);\n    flex-wrap: wrap;\n    width: 100%;\n    height: 72px;\n    img {\n        height: 64px;\n        border-radius: 50%;\n        border: 4px solid transparent;\n        cursor: pointer;\n        &:hover {\n            border-color: #e6e6e6;\n            scale: 1.1;\n        }\n        &.selected {\n            border-color: $green;\n        }\n    }\n}\n\n.upload {\n    @include dFlex($ai: center);\n    width: 100%;\n    gap: 24px;\n    margin-top: 32px;\n    span {\n        width: max-content;\n    }\n    button {\n        background-color: $white;\n        color: $purple1;\n        border: 1px solid $purple1;\n        &:hover {\n            background-color: $purple1;\n            color: $white;\n        }\n    }\n}\n\n.loading-spinner {\n    position: absolute;\n    @include dFlex($ai: center, $jc: center);\n    z-index: 2;\n    width: 100%;\n    height: 100%;\n    background-color: #444df2ce;\n}\n\n.spinner {\n    @include dFlex($ai: center, $jc: center);\n    flex-direction: column;\n    gap: 10px;\n    width: 186px;\n    height: 184px;\n}\n\n.spinner-top {\n    @include dFlex($ai: end, $jc: center);\n    gap: 10px;\n}\n\n.spinner-bottom {\n    @include dFlex($ai: start);\n    gap: 10px;\n}\n\n.img-with-dots {\n    position: relative;\n    @include dFlex($ai: center, $jc: center);\n    gap: 10px;\n    img {\n        animation: scaleAnimationImg 1.4s infinite;\n    }\n}\n\n.dots {\n    position: absolute;\n    @include dFlex($ai: center, $jc: center);\n    gap: 10px;\n    z-index: 1;\n    img {\n        animation: scaleAnimationDots 1.4s infinite;\n    }\n}\n\n.blub {\n    width: 58px;\n    height: 57px;\n    img {\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n        object-position: center;\n        animation: scaleAnimationBlub 1.4s infinite;\n    }\n}\n\n@keyframes scaleAnimationDots {\n    0%,\n    100% {\n        transform: scale(1);\n    }\n    25% {\n        transform: scale(1.1);\n    }\n    50% {\n        transform: scale(0.8);\n    }\n    75% {\n        transform: scale(1.2);\n    }\n}\n\n@keyframes scaleAnimationImg {\n    0%,\n    100% {\n        transform: scale(1);\n    }\n    25% {\n        transform: scale(0.8);\n    }\n    50% {\n        transform: scale(1.1);\n    }\n    75% {\n        transform: scale(0.8);\n    }\n}\n\n@keyframes scaleAnimationBlub {\n    0%,\n    100% {\n        transform: scale(1);\n    }\n    25% {\n        transform: scale(1.1);\n    }\n    50% {\n        transform: scale(0.8);\n    }\n    75% {\n        transform: scale(1.1);\n    }\n}\n\n@media screen and (orientation: landscape) and (max-width: 1181px) {\n    main {\n        div {\n            h1 {\n                font-size: 2rem;\n            }\n        }\n    }\n\n    h3 {\n        font-size: 1.125rem;\n    }\n\n    span {\n        margin: 0 0 12px;\n    }\n\n    .avatar {\n        width: 100px;\n        height: 100px;\n    }\n\n    .login-btns {\n        margin: 0 0 8px;\n    }\n}\n\n@media screen and (max-width: 768px) {\n    .avatar {\n        width: 120px;\n        height: 120px;\n    }\n\n    .avatar-list {\n        justify-content: space-around;\n        img {\n            height: 60px;\n            width: 60px;\n        }\n    }\n\n    main {\n        h3 {\n            font-size: 1.25rem;\n        }\n    }\n\n    span {\n        font-size: 1.125rem;\n        margin: 12px 0;\n    }\n}\n\n@media screen and (max-width: 480px) {\n    .title {\n        h1 {\n            padding: 0 0 0 36px;\n        }\n    }\n\n    .login-btns {\n        margin: 16px 0;\n    }\n}\n\n@media screen and (max-width: 422px) {\n    .upload {\n        margin-top: 46px;\n        gap: 8px;\n    }\n\n    .avatar {\n        width: 100px;\n        height: 100px;\n    }\n\n    .avatar-list {\n        img {\n            height: 56px;\n        }\n    }\n\n    .login-btns {\n        margin: 12px 0 0 0;\n    }\n\n    span {\n        font-size: 1rem;\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                    DaBubble                                            Wähle deinen Avatar                                            {{userName}}        Aus der Liste wählen                                                eigenes Bild verwenden             Datei hochladen                                        weiter                        Impressum        Datenschutz                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Konto erfolgreich erstellt!    '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChooseavatarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ConfirmpasswordComponent.html":{"url":"components/ConfirmpasswordComponent.html","title":"component - ConfirmpasswordComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ConfirmpasswordComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login/confirmpassword/confirmpassword.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-confirmpassword\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            RouterLink\n                            ReactiveFormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./confirmpassword.component.html\n            \n\n\n\n            \n                styleUrl\n                ./confirmpassword.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authService\n                            \n                            \n                                    Optional\n                                code\n                            \n                            \n                                isDisabled\n                            \n                            \n                                key\n                            \n                            \n                                keyForm\n                            \n                            \n                                params\n                            \n                            \n                                popupState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                compareFormControl\n                            \n                            \n                                    Async\n                                confirmPassword\n                            \n                            \n                                mustMatch\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                popUpDisplay\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/login/confirmpassword/confirmpassword.component.ts:42\n                            \n                        \n\n                \n                    \n                            Initializes a new instance of the class with the given Router.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Router instance to use for navigation.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        compareFormControl\n                        \n                    \n                \n            \n            \n                \ncompareFormControl()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/confirmpassword/confirmpassword.component.ts:82\n                        \n                    \n\n\n            \n                \n                        Compares the values of the 'key' and 'repeatedKey' form controls and sets the 'isDisabled' property accordingly.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        confirmPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    confirmPassword()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/confirmpassword/confirmpassword.component.ts:73\n                        \n                    \n\n\n            \n                \n                        Confirms the password by retrieving the value from the 'key' form control,\nand then calls the confirmNewPassword method of the authService with the\nretrieved value and the code value. Finally, calls the popUpDisplay method.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mustMatch\n                        \n                    \n                \n            \n            \n                \nmustMatch(controlName: string, matchingControlName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/confirmpassword/confirmpassword.component.ts:105\n                        \n                    \n\n\n            \n                \n                        Validator function to check if two form controls have the same value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                controlName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe first form control.\n\n\n                                            \n                                        \n                                        \n                                                matchingControlName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe second form control.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                A validator that returns null if values match, or an error object if they don't.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/confirmpassword/confirmpassword.component.ts:59\n                        \n                    \n\n\n            \n                \n                        Initializes the form with 'key' and 'repeatedKey' fields.\nValidates 'repeatedKey' against 'key' using the 'mustMatch' validator.\nCalls 'compareFormControl' on 'repeatedKey' value changes.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        popUpDisplay\n                        \n                    \n                \n            \n            \n                \npopUpDisplay()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/confirmpassword/confirmpassword.component.ts:91\n                        \n                    \n\n\n            \n                \n                        Displays a popup for a short duration and then navigates to the root route.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthService\n\n                    \n                \n                \n                    \n                        Default value : inject(AuthService)\n                    \n                \n                    \n                        \n                                Defined in src/app/login/confirmpassword/confirmpassword.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                    \n                        \n                                Defined in src/app/login/confirmpassword/confirmpassword.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDisabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/login/confirmpassword/confirmpassword.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                    \n                        \n                                Defined in src/app/login/confirmpassword/confirmpassword.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keyForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/login/confirmpassword/confirmpassword.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        params\n                        \n                    \n                \n            \n                \n                    \n                        Type :     URLSearchParams\n\n                    \n                \n                    \n                        \n                                Defined in src/app/login/confirmpassword/confirmpassword.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        popupState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'out'\n                    \n                \n                    \n                        \n                                Defined in src/app/login/confirmpassword/confirmpassword.component.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport { RouterLink, Router } from '@angular/router';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { confirmPasswordReset, getAuth, updatePassword } from '@angular/fire/auth';\nimport { FormGroup, FormControl, ReactiveFormsModule, Validators, ValidatorFn, AbstractControl, ValidationErrors } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { AuthService } from '../../shared/services/auth.service';\n\n@Component({\n  selector: 'app-confirmpassword',\n  standalone: true,\n  imports: [CommonModule, RouterLink, ReactiveFormsModule],\n  templateUrl: './confirmpassword.component.html',\n  styleUrl: './confirmpassword.component.scss',\n  animations: [\n    trigger('slideInOut', [\n      state('in', style({\n        transform: 'translateX(0)',\n        opacity: '1'\n      })),\n      state('out', style({\n        transform: 'translateX(100%)' + 'rotate(180deg)',\n        opacity: '0'\n      })),\n      transition('out => in', [\n        animate('0.3s ease-in-out')\n      ]),\n      transition('in => out', [\n        animate('0.3s ease-in-out')\n      ])\n    ])\n  ]\n})\n\nexport class ConfirmpasswordComponent {\n  authService: AuthService = inject(AuthService);\n  popupState = 'out';\n  params!: URLSearchParams;\n  code?: string | null;\n  keyForm!: FormGroup;\n  key!: string | null;\n  isDisabled: boolean = true;\n\n  /**\n   * Initializes a new instance of the class with the given Router.\n   * @param {Router} router - The Router instance to use for navigation.\n   */\n  constructor(private router: Router) {\n    this.params = new URLSearchParams(window.location.search);\n    this.code = this.params.get('oobCode');\n    console.log(this.code);\n  }\n\n  /**\n   * Initializes the form with 'key' and 'repeatedKey' fields.\n   * Validates 'repeatedKey' against 'key' using the 'mustMatch' validator.\n   * Calls 'compareFormControl' on 'repeatedKey' value changes.\n   */\n  ngOnInit() {\n    this.keyForm = new FormGroup({\n      key: new FormControl(''),\n      repeatedKey: new FormControl('')\n    }, { validators: this.mustMatch('key', 'repeatedKey') });\n    this.keyForm.controls['repeatedKey'].valueChanges\n      .subscribe(() => { this.compareFormControl() })\n  }\n\n  /**\n   * Confirms the password by retrieving the value from the 'key' form control,\n   * and then calls the `confirmNewPassword` method of the `authService` with the\n   * retrieved value and the `code` value. Finally, calls the `popUpDisplay` method.\n   */\n  async confirmPassword() {\n    this.key = this.keyForm.controls['key'].value;\n    await this.authService.confirmNewPassword(this.code as string, this.key as string);\n    this.popUpDisplay();\n  }\n\n  /**\n   * Compares the values of the 'key' and 'repeatedKey' form controls and sets the 'isDisabled' property accordingly.\n   */\n  compareFormControl() {\n    const key1 = this.keyForm.controls['key'].value\n    const key2 = this.keyForm.controls['repeatedKey'].value\n    key1 === key2 ? this.isDisabled = false : this.isDisabled = true\n  }\n\n  /**\n   * Displays a popup for a short duration and then navigates to the root route.\n   */\n  popUpDisplay() {\n    this.popupState = 'in';\n    setTimeout(() => {\n      this.popupState = 'out';\n      this.router.navigate(['/']);\n    }, 1000);\n  }\n\n  /**\n   * Validator function to check if two form controls have the same value.\n   * @param {string} controlName - The first form control.\n   * @param {string} matchingControlName - The second form control.\n   * @return {ValidatorFn} A validator that returns null if values match, or an error object if they don't.\n   */\n  mustMatch(controlName: string, matchingControlName: string): ValidatorFn {\n    return (formGroup: AbstractControl): ValidationErrors | null => {\n      const control = formGroup.get(controlName);\n      const matchingControl = formGroup.get(matchingControlName);\n      if (!control || !matchingControl)\n        return null;\n      if (matchingControl.errors && !matchingControl.errors['mustMatch'])\n        return null;\n      if (control.value !== matchingControl.value) {\n        matchingControl.setErrors({ mustMatch: true });\n      } else {\n        matchingControl.setErrors(null);\n      }\n      return null;\n    };\n  }\n}\n\n\n\n    \n\n    \n        \n    \n        \n            \n            DaBubble\n        \n    \n    \n        \n        \n            Passwort zurücksetzen\n        \n        \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n        \n        \n            Passwort ändern\n        \n    \n    \n        Impressum\n        Datenschutz\n    \n    \n        Anmelden\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                    DaBubble                                            Passwort zurücksetzen                                                                                                                                                                                                    Passwort ändern                        Impressum        Datenschutz                Anmelden    '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'ConfirmpasswordComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/EditChannelDialogComponent.html":{"url":"components/EditChannelDialogComponent.html","title":"component - EditChannelDialogComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  EditChannelDialogComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-edit-channel-dialog\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatDialogModule\n                            CommonModule\n                            FormsModule\n                                AddUserToChannelDialogComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./edit-channel-dialog.component.html\n            \n\n\n\n            \n                styleUrl\n                ./edit-channel-dialog.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelNameExists\n                            \n                            \n                                channelService\n                            \n                            \n                                editChannelName\n                            \n                            \n                                editDescription\n                            \n                            \n                                firestore\n                            \n                            \n                                newChannelValues\n                            \n                            \n                                sidebarService\n                            \n                            \n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeEditChannelStatus\n                            \n                            \n                                changeEditDescriptionStatus\n                            \n                            \n                                    Async\n                                leaveChannel\n                            \n                            \n                                    Async\n                                saveEditChannelStatus\n                            \n                            \n                                    Async\n                                saveEditDescriptionStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changeEditChannelStatus\n                        \n                    \n                \n            \n            \n                \nchangeEditChannelStatus()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:36\n                        \n                    \n\n\n            \n                \n                        The function changeEditChannelStatus updates the name of a channel and sets a flag to indicate\nthat the channel name is being edited.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        changeEditDescriptionStatus\n                        \n                    \n                \n            \n            \n                \nchangeEditDescriptionStatus()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:72\n                        \n                    \n\n\n            \n                \n                        The function changeEditDescriptionStatus sets the newDescription property to the current channel\ndescription and sets editDescription to true.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        leaveChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    leaveChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:91\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveEditChannelStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveEditChannelStatus(channelName: NgForm)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:46\n                        \n                    \n\n\n            \n                \n                        The function saveEditChannelStatus updates a channel title and resets the form.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                        NgForm\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThis parameter is used to access and manipulate the form data within the function.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveEditDescriptionStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveEditDescriptionStatus(changedDescription: NgForm)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:83\n                        \n                    \n\n\n            \n                \n                        The function saveEditDescriptionStatus updates a channel description and resets the form.\nafter updating the channel description.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                changedDescription\n                                            \n                                                        NgForm\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIn this function, it is being used to reset the form\nafter updating the channel description.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelNameExists\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelService\n\n                    \n                \n                \n                    \n                        Default value : inject(ChannelService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editChannelName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firestore\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Firestore\n\n                    \n                \n                \n                    \n                        Default value : inject(Firestore)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newChannelValues\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    'name': '',\n    'newDescription': ''\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sidebarService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SidebarService\n\n                    \n                \n                \n                    \n                        Default value : inject(SidebarService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Default value : inject(UserService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, inject } from '@angular/core';\nimport { FormsModule, NgForm } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { AddUserToChannelDialogComponent } from '../add-user-to-channel-dialog/add-user-to-channel-dialog.component';\nimport { ChannelService } from '../../../shared/services/channel.service';\nimport { UserService } from '../../../shared/services/user.service';\nimport { Firestore, arrayRemove, deleteDoc, doc, getDocs, query, updateDoc } from '@angular/fire/firestore';\nimport { SidebarService } from '../../../shared/services/sidebar.service';\n\n@Component({\n  selector: 'app-edit-channel-dialog',\n  standalone: true,\n  imports: [MatDialogModule, CommonModule, FormsModule, AddUserToChannelDialogComponent],\n  templateUrl: './edit-channel-dialog.component.html',\n  styleUrl: './edit-channel-dialog.component.scss'\n})\nexport class EditChannelDialogComponent {\n  channelService: ChannelService = inject(ChannelService);\n  userService: UserService = inject(UserService);\n  sidebarService:SidebarService = inject(SidebarService);\n  firestore: Firestore = inject(Firestore);\n  editChannelName: boolean = false;\n  editDescription: boolean = false;\n  channelNameExists:boolean = false;\n\n  newChannelValues = {\n    'name': '',\n    'newDescription': ''\n  }\n\n  /**\n   * The function `changeEditChannelStatus` updates the name of a channel and sets a flag to indicate\n   * that the channel name is being edited.\n   */\n  changeEditChannelStatus() {\n    this.newChannelValues.name = this.channelService.channelMsgData.title;\n    this.editChannelName = true;\n  }\n\n\n  /**\n   * The function `saveEditChannelStatus` updates a channel title and resets the form.\n   * @param {NgForm} channelName - This parameter is used to access and manipulate the form data within the function.\n   */\n  async saveEditChannelStatus(channelName: NgForm) {\n    try {\n      this.sidebarService.channels.forEach(() => {\n        const checkTitle = (obj: { title: any; }) => obj.title === this.newChannelValues.name;\n        if (this.sidebarService.channels.some(checkTitle) || this.newChannelValues.name.length == 0) {\n          throw new Error('Titel schon vorhanden !')\n        }\n      });\n    } catch (error) {\n      console.log(error);\n      channelName.reset();\n      this.channelNameExists = true;\n      return\n    }\n    this.editChannelName = false;\n    await this.channelService.updateChannelTitle(this.newChannelValues.name);\n    console.log(this.newChannelValues.name);\n    this.channelNameExists = false;\n    channelName.reset();\n  }\n\n\n  /**\n   * The function `changeEditDescriptionStatus` sets the `newDescription` property to the current channel\n   * description and sets `editDescription` to true.\n   */\n  changeEditDescriptionStatus() {\n    this.newChannelValues.newDescription = this.channelService.channelMsgData.description;\n    this.editDescription = true;\n  }\n\n\n  /**\n   * The function `saveEditDescriptionStatus` updates a channel description and resets the form.\n   * @param {NgForm} changedDescription -  In this function, it is being used to reset the form\n   * after updating the channel description.\n   */\n  async saveEditDescriptionStatus(changedDescription: NgForm) {\n    this.editDescription = false;\n    await this.channelService.updateChannelDescription(this.newChannelValues.newDescription);\n    console.log(this.newChannelValues.newDescription);\n    changedDescription.reset();\n  }\n\n\n  async leaveChannel() {\n    await updateDoc(doc(this.firestore, \"Channels\", this.channelService.channelMsgData.collection), {\n      users: arrayRemove(this.userService.currentUser)\n    });\n    const querySnapshot = await getDocs(query(this.userService.refUserChannels()));\n    querySnapshot.forEach(async (dataset) => {\n      if (dataset.data()['channelid'] === this.channelService.channelMsgData.collection ) {\n        await deleteDoc(doc(this.firestore, \"user\", this.userService.currentUser!, 'userchannels', dataset.id));\n      }\n    });\n    this.channelService.resetMessageType();\n  }\n\n}\n\n    \n\n    \n        \n    \n    \n        # {{channelService.channelMsgData.title}}\n    \n    \n        \n            Channel-Name\n            Bearbeiten\n            Speichern\n        \n        \n            \n                \n                {{channelService.channelMsgData.title}}\n                \n                    \n                \n            \n            \n                Dieser Channelname ist zu kurz oder existiert schon, bitte wähle einen anderen !\n            \n        \n\n    \n    \n        \n            Beschreibung\n            Bearbeiten\n            Speichern\n        \n        \n            {{channelService.channelMsgData.description}}\n            \n                \n            \n            \n            \n                 Erstellt von\n                \n                     {{channelService.channelMsgData.creator}}\n                \n            \n        \n    \n    \n    \n    \n    \n        \n            Channel verlassen\n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                # {{channelService.channelMsgData.title}}                            Channel-Name            Bearbeiten            Speichern                                                            {{channelService.channelMsgData.title}}                                                                                            Dieser Channelname ist zu kurz oder existiert schon, bitte wähle einen anderen !                                                Beschreibung            Bearbeiten            Speichern                            {{channelService.channelMsgData.description}}                                                                                 Erstellt von                                     {{channelService.channelMsgData.creator}}                                                                            Channel verlassen            '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'EditChannelDialogComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmojiService.html":{"url":"injectables/EmojiService.html","title":"injectable - EmojiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmojiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/emoji.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                editMessage\n                            \n                            \n                                editMessageThread\n                            \n                            \n                                messageEdit\n                            \n                            \n                                openEditMessageToggle\n                            \n                            \n                                openEditMessageToggleThread\n                            \n                            \n                                selectedEmojis\n                            \n                            \n                                showEmojiPickerArray\n                            \n                            \n                                showEmojiPickerArrayThread\n                            \n                            \n                                threadMessageEdit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addCheckEmoji\n                            \n                            \n                                addEmoji\n                            \n                            \n                                addEmojiToEditedMessage\n                            \n                            \n                                addNewEmoji\n                            \n                            \n                                addRaisedHandsEmoji\n                            \n                            \n                                checkAndAddEmoji\n                            \n                            \n                                initMaps\n                            \n                            \n                                toggleEditMode\n                            \n                            \n                                updateMessage\n                            \n                            \n                                updateReaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(channelService: ChannelService, threadService: ThreadService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/emoji.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        channelService\n                                                  \n                                                        \n                                                                        ChannelService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        threadService\n                                                  \n                                                        \n                                                                        ThreadService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addCheckEmoji\n                        \n                    \n                \n            \n            \n                \naddCheckEmoji(event: any, currentMessageIndex: number, messageId: string, userId: string, source: \"channel\" | \"thread\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/emoji.service.ts:120\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                currentMessageIndex\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                messageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                source\n                                            \n                                                        \"channel\" | \"thread\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addEmoji\n                        \n                    \n                \n            \n            \n                \naddEmoji(event: any, index: number, messageId: string, userId: string, source: \"channel\" | \"thread\", calledFromFunction: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/emoji.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                messageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                source\n                                            \n                                                        \"channel\" | \"thread\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                calledFromFunction\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addEmojiToEditedMessage\n                        \n                    \n                \n            \n            \n                \naddEmojiToEditedMessage(index: number, emoji: any, source: \"channel\" | \"thread\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/emoji.service.ts:128\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                emoji\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                source\n                                            \n                                                        \"channel\" | \"thread\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addNewEmoji\n                        \n                    \n                \n            \n            \n                \naddNewEmoji(index: number, emoji: string, userMatched: boolean, userId: string, source: \"channel\" | \"thread\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/emoji.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                emoji\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userMatched\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                source\n                                            \n                                                        \"channel\" | \"thread\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addRaisedHandsEmoji\n                        \n                    \n                \n            \n            \n                \naddRaisedHandsEmoji(event: any, currentMessageIndex: number, messageId: string, userId: string, source: \"channel\" | \"thread\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/emoji.service.ts:124\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                currentMessageIndex\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                messageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                source\n                                            \n                                                        \"channel\" | \"thread\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        checkAndAddEmoji\n                        \n                    \n                \n            \n            \n                \ncheckAndAddEmoji(index: number, emoji: string, userId: string, userMatched: boolean, source: \"channel\" | \"thread\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/emoji.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                emoji\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userMatched\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                source\n                                            \n                                                        \"channel\" | \"thread\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initMaps\n                        \n                    \n                \n            \n            \n                \ninitMaps(source: \"channel\" | \"thread\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/emoji.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                source\n                                            \n                                                        \"channel\" | \"thread\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleEditMode\n                        \n                    \n                \n            \n            \n                \ntoggleEditMode()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/emoji.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateMessage\n                        \n                    \n                \n            \n            \n                \nupdateMessage(index: number, source: \"channel\" | \"thread\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/emoji.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                source\n                                            \n                                                        \"channel\" | \"thread\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateReaction\n                        \n                    \n                \n            \n            \n                \nupdateReaction(currentEmojiIndex: number, currentMessageIndex: number, currentEmoji: string, messageId: string, userId: string, source: \"channel\" | \"thread\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/emoji.service.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                currentEmojiIndex\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                currentMessageIndex\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                currentEmoji\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                messageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                source\n                                            \n                                                        \"channel\" | \"thread\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        editMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     boolean[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/emoji.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editMessageThread\n                        \n                    \n                \n            \n                \n                    \n                        Type :     boolean[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/emoji.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messageEdit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/emoji.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openEditMessageToggle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     boolean[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/emoji.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openEditMessageToggleThread\n                        \n                    \n                \n            \n                \n                    \n                        Type :     boolean[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/emoji.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedEmojis\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/emoji.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showEmojiPickerArray\n                        \n                    \n                \n            \n                \n                    \n                        Type :     boolean[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/emoji.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showEmojiPickerArrayThread\n                        \n                    \n                \n            \n                \n                    \n                        Type :     boolean[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/emoji.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        threadMessageEdit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/emoji.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ChannelService } from '../../shared/services/channel.service';\nimport { ThreadService } from '../../shared/services/thread.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmojiService {\n\n  constructor(private channelService: ChannelService, private threadService: ThreadService) { }\n\n  selectedEmojis: string[] = [];\n  messageEdit: boolean = false;\n  threadMessageEdit: boolean = false;\n  openEditMessageToggle: boolean[] = [];\n  openEditMessageToggleThread: boolean[] = [];\n  editMessage: boolean[] = [];\n  editMessageThread: boolean[] = [];\n  showEmojiPickerArray: boolean[] = [];\n  showEmojiPickerArrayThread: boolean[] = [];\n\n  toggleEditMode() {\n    this.messageEdit = !this.messageEdit;\n  }\n\n  initMaps(source: 'channel' | 'thread') {\n    const messages = source === 'channel' ? this.channelService.messages : this.threadService.messages;\n    this.showEmojiPickerArray = messages.map(() => false);\n    this.showEmojiPickerArrayThread = messages.map(() => false);\n    this.openEditMessageToggle = messages.map(() => false);\n    this.openEditMessageToggleThread = messages.map(() => false);\n    this.editMessage = messages.map(() => false);\n    this.editMessageThread = messages.map(() => false);\n  }\n\n  addEmoji(event: any, index: number, messageId: string, userId: string, source: 'channel' | 'thread', calledFromFunction: boolean = false) {\n    const emoji = event['emoji']['native'];\n    const userMatched = messageId === userId;\n    const messages = source === 'channel' ? this.channelService.messages : this.threadService.messages;\n    const foundEmoji = this.checkAndAddEmoji(index, emoji, userId, userMatched, source);\n    if (this.messageEdit || this.threadMessageEdit) {\n      this.addEmojiToEditedMessage(index, emoji, source);\n      return;\n    }\n    if (!foundEmoji) {\n      this.addNewEmoji(index, emoji, userMatched, userId, source);\n      this.updateMessage(index, source);\n    }\n  }\n\n  checkAndAddEmoji(index: number, emoji: string, userId: string, userMatched: boolean, source: 'channel' | 'thread'): boolean {\n    const messages = source === 'channel' ? this.channelService.messages : this.threadService.messages;\n    for (let i = 0; i  1) {\n          messages[currentMessageIndex].emoji[currentEmojiIndex].count--;\n          const userIndex = emojiUserIds.indexOf(userId);\n          if (userIndex !== -1) {\n            emojiUserIds.splice(userIndex, 1);\n          }\n        }\n      } else {\n        messages[currentMessageIndex].emoji[currentEmojiIndex].count++;\n        emojiUserIds.push(userId);\n      }\n    }\n    this.updateMessage(currentMessageIndex, source);\n  }\n\n  addCheckEmoji(event: any, currentMessageIndex: number, messageId: string, userId: string, source: 'channel' | 'thread'): void {\n    this.addEmoji(event, currentMessageIndex, messageId, userId, source, true);\n  }\n\n  addRaisedHandsEmoji(event: any, currentMessageIndex: number, messageId: string, userId: string, source: 'channel' | 'thread'): void {\n    this.addEmoji(event, currentMessageIndex, messageId, userId, source, true);\n  }\n\n  addEmojiToEditedMessage(index: number, emoji: any, source: 'channel' | 'thread') {\n    const messages = source === 'channel' ? this.channelService.messages : this.threadService.messages;\n    messages[index].message += emoji;\n    messages[index].edited = true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HeaderComponent.html":{"url":"components/HeaderComponent.html","title":"component - HeaderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HeaderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/header/header.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-header\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            MatMenuModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./header.component.html\n            \n\n\n\n            \n                styleUrl\n                ./header.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelService\n                            \n                            \n                                    Public\n                                dialog\n                            \n                            \n                                    \n                                headlineDesktop\n                            \n                            \n                                    \n                                headlineMobile\n                            \n                            \n                                messageList\n                            \n                            \n                                searchMsg\n                            \n                            \n                                sidebarService\n                            \n                            \n                                    \n                                trigger\n                            \n                            \n                                userList\n                            \n                            \n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getMenu\n                            \n                            \n                                getUserStatus\n                            \n                            \n                                goBack\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                openDialog\n                            \n                            \n                                scrollToMessage\n                            \n                            \n                                searchMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialog: MatDialog, mainsectionComponent: MainsectionComponent)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/components/header/header.component.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mainsectionComponent\n                                                  \n                                                        \n                                                                        MainsectionComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getMenu\n                        \n                    \n                \n            \n            \n                \ngetMenu()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/header/header.component.ts:97\n                        \n                    \n\n\n            \n                \n                        The getMenu function opens the menu by triggering the openMenu method.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserStatus\n                        \n                    \n                \n            \n            \n                \ngetUserStatus()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/header/header.component.ts:64\n                        \n                    \n\n\n            \n                \n                        Function returns the class of user status for online indicator div\n\n\n                        \n                            Returns :     \"online-div\" | \"offline-div\"\n\n                        \n                            \n                                class as a string\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        goBack\n                        \n                    \n                \n            \n            \n                \ngoBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/header/header.component.ts:73\n                        \n                    \n\n\n            \n                \n                        The goBack function shows the side navigation, displays the headline on desktop, and hides the\nheadline on mobile.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/header/header.component.ts:43\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/header/header.component.ts:46\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openDialog\n                        \n                    \n                \n            \n            \n                \nopenDialog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/header/header.component.ts:53\n                        \n                    \n\n\n            \n                \n                        The openDialog function opens a dialog box for the UserMenuDialogComponent at a specific position\nand subscribes to the afterClosed event.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scrollToMessage\n                        \n                    \n                \n            \n            \n                \nscrollToMessage(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/header/header.component.ts:86\n                        \n                    \n\n\n            \n                \n                        The scrollToMessage function scrolls the message container to a specific message based on its index.\nwant to scroll to in the message container.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index parameter represents the index of the message you\nwant to scroll to in the message container.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchMessage\n                        \n                    \n                \n            \n            \n                \nsearchMessage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/header/header.component.ts:105\n                        \n                    \n\n\n            \n                \n                        The searchMessage function filters messages based on a search term and populates a list with\nmatching messages.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelService\n\n                    \n                \n                \n                    \n                        Default value : inject(ChannelService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/header.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatDialog\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/header.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        headlineDesktop\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('headlineDesktop', {static: true, read: ElementRef})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/header.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        headlineMobile\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('headlineMobile', {static: true, read: ElementRef})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/header.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messageList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/header.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchMsg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    msg: ''\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/header.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sidebarService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SidebarService\n\n                    \n                \n                \n                    \n                        Default value : inject(SidebarService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/header.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        trigger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatMenuTrigger\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild(MatMenuTrigger)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/header.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/header.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Default value : inject(UserService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/header.component.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject, AfterViewInit, ViewChild, ElementRef, OnInit } from '@angular/core';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogTitle,\n  MatDialogContent,\n} from '@angular/material/dialog';\nimport { MatMenuModule, MatMenuTrigger } from '@angular/material/menu';\nimport { UserMenuDialogComponent } from './user-menu-dialog/user-menu-dialog.component';\nimport { UserService } from '../../services/user.service';\nimport { CommonModule } from '@angular/common';\nimport { MainsectionComponent } from '../../../mainsection/mainsection.component';\nimport { SidebarComponent } from '../../../mainsection/sidebar/sidebar.component';\nimport { SidebarService } from '../../services/sidebar.service';\nimport { ChannelService } from '../../services/channel.service';\nimport { FormsModule, NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'app-header',\n  standalone: true,\n  imports: [CommonModule, MatMenuModule, FormsModule],\n  templateUrl: './header.component.html',\n  styleUrl: './header.component.scss'\n})\n\nexport class HeaderComponent implements AfterViewInit, OnInit {\n  @ViewChild(MatMenuTrigger) trigger!: MatMenuTrigger;\n  userService: UserService = inject(UserService);\n  sidebarService: SidebarService = inject(SidebarService);\n  channelService: ChannelService = inject(ChannelService);\n  userList: any[] = [];\n  messageList: any[] = [];\n  searchMsg = {\n    msg: ''\n  };\n  @ViewChild('headlineMobile', { static: true, read: ElementRef }) headlineMobile!: ElementRef;\n  @ViewChild('headlineDesktop', { static: true, read: ElementRef }) headlineDesktop!: ElementRef;\n\n  constructor(public dialog: MatDialog, private mainsectionComponent: MainsectionComponent) { }\n\n  ngAfterViewInit(): void {\n  }\n\n  ngOnInit(): void {\n  }\n\n  /**\n   * The `openDialog` function opens a dialog box for the UserMenuDialogComponent at a specific position\n   * and subscribes to the afterClosed event.\n   */\n  openDialog() {\n    this.dialog.open(UserMenuDialogComponent, { panelClass: ['user-menu', 'box-shadow', 'box-radius-right-corner'] })\n      .afterClosed()\n      .subscribe();\n  }\n\n  /**\n   * Function returns the class of user status for online indicator div\n   * @param type string - to determine which value should be returned\n   * @returns class as a string\n   */\n  getUserStatus() {\n    const loggedIn = this.userService.userInfo.isLoggedIn == true ? \"online-div\" : \"offline-div\";\n    return loggedIn\n  }\n\n  /**\n   * The `goBack` function shows the side navigation, displays the headline on desktop, and hides the\n   * headline on mobile.\n   */\n  goBack() {\n    this.mainsectionComponent.showSidenav();\n    this.mainsectionComponent.toggleElement.nativeElement.classList.remove('rotate-toggle');\n    this.mainsectionComponent.rotateToggle = false;\n    this.headlineDesktop.nativeElement.style.display = 'block';\n    this.headlineMobile.nativeElement.style.display = 'none';\n  }\n\n  /**\n   * The scrollToMessage function scrolls the message container to a specific message based on its index.\n   * @param {number} index - The `index` parameter represents the index of the message you\n   * want to scroll to in the message container.\n   */\n  scrollToMessage(index: number) {\n    const msgElement = document.getElementById('singleMessage-' + index);\n    const topPos = msgElement!.offsetTop;\n    document.getElementById('messageContainer')!.scrollTo({ top: topPos, behavior: 'smooth' });\n    this.searchMsg.msg = '';\n    this.messageList = [];\n  }\n\n  /**\n   * The `getMenu` function opens the menu by triggering the `openMenu` method.\n   */\n  getMenu() {\n    this.trigger.openMenu();\n  }\n\n  /**\n   * The `searchMessage` function filters messages based on a search term and populates a list with\n   * matching messages.\n   */\n  searchMessage() {\n    this.messageList = [];\n    this.channelService.messages.forEach((element, i) => {\n      const message: string = element['message'];\n      const contains: boolean = message.toLocaleLowerCase().indexOf(this.searchMsg.msg.toLocaleLowerCase()) != -1;\n      element.index = i;\n      if (contains && this.searchMsg.msg != '') {\n        this.messageList.push(element);\n      }\n    });\n  }\n}\n\n    \n\n    \n        \n    \n        \n            \n        \n        \n            \n        \n         Devspace \n    \n    \n        \n    \n    \n        \n            \n            \n        \n        \n            @if (messageList.length!= 0) {\n                \n                    Nachrichten:\n                    @for (message of messageList; track message.name; let i = $index) {\n                    \n                        \n                        \n                            {{message.name}}\n                            Nachricht: {{(message.message).substring(0,15)}}...\n                        \n                    \n                    }\n                \n            }\n        \n    \n    \n        {{userService.userInfo.name}}\n        \n            \n            \n        \n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                     Devspace                                                                                     @if (messageList.length!= 0) {                                    Nachrichten:                    @for (message of messageList; track message.name; let i = $index) {                                                                                                {{message.name}}                            Nachricht: {{(message.message).substring(0,15)}}...                                                                }                            }                        {{userService.userInfo.name}}                                                    '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'HeaderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ImprintComponent.html":{"url":"components/ImprintComponent.html","title":"component - ImprintComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ImprintComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/imprint/imprint.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-imprint\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterLink\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./imprint.component.html\n            \n\n\n\n            \n                styleUrl\n                ./imprint.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterLink } from '@angular/router';\n\n@Component({\n  selector: 'app-imprint',\n  standalone: true,\n  imports: [RouterLink],\n  templateUrl: './imprint.component.html',\n  styleUrl: './imprint.component.scss'\n})\nexport class ImprintComponent { }\n\n    \n\n    \n        \n    \n        \n            \n            DaBubble\n        \n    \n    \n        \n        Impressum\n        \n            Vorname Nachname\n            Straße, Hausnummer\n            Postleitzahl, Stadt\n            Land\n        \n        Kontakt\n        \n            E-Mail: `email adresse`\n            Telefon: `000000000`\n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                    DaBubble                                Impressum                    Vorname Nachname            Straße, Hausnummer            Postleitzahl, Stadt            Land                Kontakt                    E-Mail: `email adresse`            Telefon: `000000000`            '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'ImprintComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MainsectionComponent.html":{"url":"components/MainsectionComponent.html","title":"component - MainsectionComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MainsectionComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mainsection/mainsection.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-mainsection\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                                HeaderComponent\n                                SidebarComponent\n                                ChannelComponent\n                                ThreadComponent\n                                HeaderComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./mainsection.component.html\n            \n\n\n\n            \n                styleUrl\n                ./mainsection.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                changeDetector\n                            \n                            \n                                    \n                                channelElement\n                            \n                            \n                                    \n                                headerComponent\n                            \n                            \n                                    Private\n                                hideThreadSubscription\n                            \n                            \n                                    \n                                overlayElement\n                            \n                            \n                                resizeListenerService\n                            \n                            \n                                rotateToggle\n                            \n                            \n                                    \n                                sidebarElement\n                            \n                            \n                                sidenavOpen\n                            \n                            \n                                    \n                                threadBarElement\n                            \n                            \n                                threadOpen\n                            \n                            \n                                threadService\n                            \n                            \n                                    \n                                toggleElement\n                            \n                            \n                                unsubProfile\n                            \n                            \n                                unsubUserChannels\n                            \n                            \n                                unsubUserList\n                            \n                            \n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeSides\n                            \n                            \n                                displayHeadlineMobile\n                            \n                            \n                                getToggleText\n                            \n                            \n                                hanldeCloseMobile\n                            \n                            \n                                hideSidenav\n                            \n                            \n                                hideThread\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onResize\n                            \n                            \n                                rotateIndicator\n                            \n                            \n                                showSidenav\n                            \n                            \n                                showThread\n                            \n                            \n                                sidesStatus\n                            \n                            \n                                updateOverlayDisplay\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/mainsection/mainsection.component.ts:37\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeSides\n                        \n                    \n                \n            \n            \n                \ncloseSides()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:200\n                        \n                    \n\n\n            \n                \n                        Toggles between hiding the side navigation menu and showing the thread based on the state of 'rotateToggle'.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        displayHeadlineMobile\n                        \n                    \n                \n            \n            \n                \ndisplayHeadlineMobile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:185\n                        \n                    \n\n\n            \n                \n                        Toggles the display of the mobile headline and desktop headline based on screen size and sidenav state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getToggleText\n                        \n                    \n                \n            \n            \n                \ngetToggleText()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:224\n                        \n                    \n\n\n            \n                \n                        A function that returns the text 'schließen' if 'sidenavOpen' is true, otherwise returns 'öffnen'.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The text 'schließen' or 'öffnen'\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hanldeCloseMobile\n                        \n                    \n                \n            \n            \n                \nhanldeCloseMobile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:213\n                        \n                    \n\n\n            \n                \n                        A function that handles the closing of the mobile view by executing various actions.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hideSidenav\n                        \n                    \n                \n            \n            \n                \nhideSidenav()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:165\n                        \n                    \n\n\n            \n                \n                        Adds the 'hide-show' class to the thread bar element (app-sidebar) to hide the thread.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hideThread\n                        \n                    \n                \n            \n            \n                \nhideThread()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:175\n                        \n                    \n\n\n            \n                \n                        Adds the 'hide-show' class to the thread bar element (app-thread) to hide the thread.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:71\n                        \n                    \n\n\n            \n                \n                        Initializes the component after the view has been initialized.\nAdds the 'margin-right' class to the sidebar element to make it appear on the right side.\nChecks the current screen size and the states of the sidenav and thread, and hides the sidenav and rotates the toggle element if necessary.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:231\n                        \n                    \n\n\n            \n                \n                        Executes cleanup actions when the component is destroyed.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onResize\n                        \n                    \n                \n            \n            \n                \nonResize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:58\n                        \n                    \n\n\n            \n                \n                        Executes a resize operation after a delay of 100 milliseconds.\nCalls the updateOverlayDisplay, displayHeadlineMobile, and sidesStatus methods.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rotateIndicator\n                        \n                    \n                \n            \n            \n                \nrotateIndicator()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:111\n                        \n                    \n\n\n            \n                \n                        Toggles the CSS class 'rotate-toggle' on the toggleElement and\nshows/hides the side navigation menu based on the current state of the rotateToggle boolean variable.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showSidenav\n                        \n                    \n                \n            \n            \n                \nshowSidenav()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:146\n                        \n                    \n\n\n            \n                \n                        Toggles the visibility of the app-sidebar based on the current screen size.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showThread\n                        \n                    \n                \n            \n            \n                \nshowThread()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:126\n                        \n                    \n\n\n            \n                \n                        Toggles the visibility of the app-thread based on the current screen size.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sidesStatus\n                        \n                    \n                \n            \n            \n                \nsidesStatus()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:86\n                        \n                    \n\n\n            \n                \n                        Checks the current screen size and the states of the sidenav and thread, and hides the sidenav and rotates the toggle element if necessary.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateOverlayDisplay\n                        \n                    \n                \n            \n            \n                \nupdateOverlayDisplay()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:97\n                        \n                    \n\n\n            \n                \n                        Updates the display of the overlay element based on the current screen size and sidenav/thread states.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        changeDetector\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        channelElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('channel', {read: ElementRef})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        headerComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HeaderComponent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild(HeaderComponent)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hideThreadSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : new Subscription\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        overlayElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('overlay', {read: ElementRef})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resizeListenerService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResizeListenerService\n\n                    \n                \n                \n                    \n                        Default value : inject(ResizeListenerService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rotateToggle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sidebarElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('sidebar', {read: ElementRef})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sidenavOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        threadBarElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('threadBar', {read: ElementRef})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        threadOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        threadService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ThreadService\n\n                    \n                \n                \n                    \n                        Default value : inject(ThreadService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        toggleElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('toggle', {read: ElementRef})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubProfile\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubUserChannels\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubUserList\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Default value : inject(UserService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnDestroy, inject, ViewChild, ElementRef, AfterViewInit, ChangeDetectorRef } from '@angular/core';\nimport { SidebarComponent } from './sidebar/sidebar.component';\nimport { ChannelComponent } from './channel/channel.component';\nimport { ThreadComponent } from './thread/thread.component';\nimport { CommonModule } from '@angular/common';\nimport { HeaderComponent } from '../shared/components/header/header.component';\nimport { UserService } from '../shared/services/user.service';\nimport { ResizeListenerService } from '../shared/services/resize-listener.service';\nimport { Subscription } from 'rxjs';\nimport { ThreadService } from '../shared/services/thread.service';\n\n@Component({\n  selector: 'app-mainsection',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent, SidebarComponent, ChannelComponent, ThreadComponent, HeaderComponent],\n  templateUrl: './mainsection.component.html',\n  styleUrl: './mainsection.component.scss'\n})\n\nexport class MainsectionComponent implements AfterViewInit, OnDestroy {\n  userService: UserService = inject(UserService);\n  resizeListenerService: ResizeListenerService = inject(ResizeListenerService);\n  threadService: ThreadService = inject(ThreadService);\n  private hideThreadSubscription: Subscription = new Subscription;\n  private changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n  rotateToggle: boolean = false;\n  sidenavOpen: boolean = true;\n  threadOpen: boolean = false;\n  unsubProfile;\n  unsubUserChannels;\n  unsubUserList;\n  @ViewChild('toggle', { read: ElementRef }) toggleElement!: ElementRef;\n  @ViewChild('sidebar', { read: ElementRef }) sidebarElement!: ElementRef;\n  @ViewChild('threadBar', { read: ElementRef }) threadBarElement!: ElementRef;\n  @ViewChild('channel', { read: ElementRef }) channelElement!: ElementRef;\n  @ViewChild('overlay', { read: ElementRef }) overlayElement!: ElementRef;\n  @ViewChild(HeaderComponent) headerComponent!: HeaderComponent;\n\n  constructor() {\n    this.resizeListenerService.registerResizeCallback(this.onResize.bind(this));\n    this.unsubProfile = this.userService.retrieveUserProfile();\n    this.unsubUserChannels = this.userService.retrieveUserChannels();\n    this.unsubUserList = this.userService.retrieveAllUsers();\n    this.userService.userLoggedIn();\n  }\n\n  ngOnInit(): void {\n    this.hideThreadSubscription = this.threadService.hideThread$.subscribe(() => {\n      this.hideThread();\n    })\n    this.onResize();\n  }\n\n  /**\n   * Executes a resize operation after a delay of 100 milliseconds.\n   * Calls the `updateOverlayDisplay`, `displayHeadlineMobile`, and `sidesStatus` methods.\n   */\n  onResize() {\n    setTimeout(() => {\n      this.updateOverlayDisplay();\n      this.displayHeadlineMobile();\n      this.sidesStatus();\n    }, 100);\n  }\n\n  /**\n   * Initializes the component after the view has been initialized.\n   * Adds the 'margin-right' class to the sidebar element to make it appear on the right side.\n   * Checks the current screen size and the states of the sidenav and thread, and hides the sidenav and rotates the toggle element if necessary.\n   */\n  ngAfterViewInit() {\n    this.hideThread();\n    this.sidebarElement.nativeElement.classList.add('margin-right');\n    if (this.resizeListenerService.mdScreen) {\n      this.hideSidenav();\n      this.hideThread();\n      this.rotateToggle = true;\n      this.toggleElement.nativeElement.classList.add('rotate-toggle');\n    }\n    this.changeDetector.detectChanges();\n  }\n\n  /**\n   * Checks the current screen size and the states of the sidenav and thread, and hides the sidenav and rotates the toggle element if necessary.\n   */\n  sidesStatus() {\n    if (!this.resizeListenerService.lgScreen && this.sidenavOpen == true && this.threadOpen == true) {\n      this.hideSidenav();\n      this.toggleElement.nativeElement.classList.add('rotate-toggle');\n      this.rotateToggle = true;\n    }\n  }\n\n  /**\n   * Updates the display of the overlay element based on the current screen size and sidenav/thread states.\n   */\n  updateOverlayDisplay() {\n    if (this.overlayElement && this.overlayElement.nativeElement) {\n      if (this.resizeListenerService.mdScreen && this.sidenavOpen == true || this.resizeListenerService.mdScreen && this.threadOpen == true) {\n        this.overlayElement.nativeElement.style.display = 'block';\n      } else {\n        this.overlayElement.nativeElement.style.display = 'none';\n      }\n    }\n  }\n\n  /**\n   * Toggles the CSS class 'rotate-toggle' on the toggleElement and\n   * shows/hides the side navigation menu based on the current state of the rotateToggle boolean variable.\n   */\n  rotateIndicator() {\n    if (this.rotateToggle == false) {\n      this.toggleElement.nativeElement.classList.add('rotate-toggle');\n      this.hideSidenav();\n      this.rotateToggle = true;\n    } else {\n      this.toggleElement.nativeElement.classList.remove('rotate-toggle');\n      this.showSidenav();\n      this.rotateToggle = false;\n    }\n  }\n\n  /**\n   * Toggles the visibility of the app-thread based on the current screen size.\n   */\n  showThread() {\n    this.threadBarElement.nativeElement.classList.add('margin-left');\n    this.threadOpen = true;\n    if (this.resizeListenerService.xmdScreen == true) {\n      this.threadBarElement.nativeElement.classList.remove('hide-show');\n      this.hideSidenav();\n      this.toggleElement.nativeElement.classList.add('rotate-toggle');\n      this.rotateToggle = true;\n    } else {\n      this.threadBarElement.nativeElement.classList.remove('hide-show');\n    }\n    if (this.resizeListenerService.mdScreen == true) {\n      this.overlayElement.nativeElement.style.display = 'block';\n    }\n    this.displayHeadlineMobile();\n  }\n\n  /**\n   * Toggles the visibility of the app-sidebar based on the current screen size.\n   */\n  showSidenav() {\n    this.sidebarElement.nativeElement.classList.add('margin-right');\n    this.sidenavOpen = true;\n    if (this.resizeListenerService.xmdScreen == true) {\n      this.sidebarElement.nativeElement.classList.remove('hide-show');\n      this.hideThread();\n    } else {\n      this.sidebarElement.nativeElement.classList.remove('hide-show');\n    }\n    if (this.resizeListenerService.mdScreen == true) {\n      this.hideThread();\n      this.overlayElement.nativeElement.style.display = 'block';\n    }\n    this.displayHeadlineMobile();\n  }\n\n  /**\n   * Adds the 'hide-show' class to the thread bar element (app-sidebar) to hide the thread.\n   */\n  hideSidenav() {\n    this.sidebarElement.nativeElement.classList.remove('margin-right');\n    this.sidebarElement.nativeElement.classList.add('hide-show');\n    this.sidenavOpen = false;\n    this.overlayElement.nativeElement.style.display = 'none';\n  }\n\n  /**\n   * Adds the 'hide-show' class to the thread bar element (app-thread) to hide the thread.\n   */\n  hideThread() {\n    this.threadBarElement.nativeElement.classList.remove('margin-left');\n    this.threadBarElement.nativeElement.classList.add('hide-show');\n    this.threadOpen = false;\n    this.overlayElement.nativeElement.style.display = 'none';\n  }\n\n  /**\n   * Toggles the display of the mobile headline and desktop headline based on screen size and sidenav state.\n   */\n  displayHeadlineMobile() {\n    if (this.resizeListenerService.smScreen && this.sidenavOpen == false) {\n      this.headerComponent.headlineMobile.nativeElement.style.display = 'flex';\n      this.headerComponent.headlineDesktop.nativeElement.style.display = 'none';\n      this.toggleElement.nativeElement.classList.add('rotate-toggle');\n      this.rotateToggle = true;\n    } else {\n      this.headerComponent.headlineMobile.nativeElement.style.display = 'none';\n      this.headerComponent.headlineDesktop.nativeElement.style.display = 'flex';\n    }\n  }\n\n  /**\n   * Toggles between hiding the side navigation menu and showing the thread based on the state of 'rotateToggle'.\n   */\n  closeSides() {\n    if (this.rotateToggle == false) {\n      this.hideSidenav();\n      this.rotateToggle = true;\n      this.toggleElement.nativeElement.classList.add('rotate-toggle');\n    } else {\n      this.hideThread();\n    }\n  }\n\n  /**\n   * A function that handles the closing of the mobile view by executing various actions.\n   */\n  hanldeCloseMobile() {\n    this.closeSides();\n    this.hideSidenav();\n    this.hideThread();\n    this.displayHeadlineMobile();\n  }\n\n  /**\n   * A function that returns the text 'schließen' if 'sidenavOpen' is true, otherwise returns 'öffnen'.\n   * @return {string} The text 'schließen' or 'öffnen'\n   */\n  getToggleText(): string {\n    return this.sidenavOpen ? 'schließen' : 'öffnen';\n  }\n\n  /**\n   * Executes cleanup actions when the component is destroyed.\n   */\n  ngOnDestroy() {\n    console.log('hallo');\n    this.unsubProfile();\n    this.unsubUserChannels();\n    this.unsubUserList();\n    this.userService.userLoggedOut();\n    this.hideThreadSubscription.unsubscribe();\n    this.resizeListenerService.unregisterResizeCallback(this.onResize.bind(this));\n  }\n}\n    \n\n    \n        \n    \n    \n        \n        \n        \n        \n    \n\n\n    Workspace-Menü {{getToggleText()}}\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                Workspace-Menü {{getToggleText()}}    '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'MainsectionComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MessageData.html":{"url":"classes/MessageData.html","title":"class - MessageData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MessageData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/message.class.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                emoji\n                            \n                            \n                                id\n                            \n                            \n                                message\n                            \n                            \n                                msgId\n                            \n                            \n                                name\n                            \n                            \n                                profilePicture\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(obj?: any)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/models/message.class.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        obj\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/message.class.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/message.class.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/message.class.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/message.class.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        msgId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/message.class.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/message.class.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profilePicture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/message.class.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/message.class.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        toJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    toJson()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/models/message.class.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { id: string; name: string; profilePicture: string; message: string; timestamp: number; email: string; emoji: []; msgId: string; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class MessageData {\n    id: string;\n    msgId: string;\n    name: string;\n    profilePicture: string;\n    message: string;\n    timestamp: number;\n    email: string;\n    emoji: [];\n\n    constructor(obj?: any) {\n        this.id = obj ? obj.id : \"\";\n        this.name = obj ? obj.name : \"\";\n        this.profilePicture = obj ? obj.profilePicture : \"\";\n        this.message = obj ? obj.message : \"\";\n        this.timestamp = Date.now();\n        this.email = obj ? obj.email : \"\"\n        this.emoji = obj ? obj.emoji : [];\n        this.msgId = obj ? obj.msgId : \"\";\n    }\n\n    public toJson() {\n        return {\n            id: this.id,\n            name: this.name,\n            profilePicture: this.profilePicture,\n            message: this.message,\n            timestamp: this.timestamp,\n            email: this.email,\n            emoji: this.emoji,\n            msgId: this.msgId\n        };\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MutationObserverService.html":{"url":"injectables/MutationObserverService.html","title":"injectable - MutationObserverService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MutationObserverService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/mutation.observer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                domChanges\n                            \n                            \n                                    Public\n                                domChanges$\n                            \n                            \n                                    Private\n                                initialChildCount\n                            \n                            \n                                    Private\n                                mutationObserver\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                disconnect\n                            \n                            \n                                    Public\n                                observe\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/mutation.observer.service.ts:12\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        disconnect\n                        \n                    \n                \n            \n            \n                \n                        \n                    disconnect()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/mutation.observer.service.ts:60\n                        \n                    \n\n\n            \n                \n                        The disconnect function in TypeScript disconnects the mutation observer if it is currently active.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        observe\n                        \n                    \n                \n            \n            \n                \n                        \n                    observe(element: ElementRef, isThread: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/mutation.observer.service.ts:28\n                        \n                    \n\n\n            \n                \n                        The function observes changes in a DOM element's children and scrolls to the bottom if new children\nare added.\nElementRef, which is a reference to a DOM element in Angular. It is used to observe changes in the\nelement's children and scroll to the bottom if isThread is set to true.\nflag that indicates whether the element being observed is a thread. If isThread is set to true,\nthe method will scroll the element to the bottom when new content is added.\nnot execute the rest of the code block.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                        ElementRef\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe element parameter in the observe method is of type\nElementRef, which is a reference to a DOM element in Angular. It is used to observe changes in the\nelement's children and scroll to the bottom if isThread is set to true.\n\n\n                                            \n                                        \n                                        \n                                                isThread\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                            \n                                                    \nThe isThread parameter in the observe method is a boolean\nflag that indicates whether the element being observed is a thread. If isThread is set to true,\nthe method will scroll the element to the bottom when new content is added.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                If the element or element.nativeElement is falsy, the function will return early and\nnot execute the rest of the code block.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        domChanges\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/mutation.observer.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        domChanges$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.domChanges.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/mutation.observer.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initialChildCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/mutation.observer.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mutationObserver\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MutationObserver\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/mutation.observer.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ElementRef } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MutationObserverService {\n\n  private mutationObserver!: MutationObserver;\n  private domChanges = new Subject();\n  public domChanges$: Observable = this.domChanges.asObservable();\n  private initialChildCount: number = 0;\n\n  constructor() { }\n\n/**\n * The function observes changes in a DOM element's children and scrolls to the bottom if new children\n * are added.\n * @param {ElementRef} element - The `element` parameter in the `observe` method is of type\n * `ElementRef`, which is a reference to a DOM element in Angular. It is used to observe changes in the\n * element's children and scroll to the bottom if `isThread` is set to true.\n * @param {boolean} [isThread=false] - The `isThread` parameter in the `observe` method is a boolean\n * flag that indicates whether the element being observed is a thread. If `isThread` is set to `true`,\n * the method will scroll the element to the bottom when new content is added.\n * @returns If the `element` or `element.nativeElement` is falsy, the function will return early and\n * not execute the rest of the code block.\n */\n  public observe(element: ElementRef, isThread: boolean = false): void {\n    if (!element || !element.nativeElement) {\n      return;\n    }\n    if (isThread) {\n      element.nativeElement.scrollTop = element.nativeElement.scrollHeight;\n    }\n    this.initialChildCount = element.nativeElement.children.length;\n    this.mutationObserver = new MutationObserver((mutations) => {\n      mutations.forEach(mutation => {\n        const currentChildCount = element.nativeElement.children.length;\n        if (currentChildCount > this.initialChildCount) {\n          this.initialChildCount = currentChildCount;\n          element.nativeElement.scrollTop = element.nativeElement.scrollHeight;\n          this.domChanges.next([mutation]);\n        }\n        else if (currentChildCount != this.initialChildCount) {\n          this.initialChildCount = element.nativeElement.children.length;\n        }\n      });\n    });\n\n    this.mutationObserver.observe(element.nativeElement, {\n      childList: true,\n      subtree: false,\n      characterData: false\n    });\n  }\n\n/**\n * The `disconnect` function in TypeScript disconnects the mutation observer if it is currently active.\n */\n  public disconnect(): void {\n    if (this.mutationObserver) {\n      this.mutationObserver.disconnect();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/OutsideclickDirective.html":{"url":"directives/OutsideclickDirective.html","title":"directive - OutsideclickDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  OutsideclickDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/outsideclick.directive.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [appOutsideclick]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                onClick\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                outsideClick\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:click\n                            \n                        \n                    \n                \n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_elementRef: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/outsideclick.directive.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _elementRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        outsideClick\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/outsideclick.directive.ts:8\n                            \n                        \n            \n        \n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            document:click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' '$event.target' \n                \n            \n\n\n            \n                \n                    Defined in src/app/outsideclick.directive.ts:13\n                \n            \n\n\n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        onClick\n                        \n                    \n                \n            \n            \n                \n                        \n                    onClick(event: MouseEvent, targetElement: HTMLElement)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:click', ['$event', '$event.target'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/outsideclick.directive.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        MouseEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                targetElement\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, EventEmitter, HostListener, Output, ElementRef, } from '@angular/core';\n\n@Directive({\n  selector: '[appOutsideclick]',\n  standalone: true\n})\nexport class OutsideclickDirective {\n  @Output() outsideClick = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef) { }\n\n  @HostListener('document:click', ['$event', '$event.target'])\n  public onClick(event: MouseEvent, targetElement: HTMLElement): void {\n    if (!targetElement) {\n      return;\n    }\n    const isEditMessageSpanClicked = targetElement.classList.contains('edit-message-span');\n    const clickedInside = this._elementRef.nativeElement.contains(targetElement);\n    if (!clickedInside && !isEditMessageSpanClicked) {\n      this.outsideClick.emit(event);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RegisterComponent.html":{"url":"components/RegisterComponent.html","title":"component - RegisterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  RegisterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login/register/register.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-register\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            RouterLink\n                            ReactiveFormsModule\n                \n            \n\n            \n                styleUrls\n                ./register.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./register.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errorMessage\n                            \n                            \n                                firestore\n                            \n                            \n                                firstFocus\n                            \n                            \n                                isFormSubmitted\n                            \n                            \n                                    \n                                nameInput\n                            \n                            \n                                registerForm\n                            \n                            \n                                showPassword\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                continue\n                            \n                            \n                                getFirebaseErrorMessage\n                            \n                            \n                                handleRegistrationError\n                            \n                            \n                                    Async\n                                handleUserRegistration\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                onInput\n                            \n                            \n                                togglePasswordVisibility\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/app/login/register/register.component.ts:23\n                            \n                        \n\n                \n                    \n                            Constructs a RegisterComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Angular Router service.\n\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe UserService dependency.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        continue\n                        \n                    \n                \n            \n            \n                \n                        \n                    continue()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/register/register.component.ts:68\n                        \n                    \n\n\n            \n                \n                        Asynchronously continues the registration process.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                Resolves after the registration process is completed.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getFirebaseErrorMessage\n                        \n                    \n                \n            \n            \n                \ngetFirebaseErrorMessage(errorCode: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/register/register.component.ts:120\n                        \n                    \n\n\n            \n                \n                        Returns an error message based on the provided Firebase error code.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                errorCode\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Firebase error code.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The corresponding error message.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRegistrationError\n                        \n                    \n                \n            \n            \n                \nhandleRegistrationError(error: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/register/register.component.ts:105\n                        \n                    \n\n\n            \n                \n                        Handles the registration error based on the type of error received.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe error object to be handled.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleUserRegistration\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUserRegistration(email: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/register/register.component.ts:88\n                        \n                    \n\n\n            \n                \n                        Asynchronously handles the registration process for a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe email address of the user.\n\n\n                                            \n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \nA promise that resolves when the registration process is complete.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/register/register.component.ts:43\n                        \n                    \n\n\n            \n                \n                        Executes after the view has been initialized.\nSets a timeout to focus on the 'nameInput' element after 1 second.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onInput\n                        \n                    \n                \n            \n            \n                \nonInput()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/register/register.component.ts:52\n                        \n                    \n\n\n            \n                \n                        The onInput function sets the firstFocus property to false.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        togglePasswordVisibility\n                        \n                    \n                \n            \n            \n                \ntogglePasswordVisibility()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/register/register.component.ts:60\n                        \n                    \n\n\n            \n                \n                        Toggles the visibility of the password field.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/login/register/register.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firestore\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Firestore\n\n                    \n                \n                \n                    \n                        Default value : inject(Firestore)\n                    \n                \n                    \n                        \n                                Defined in src/app/login/register/register.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/login/register/register.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFormSubmitted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login/register/register.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nameInput\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('nameInput')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/login/register/register.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/login/register/register.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login/register/register.component.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterLink, Router } from '@angular/router';\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { FirebaseError } from '@angular/fire/app';\nimport { Firestore } from '@angular/fire/firestore';\nimport { UserService } from '../../shared/services/user.service';\n\n@Component({\n  selector: 'app-register',\n  standalone: true,\n  imports: [CommonModule, RouterLink, ReactiveFormsModule],\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements AfterViewInit {\n  firestore: Firestore = inject(Firestore);\n  @ViewChild('nameInput') nameInput!: ElementRef;\n  errorMessage: string = '';\n  firstFocus: boolean = true;\n  showPassword: boolean = false;\n  isFormSubmitted: boolean = false;\n  registerForm: FormGroup;\n\n  /**\n   * Constructs a RegisterComponent.\n   * @param {Router} router - The Angular Router service.\n   * @param {UserService} userService - The UserService dependency.\n   */\n  constructor(private router: Router, private userService: UserService = inject(UserService)) {\n    this.registerForm = new FormGroup({\n      name: new FormControl('', [Validators.required, Validators.minLength(5)]),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [Validators.required, Validators.minLength(8)]),\n      privacyCheck: new FormControl(false, [Validators.requiredTrue])\n    });\n  }\n\n  /**\n   * Executes after the view has been initialized.\n   * Sets a timeout to focus on the 'nameInput' element after 1 second.\n   */\n  ngAfterViewInit(): void {\n    setTimeout(() => {\n      this.nameInput.nativeElement.focus();\n    }, 1000);\n  }\n\n  /**\n   * The `onInput` function sets the `firstFocus` property to false.\n   */\n  onInput() {\n    this.firstFocus = false;\n    this.errorMessage = '';\n  }\n\n  /**\n  * Toggles the visibility of the password field.\n  */\n  togglePasswordVisibility() {\n    this.showPassword = !this.showPassword;\n  }\n\n  /**\n   * Asynchronously continues the registration process.\n   * @return {Promise} Resolves after the registration process is completed.\n   */\n  async continue() {\n    this.isFormSubmitted = true;\n    if (this.registerForm.valid) {\n      const email = this.registerForm.controls['email'].value;\n      const name = this.registerForm.controls['name'].value;\n      try {\n        await this.handleUserRegistration(email, name);\n      } catch (error) {\n        this.handleRegistrationError(error);\n      }\n    }\n  }\n\n  /**\n   * Asynchronously handles the registration process for a new user.\n   * @param {string} email - The email address of the user.\n   * @param {string} name - The name of the user.\n   * @return {Promise} - A promise that resolves when the registration process is complete.\n   * @throws {Error} - Throws an error if a user with the same email or name already exists.\n   */\n  async handleUserRegistration(email: string, name: string) {\n    const { emailExists, nameExists } = await this.userService.checkRegisteredUser(email, name);\n    if (emailExists) {\n      throw new Error(\"Ein Benutzer mit dieser E-Mail-Adresse existiert bereits.\");\n    } else if (nameExists) {\n      throw new Error(\"Ein Benutzer mit diesem Namen existiert bereits.\");\n    } else {\n      await this.userService.prepareDataNewUser(this.registerForm.value);\n      this.userService.key = this.registerForm.controls['password'].value;\n      this.router.navigate(['/register/chooseavatar']);\n    }\n  }\n\n  /**\n   * Handles the registration error based on the type of error received.\n   * @param {any} error - The error object to be handled.\n   */\n  handleRegistrationError(error: any) {\n    if (error instanceof FirebaseError) {\n      this.errorMessage = this.getFirebaseErrorMessage(error.code);\n    } else if (error instanceof Error) {\n      this.errorMessage = error.message;\n    } else {\n      this.errorMessage = \"Ein unerwarteter Fehler ist aufgetreten.\";\n    }\n  }\n\n  /**\n   * Returns an error message based on the provided Firebase error code.\n   * @param {string} errorCode - The Firebase error code.\n   * @return {string} The corresponding error message.\n   */\n  getFirebaseErrorMessage(errorCode: string): string {\n    switch (errorCode) {\n      case 'auth/email-already-in-use':\n        return \"Die E-Mail-Adresse wird bereits verwendet.\";\n      case 'auth/invalid-email':\n        return \"Ungültige E-Mail-Adresse.\";\n      default:\n        return \"Ein Fehler ist bei der Registrierung aufgetreten.\";\n    }\n  }\n}\n\n    \n\n    \n        \n    \n        \n            \n            DaBubble\n        \n    \n    \n        \n        \n            Konto erstellen\n            Mit deinem Namen und deiner E-Mail-Adresse hast du dein neues DABubble-Konto.\n        \n        \n            \n                \n                    \n                    \n                \n                \n                    Bitte Name und Nachname eingeben, mindestens 5 Zeichen\n                \n            \n            \n                \n                    \n                    \n                \n                \n                    Bitte eine gültige E-Mail-Adresse eingeben\n                \n            \n            \n                \n                    \n                    \n                \n                \n                     mindestens 8 Zeichen\n                    {{ errorMessage }}\n                \n            \n            \n                \n                    \n                    Ich stimme der Datenschutzerklärungzu.\n                \n                \n                    \n                        Bitte stimme der Datenschutzerklarung zu\n                \n            \n            \n                weiter\n            \n        \n    \n    \n        Impressum\n        Datenschutz\n    \n\n    \n\n    \n                \n                    ./register.component.scss\n                \n                @import \"../../../styles.scss\";\n@import \"../login.component.scss\";\n\nmain {\n    padding: 40px 50px;\n}\n\n.login-btns {\n    @include dFlex($jc: end);\n    margin-top: 24px;\n}\n\n.form-group:nth-child(4) {\n    margin-bottom: 0;\n}\n\n.checkbox {\n    @include dFlex($jc: flex-start, $ai: center);\n    flex-direction: row;\n    width: 100%;\n    gap: 8px;\n\n    input {\n        appearance: none;\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        width: 24px;\n        height: 24px;\n        margin-top: 2px;\n        border: none;\n        border-radius: 0;\n        background-image: url(/assets/img/login/checkbox.png);\n        background-size: contain;\n        background-repeat: no-repeat;\n        cursor: pointer;\n\n        &:hover {\n            background-image: url(/assets/img/login/checkbox_hover.png);\n        }\n\n        &:checked {\n            background-image: url(/assets/img/login/checkbox_checked.png);\n        }\n\n        &:checked:hover {\n            background-image: url(/assets/img/login/checkbox_checked_hover.png);\n        }\n    }\n\n    span {\n        margin: 0;\n        @include dFlex($jc: flex-start, $ai: center);\n        font-family: \"Open Sans\" !important;\n        color: #42526e;\n        a {\n            margin-top: 2px;\n            padding: 4px;\n            &:hover {\n                font-weight: 400;\n                scale: 1;\n                border: 1px solid transparent;\n            }\n        }\n    }\n}\n\n@media screen and (orientation: landscape) and (max-width: 1181px) {\n    .login-btns {\n        margin: 0;\n    }\n}\n\n@media screen and (max-width: 400px) {\n    .checkbox {\n        align-items: flex-start;\n        span{\n            margin-top: 2px;\n            flex-direction: column;\n            align-items: flex-start;\n            a{\n                padding: 0 4px 0 0;\n            }\n        }\n    }\n\n    .login-btns {\n        margin: 19px 0 0;\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                    DaBubble                                            Konto erstellen            Mit deinem Namen und deiner E-Mail-Adresse hast du dein neues DABubble-Konto.                                                                                                                                        Bitte Name und Nachname eingeben, mindestens 5 Zeichen                                                                                                                                                    Bitte eine gültige E-Mail-Adresse eingeben                                                                                                                                                     mindestens 8 Zeichen                    {{ errorMessage }}                                                                                                Ich stimme der Datenschutzerklärungzu.                                                                            Bitte stimme der Datenschutzerklarung zu                                                        weiter                                    Impressum        Datenschutz    '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'RegisterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ResetpasswordComponent.html":{"url":"components/ResetpasswordComponent.html","title":"component - ResetpasswordComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ResetpasswordComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login/resetpassword/resetpassword.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-resetpassword\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterLink\n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./resetpassword.component.html\n            \n\n\n\n            \n                styleUrl\n                ./resetpassword.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isDisabled\n                            \n                            \n                                popupState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/login/resetpassword/resetpassword.component.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendEmail()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/resetpassword/resetpassword.component.ts:43\n                        \n                    \n\n\n            \n                \n                        The sendEmail function asynchronously sends a password reset email to a specified email address\nand then navigates to the home page after a delay.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isDisabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/login/resetpassword/resetpassword.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        popupState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'out'\n                    \n                \n                    \n                        \n                                Defined in src/app/login/resetpassword/resetpassword.component.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterLink, Router } from '@angular/router';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { getAuth, sendPasswordResetEmail } from '@angular/fire/auth';\n\n@Component({\n  selector: 'app-resetpassword',\n  standalone: true,\n  imports: [RouterLink, CommonModule],\n  templateUrl: './resetpassword.component.html',\n  styleUrl: './resetpassword.component.scss',\n  animations: [\n    trigger('slideInOut', [\n      state('in', style({\n        transform: 'translateX(0)',\n        opacity: '1'\n      })),\n      state('out', style({\n        transform: 'translateX(100%)' + 'rotate(-30deg)',\n\n        opacity: '0'\n      })),\n      transition('out => in', [\n        animate('0.3s ease-in-out')\n      ]),\n      transition('in => out', [\n        animate('0.3s ease-in-out')\n      ])\n    ])\n  ]\n})\n\nexport class ResetpasswordComponent {\n  popupState = 'out';\n  isDisabled = true;\n  constructor(private router: Router) { }\n\n  /**\n   * The `sendEmail` function asynchronously sends a password reset email to a specified email address\n   * and then navigates to the home page after a delay.\n   */\n  async sendEmail() {\n    this.popupState = 'in';\n    const auth = getAuth();\n    await sendPasswordResetEmail(auth, 'kevin.mueller@fenrirdev.de')\n      .catch((error) => {\n        const errorCode = error.code;\n        const errorMessage = error.message;\n      });\n    setTimeout(() => {\n      this.popupState = 'out';\n      this.router.navigate(['/']);\n    }, 1000);\n  }\n}\n\n    \n\n    \n        \n    \n        \n            \n            DaBubble\n        \n    \n    \n        \n        \n            Passwort zurücksetzen\n            Bitte geben Sie Ihre E-Mail-Adresse ein.\n        \n        \n            \n                \n                    \n                    \n                \n            \n        \n        Wir senden Ihnen eine E-Mail, über die \n            Sie Ihr Passwort ändern können.\n        \n            E-Mail senden\n        \n    \n    \n        Impressum\n        Datenschutz\n    \n    \n        E-Mail gesendet\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                    DaBubble                                            Passwort zurücksetzen            Bitte geben Sie Ihre E-Mail-Adresse ein.                                                                                                                                Wir senden Ihnen eine E-Mail, über die             Sie Ihr Passwort ändern können.                    E-Mail senden                        Impressum        Datenschutz                E-Mail gesendet    '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'ResetpasswordComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResizeListenerService.html":{"url":"injectables/ResizeListenerService.html","title":"injectable - ResizeListenerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResizeListenerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/resize-listener.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                lgScreen\n                            \n                            \n                                mdScreen\n                            \n                            \n                                    Private\n                                resizeCallbacks\n                            \n                            \n                                smScreen\n                            \n                            \n                                xmdScreen\n                            \n                            \n                                xsmScreen\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                onResize\n                            \n                            \n                                registerResizeCallback\n                            \n                            \n                                unregisterResizeCallback\n                            \n                            \n                                    Private\n                                updateScreenSize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ngZone: NgZone)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/resize-listener.service.ts:20\n                            \n                        \n\n                \n                    \n                            Constructor for the service that listens for resize events\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        ngZone\n                                                  \n                                                        \n                                                                    NgZone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nNgZone\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onResize\n                        \n                    \n                \n            \n            \n                \n                        \n                    onResize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/resize-listener.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Called on resize event to update the screen sizes and call the registered callbacks\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerResizeCallback\n                        \n                    \n                \n            \n            \n                \nregisterResizeCallback(callback: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/resize-listener.service.ts:57\n                        \n                    \n\n\n            \n                \n                        A function to register a callback for resize events.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe callback function to be registered.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unregisterResizeCallback\n                        \n                    \n                \n            \n            \n                \nunregisterResizeCallback(callback: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/resize-listener.service.ts:66\n                        \n                    \n\n\n            \n                \n                        A function to unregister a callback for resize events.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe callback function to be unregistered.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateScreenSize\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateScreenSize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/resize-listener.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Updates the screen sizes\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        lgScreen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/resize-listener.service.ts:12\n                        \n                    \n\n            \n                \n                    \n1440px\n\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mdScreen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/resize-listener.service.ts:16\n                        \n                    \n\n            \n                \n                    \n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        resizeCallbacks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (function)[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/resize-listener.service.ts:9\n                        \n                    \n\n            \n                \n                    Resize callbacks to call on resize event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        smScreen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/resize-listener.service.ts:20\n                        \n                    \n\n            \n                \n                    \n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        xmdScreen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/resize-listener.service.ts:14\n                        \n                    \n\n            \n                \n                    \n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        xsmScreen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/resize-listener.service.ts:18\n                        \n                    \n\n            \n                \n                    \n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NgZone } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\n\nexport class ResizeListenerService {\n  /** Resize callbacks to call on resize event */\n  private resizeCallbacks: (() => void)[] = [];\n  /** Screen-sizes variables for width in px */\n  /** > 1440px */\n  lgScreen: boolean = false;\n  /**  {\n      this.updateScreenSize();\n      this.resizeCallbacks.forEach(callback => callback());\n    });\n  }\n\n  /**\n   * Updates the screen sizes\n   */\n  private updateScreenSize() {\n    const width = window.innerWidth;\n    this.lgScreen = width > 1440;\n    this.xmdScreen = width  960;\n    this.mdScreen = width  600;\n    this.xsmScreen = width  480;\n    this.smScreen = width  void} callback - The callback function to be registered.\n   */\n  registerResizeCallback(callback: () => void) {\n    this.resizeCallbacks.push(callback);\n    callback();\n  }\n\n  /**\n   * A function to unregister a callback for resize events.\n   * @param {() => void} callback - The callback function to be unregistered.\n   */\n  unregisterResizeCallback(callback: () => void) {\n    this.resizeCallbacks = this.resizeCallbacks.filter(cb => cb !== callback);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ShowProfileComponent.html":{"url":"components/ShowProfileComponent.html","title":"component - ShowProfileComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ShowProfileComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/show-profile/show-profile.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-show-profile\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatDialogActions\n                            MatDialogClose\n                            CommonModule\n                            ReactiveFormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./show-profile.component.html\n            \n\n\n\n            \n                styleUrl\n                ./show-profile.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                authService\n                            \n                            \n                                avatars\n                            \n                            \n                                channelService\n                            \n                            \n                                    Public\n                                dialog\n                            \n                            \n                                editMode\n                            \n                            \n                                editProfilePic\n                            \n                            \n                                    \n                                fileInput\n                            \n                            \n                                otherUser\n                            \n                            \n                                otherUserId\n                            \n                            \n                                otherUserInfo\n                            \n                            \n                                profileEditable\n                            \n                            \n                                selectedAvatar\n                            \n                            \n                                sidebarService\n                            \n                            \n                                threadService\n                            \n                            \n                                updateUserForm\n                            \n                            \n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkUpdateInput\n                            \n                            \n                                closeDialog\n                            \n                            \n                                getStatusText\n                            \n                            \n                                getUserStatus\n                            \n                            \n                                    Async\n                                newProfilePicture\n                            \n                            \n                                onImageSelected\n                            \n                            \n                                openDialog\n                            \n                            \n                                selectAvatar\n                            \n                            \n                                    Async\n                                sendMessage\n                            \n                            \n                                toggleChangeProfilePic\n                            \n                            \n                                triggerFileInput\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(storageService: StorageService, dialog: MatDialog, authService: AuthService, dialogRef: MatDialogRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        storageService\n                                                  \n                                                        \n                                                                        StorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkUpdateInput\n                        \n                    \n                \n            \n            \n                \ncheckUpdateInput()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/show-profile/show-profile.component.ts:137\n                        \n                    \n\n\n            \n                \n                        The function checkUpdateInput checks if the updateUserForm is valid and opens a dialog if it is.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        closeDialog\n                        \n                    \n                \n            \n            \n                \ncloseDialog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/show-profile/show-profile.component.ts:187\n                        \n                    \n\n\n            \n                \n                        The closeDialog function closes all open dialog windows.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStatusText\n                        \n                    \n                \n            \n            \n                \ngetStatusText()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/show-profile/show-profile.component.ts:124\n                        \n                    \n\n\n            \n                \n                        The getStatusText function returns \"Aktiv\" if the user is logged in and \"Inaktiv\" if the user is\nnot logged in.\n\n\n                        \n                            Returns :     \"Aktiv\" | \"Inaktiv\"\n\n                        \n                            \n                                string\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserStatus\n                        \n                    \n                \n            \n            \n                \ngetUserStatus(type: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/show-profile/show-profile.component.ts:105\n                        \n                    \n\n\n            \n                \n                        Function returns the class of user status for online indicator div and text\ndepending on given type as a string\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    string - to determine which value should be returned\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                class as a string\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        newProfilePicture\n                        \n                    \n                \n            \n            \n                \n                        \n                    newProfilePicture()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/show-profile/show-profile.component.ts:94\n                        \n                    \n\n\n            \n                \n                        The newProfilePicture function asynchronously uploads a file to storage and updates the user's\nprofile picture.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onImageSelected\n                        \n                    \n                \n            \n            \n                \nonImageSelected(input: HTMLInputElement)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/show-profile/show-profile.component.ts:82\n                        \n                    \n\n\n            \n                \n                        The function onImageSelected takes an HTML input element, selects a file from storage service, and\ncreates a URL for the selected file.\nHTMLInputElement. It is used to represent an input element in an HTML form, such as an input field\nof type \"file\" that allows users to select files from their device.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                input\n                                            \n                                                        HTMLInputElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe input parameter in the onImageSelected function is of type\nHTMLInputElement. It is used to represent an input element in an HTML form, such as an input field\nof type \"file\" that allows users to select files from their device.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openDialog\n                        \n                    \n                \n            \n            \n                \nopenDialog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/show-profile/show-profile.component.ts:163\n                        \n                    \n\n\n            \n                \n                        The openDialog function opens a dialog window to verify user information and updates user email\nand profile if verified.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectAvatar\n                        \n                    \n                \n            \n            \n                \nselectAvatar(avatar: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/show-profile/show-profile.component.ts:62\n                        \n                    \n\n\n            \n                \n                        The selectAvatar function in TypeScript sets the selectedAvatar property to the provided avatar\nstring.\nthis function is called, it sets the selectedAvatar property of the object to the value of the\navatar parameter.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                avatar\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selectAvatar function takes a parameter avatar of type string. When\nthis function is called, it sets the selectedAvatar property of the object to the value of the\navatar parameter.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendMessage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/show-profile/show-profile.component.ts:143\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleChangeProfilePic\n                        \n                    \n                \n            \n            \n                \ntoggleChangeProfilePic()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/show-profile/show-profile.component.ts:180\n                        \n                    \n\n\n            \n                \n                        Toggles the value of editProfilePic, which controls whether the profile picture can be changed.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        triggerFileInput\n                        \n                    \n                \n            \n            \n                \ntriggerFileInput()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/show-profile/show-profile.component.ts:70\n                        \n                    \n\n\n            \n                \n                        The triggerFileInput function triggers a click event on a file input element and sets the\nselectedAvatar property to null.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        authService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatars\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : this.storageService.avatars\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelService\n\n                    \n                \n                \n                    \n                        Default value : inject(ChannelService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatDialog\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editMode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editProfilePic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileInput\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('fileInput')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        otherUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        otherUserId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        otherUserInfo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profileEditable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedAvatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '../../assets/img/login/default_profil_img.png'\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sidebarService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SidebarService\n\n                    \n                \n                \n                    \n                        Default value : inject(SidebarService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        threadService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ThreadService\n\n                    \n                \n                \n                    \n                        Default value : inject(ThreadService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Default value : inject(UserService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject, ViewChild, ElementRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  MatDialog,\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogRef,\n} from '@angular/material/dialog';\nimport { UserService } from '../../services/user.service';\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { AuthService } from '../../services/auth.service';\nimport { VerifyComponent } from '../verify/verify.component';\nimport { ChannelService } from '../../services/channel.service';\nimport { SidebarService } from '../../services/sidebar.service';\nimport { ThreadService } from '../../services/thread.service';\nimport { StorageService } from '../../services/storage.service';\n\n@Component({\n  selector: 'app-show-profile',\n  standalone: true,\n  imports: [MatDialogActions, MatDialogClose, CommonModule, ReactiveFormsModule],\n  templateUrl: './show-profile.component.html',\n  styleUrl: './show-profile.component.scss'\n})\n\nexport class ShowProfileComponent {\n  threadService: ThreadService = inject(ThreadService);\n  userService: UserService = inject(UserService);\n  channelService: ChannelService = inject(ChannelService);\n  sidebarService: SidebarService = inject(SidebarService);\n  @ViewChild('fileInput') fileInput!: ElementRef;\n  selectedAvatar: string = '../../assets/img/login/default_profil_img.png';\n  avatars: any = this.storageService.avatars;\n  updateUserForm: FormGroup;\n  otherUser: boolean = false;\n  profileEditable: boolean = false;\n  editMode: boolean = false;\n  editProfilePic: boolean = false;\n  otherUserInfo!: any;\n  otherUserId!: string;\n\n  constructor(\n    private storageService: StorageService,\n    public dialog: MatDialog,\n    public authService: AuthService,\n    private dialogRef: MatDialogRef) {\n    this.updateUserForm = new FormGroup({\n      name: new FormControl(this.userService.userInfo.name),\n      email: new FormControl(this.userService.userInfo.email, [Validators.required, Validators.email]),\n    });\n    this.avatars = this.storageService.avatars;\n    this.selectedAvatar = this.userService.userInfo.profilePicture;\n  }\n\n  /**\n   * The `selectAvatar` function in TypeScript sets the selectedAvatar property to the provided avatar\n   * string.\n   * @param {string} avatar - The `selectAvatar` function takes a parameter `avatar` of type string. When\n   * this function is called, it sets the `selectedAvatar` property of the object to the value of the\n   * `avatar` parameter.\n   */\n  selectAvatar(avatar: string) {\n    this.selectedAvatar = avatar;\n  }\n\n  /**\n   * The `triggerFileInput` function triggers a click event on a file input element and sets the\n   * selectedAvatar property to null.\n   */\n  triggerFileInput() {\n    this.fileInput.nativeElement.click();\n    this.selectedAvatar;\n  }\n\n  /**\n   * The function `onImageSelected` takes an HTML input element, selects a file from storage service, and\n   * creates a URL for the selected file.\n   * @param {HTMLInputElement} input - The `input` parameter in the `onImageSelected` function is of type\n   * `HTMLInputElement`. It is used to represent an input element in an HTML form, such as an input field\n   * of type \"file\" that allows users to select files from their device.\n   */\n  onImageSelected(input: HTMLInputElement) {\n    this.storageService.onFileSelected(input);\n    const file = this.storageService.files?.item(0);\n    if (file) {\n      this.selectedAvatar = URL.createObjectURL(this.storageService.fileUrl);\n    }\n  }\n\n  /**\n   * The `newProfilePicture` function asynchronously uploads a file to storage and updates the user's\n   * profile picture.\n   */\n  async newProfilePicture() {\n    await this.storageService.uploadFile(this.userService.currentUser!);\n    await this.userService.updateUserProfilePicture(this.userService.createUserInfo.profilePicture)\n  }\n\n  /**\n   * Function returns the class of user status for online indicator div and text\n   * depending on given type as a string\n   * @param type string - to determine which value should be returned\n   * @returns class as a string\n   */\n  getUserStatus(type: string) {\n    if (!this.otherUser) {\n      const status = this.userService.userInfo.isLoggedIn == true ? \"online\" : \"offline\";\n      if (type == 'text')\n        return status\n      return status + '-div'\n    } else {\n      const status = this.userService.otherUserInfo.isLoggedIn == true ? \"online\" : \"offline\";\n      if (type == 'text')\n        return status\n      return status + '-div'\n    }\n  }\n\n  /**\n   * The `getStatusText` function returns \"Aktiv\" if the user is logged in and \"Inaktiv\" if the user is\n   * not logged in.\n   * @returns `string`\n   */\n  getStatusText() {\n    if (!this.otherUser) {\n      const text = this.userService.userInfo.isLoggedIn == true ? \"Aktiv\" : \"Inaktiv\";\n      return text\n    } else {\n      const text = this.userService.otherUserInfo.isLoggedIn == true ? \"Aktiv\" : \"Inaktiv\";\n      return text\n    }\n  }\n\n  /**\n   * The function `checkUpdateInput` checks if the `updateUserForm` is valid and opens a dialog if it is.\n   */\n  checkUpdateInput() {\n    if (this.updateUserForm.valid) {\n      this.openDialog()\n    }\n  }\n\n  async sendMessage() {\n    let alreadyPushed = false;\n    await this.channelService.updateUserDm(this.userService.otherUserInfo);\n    this.sidebarService.userDmData.forEach(element => {\n      if (element.id == this.userService.otherUserInfo.id)\n        alreadyPushed = true;\n    });\n    if (!alreadyPushed)\n      this.sidebarService.userDmData.push(this.userService.otherUserInfo);\n    this.channelService.chooseChannelType(true, this.userService.otherUserInfo);\n    this.threadService.stopListener();\n    this.threadService.triggerHideThread(); // trigger hideThread() in mainsection.component over thread.service\n    this.threadService.isActive = false;\n    this.closeDialog();\n  }\n\n  /**\n   * The `openDialog` function opens a dialog window to verify user information and updates user email\n   * and profile if verified.\n   */\n  openDialog() {\n    this.dialog.open(VerifyComponent, { panelClass: ['box-shadow', 'box-radius'] })\n      .afterClosed()\n      .subscribe(() => {\n        if (this.authService.verified == true) {\n          this.authService.updateUserMail(this.updateUserForm.controls['email'].value)\n          this.userService.updateUserProfile(this.updateUserForm);\n          this.editMode = false;\n        } else {\n          return\n        }\n      })\n  }\n\n  /**\n   * Toggles the value of `editProfilePic`, which controls whether the profile picture can be changed.\n   */\n  toggleChangeProfilePic() {\n    this.editProfilePic = !this.editProfilePic;\n  }\n\n  /**\n   * The closeDialog function closes all open dialog windows.\n   */\n  closeDialog() {\n\n    this.otherUser ? this.dialog.closeAll() : this.dialogRef.close()\n  }\n}\n\n    \n\n    \n        \n    \n        Profil\n        \n            \n        \n    \n    \n        \n            \n            \n            \n        \n    \n    @if (editMode == false) {\n    \n        \n            {{userService.otherUserInfo.name}}\n            {{userService.userInfo.name}}\n            @if (profileEditable) {Bearbeiten}\n        \n        \n            \n            {{getStatusText()}}\n        \n    \n    \n        \n            \n        \n        \n            E-mail Adresse\n            {{userService.otherUserInfo.email}}\n            {{userService.userInfo.email}}\n        \n    \n    @if (otherUser=== true) {\n    \n        \n            \n            Nachricht\n        \n    }\n    }\n    @if (editMode == true) {\n    \n        \n            \n                \n            \n            \n                Datei hochladen\n                \n              \n            \n                \n                    \n                    Vollständiger Name\n                \n                \n            \n            \n                \n                    \n                    E-mail Adresse\n                \n                \n            \n        \n        \n            \n                Abbrechen\n            \n            \n                Speichern\n            \n            \n                Speichern\n            \n        \n    \n    }\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Profil                                                                                                @if (editMode == false) {                        {{userService.otherUserInfo.name}}            {{userService.userInfo.name}}            @if (profileEditable) {Bearbeiten}                                        {{getStatusText()}}                                                                E-mail Adresse            {{userService.otherUserInfo.email}}            {{userService.userInfo.email}}                @if (otherUser=== true) {                                    Nachricht            }    }    @if (editMode == true) {                                                                                Datei hochladen                                                                                                  Vollständiger Name                                                                                                                E-mail Adresse                                                                                        Abbrechen                                        Speichern                                        Speichern                            }'\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'ShowProfileComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SidebarComponent.html":{"url":"components/SidebarComponent.html","title":"component - SidebarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SidebarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mainsection/sidebar/sidebar.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-sidebar\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                                AddNewChannelComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./sidebar.component.html\n            \n\n\n\n            \n                styleUrl\n                ./sidebar.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                activeChannelTitle\n                            \n                            \n                                activeDirectChannel\n                            \n                            \n                                activePrivateChannel\n                            \n                            \n                                channelService\n                            \n                            \n                                    Public\n                                dialog\n                            \n                            \n                                menuStates\n                            \n                            \n                                resizeListenerService\n                            \n                            \n                                sidebarService\n                            \n                            \n                                unsubChannels\n                            \n                            \n                                unsubCurrentChannels\n                            \n                            \n                                unsubUserDmData\n                            \n                            \n                                unsubUserDmIds\n                            \n                            \n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkMobileSmallScreen\n                            \n                            \n                                clearactiveStyle\n                            \n                            \n                                getDmStatus\n                            \n                            \n                                getUserStatus\n                            \n                            \n                                goToChannel\n                            \n                            \n                                goToDirektMessage\n                            \n                            \n                                goToPrivateMessage\n                            \n                            \n                                newMessage\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                openDialog\n                            \n                            \n                                toggleMenu\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialog: MatDialog, mainsectionComponent: MainsectionComponent)\n                    \n                \n                        \n                            \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mainsectionComponent\n                                                  \n                                                        \n                                                                        MainsectionComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkMobileSmallScreen\n                        \n                    \n                \n            \n            \n                \ncheckMobileSmallScreen()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/sidebar.component.ts:95\n                        \n                    \n\n\n            \n                \n                        Checks if the screen size is small or extra small and calls the handleCloseMobile method of the mainsectionComponent if true.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearactiveStyle\n                        \n                    \n                \n            \n            \n                \nclearactiveStyle()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/sidebar.component.ts:159\n                        \n                    \n\n\n            \n                \n                        The clearactiveStyle function resets the active channel titles in a TypeScript class.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDmStatus\n                        \n                    \n                \n            \n            \n                \ngetDmStatus(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/sidebar.component.ts:137\n                        \n                    \n\n\n            \n                \n                        The function getDmStatus returns a CSS class name based on the login status of a user in the\nsidebar.\nin the userDmData array within the sidebarService.\nof isLoggedIn property in the userDmData array at the specified index.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index is a number that represents the position or index of the user \nin the userDmData array within the sidebarService.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     \"online-div\" | \"offline-div\"\n\n                        \n                            \n                                returns either 'online-div' or 'offline-div' based on the value\nof isLoggedIn property in the userDmData array at the specified index.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserStatus\n                        \n                    \n                \n            \n            \n                \ngetUserStatus()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/sidebar.component.ts:124\n                        \n                    \n\n\n            \n                \n                        Function returns the class of user status for online indicator div\n\n\n                        \n                            Returns :     \"online-div\" | \"offline-div\"\n\n                        \n                            \n                                class as a string\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        goToChannel\n                        \n                    \n                \n            \n            \n                \ngoToChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/sidebar.component.ts:65\n                        \n                    \n\n\n            \n                \n                        Navigates to the specified channel and updates the active channel title.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        goToDirektMessage\n                        \n                    \n                \n            \n            \n                \ngoToDirektMessage(dm: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/sidebar.component.ts:86\n                        \n                    \n\n\n            \n                \n                        Navigates to the direct message and updates the active channel title.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dm\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe direct message to navigate to.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        goToPrivateMessage\n                        \n                    \n                \n            \n            \n                \ngoToPrivateMessage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/sidebar.component.ts:76\n                        \n                    \n\n\n            \n                \n                        Navigates to the private message and updates the active channel title.\nThis function clears the active style, checks if the mobile screen is small,\nand sets the active private channel to the user's name.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newMessage\n                        \n                    \n                \n            \n            \n                \nnewMessage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/sidebar.component.ts:146\n                        \n                    \n\n\n            \n                \n                        The newMessage function resets message-related properties and clears active styles, and closes the\nmobile section if the screen size is small.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/sidebar.component.ts:165\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/sidebar.component.ts:51\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openDialog\n                        \n                    \n                \n            \n            \n                \nopenDialog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/sidebar.component.ts:58\n                        \n                    \n\n\n            \n                \n                        Opens the AddNewChannel dialog.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleMenu\n                        \n                    \n                \n            \n            \n                \ntoggleMenu(menu: \"channel\" | \"message\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/sidebar.component.ts:115\n                        \n                    \n\n\n            \n                \n                        Toggles the state of the specified menu between 'open' and 'closed'.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                menu\n                                            \n                                                        \"channel\" | \"message\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe menu to be toggled. It can either be 'channel' or 'message'.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        activeChannelTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        activeDirectChannel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        activePrivateChannel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelService\n\n                    \n                \n                \n                    \n                        Default value : inject(ChannelService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatDialog\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        menuStates\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    channel: 'open',\n    message: 'open',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:106\n                        \n                    \n\n            \n                \n                    An object representing the states of different menus.\nEach menu state can either be 'open' or 'closed'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resizeListenerService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResizeListenerService\n\n                    \n                \n                \n                    \n                        Default value : inject(ResizeListenerService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sidebarService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SidebarService\n\n                    \n                \n                \n                    \n                        Default value : inject(SidebarService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubChannels\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubCurrentChannels\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubUserDmData\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubUserDmIds\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Default value : inject(UserService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, inject } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style\n} from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { UserService } from '../../shared/services/user.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AddNewChannelComponent } from './add-new-channel/add-new-channel.component';\nimport { SidebarService } from '../../shared/services/sidebar.service';\nimport { ChannelService } from '../../shared/services/channel.service';\nimport { ResizeListenerService } from '../../shared/services/resize-listener.service';\nimport { MainsectionComponent } from '../mainsection.component';\nimport { Unsubscribe } from '@angular/fire/firestore';\n\n@Component({\n  selector: 'app-sidebar',\n  standalone: true,\n  imports: [CommonModule, AddNewChannelComponent],\n  animations: [\n    trigger('openClose', [\n      state('closed', style({ display: 'none' })),\n      state('open', style({ display: 'flex' })),\n    ]),\n  ],\n  templateUrl: './sidebar.component.html',\n  styleUrl: './sidebar.component.scss',\n})\n\nexport class SidebarComponent implements OnInit {\n  userService: UserService = inject(UserService);\n  sidebarService: SidebarService = inject(SidebarService);\n  channelService: ChannelService = inject(ChannelService);\n  resizeListenerService: ResizeListenerService = inject(ResizeListenerService);\n  activeChannelTitle: string = '';\n  activePrivateChannel: string = '';\n  activeDirectChannel: string = '';\n  unsubChannels;\n  unsubCurrentChannels;\n  unsubUserDmIds;\n  unsubUserDmData;\n\n  constructor(public dialog: MatDialog, private mainsectionComponent: MainsectionComponent) {\n    this.unsubChannels = this.sidebarService.retrieveChannels();\n    this.unsubCurrentChannels = this.sidebarService.retrieveCurrentChannels();\n    this.unsubUserDmIds = this.sidebarService.retrieveCurrentDirectMsgs();\n    this.unsubUserDmData = this.sidebarService.retrieveDmUserData();\n  }\n\n  ngOnInit() {\n    this.clearactiveStyle();\n  }\n\n  /**\n   * Opens the AddNewChannel dialog.\n   */\n  openDialog() {\n    this.dialog.open(AddNewChannelComponent, { panelClass: ['add-new-channel', 'box-radius', 'box-shadow'] });\n  }\n\n  /**\n   * Navigates to the specified channel and updates the active channel title.\n   */\n  goToChannel() {\n    this.clearactiveStyle();\n    this.checkMobileSmallScreen();\n    this.activeChannelTitle = this.channelService.channelMsgData.title;\n  }\n\n  /**\n   * Navigates to the private message and updates the active channel title.\n   * This function clears the active style, checks if the mobile screen is small,\n   * and sets the active private channel to the user's name.\n   */\n  goToPrivateMessage() {\n    this.clearactiveStyle();\n    this.checkMobileSmallScreen();\n    this.activePrivateChannel = this.userService.userInfo.name;\n  }\n\n  /**\n   * Navigates to the direct message and updates the active channel title.\n   * @param {string} dm - The direct message to navigate to.\n   */\n  goToDirektMessage(dm: string) {\n    this.clearactiveStyle();\n    this.checkMobileSmallScreen();\n    this.activeDirectChannel = dm;\n  }\n\n  /**\n   * Checks if the screen size is small or extra small and calls the handleCloseMobile method of the mainsectionComponent if true.\n   */\n  checkMobileSmallScreen() {\n    if (this.resizeListenerService.smScreen || this.resizeListenerService.xsmScreen) {\n      this.mainsectionComponent.hanldeCloseMobile();\n    }\n  }\n\n  /**\n   * An object representing the states of different menus.\n   * Each menu state can either be 'open' or 'closed'.\n   * @type {{ [state: string]: 'open' | 'closed' }}\n   */\n  menuStates: { [state: string]: 'open' | 'closed' } = {\n    channel: 'open',\n    message: 'open',\n  };\n\n  /**\n   * Toggles the state of the specified menu between 'open' and 'closed'.\n   * @param {'channel' | 'message'} menu - The menu to be toggled. It can either be 'channel' or 'message'.\n   */\n  toggleMenu(menu: 'channel' | 'message') {\n    this.menuStates[menu] = this.menuStates[menu] === 'open' ? 'closed' : 'open';\n  }\n\n  /**\n   * Function returns the class of user status for online indicator div\n   * @param type string - to determine which value should be returned\n   * @returns class as a string\n   */\n  getUserStatus() {\n    const loggedIn = this.userService.userInfo.isLoggedIn == true ? 'online-div' : 'offline-div';\n    return loggedIn;\n  }\n\n/**\n * The function `getDmStatus` returns a CSS class name based on the login status of a user in the\n * sidebar.\n * @param {number} index - The `index` is a number that represents the position or index of the user \n * in the `userDmData` array within the `sidebarService`.\n * @returns returns either 'online-div' or 'offline-div' based on the value\n * of `isLoggedIn` property in the `userDmData` array at the specified index.\n */\n  getDmStatus(index: number) {\n    const loggedIn = this.sidebarService.userDmData[index].isLoggedIn == true ? 'online-div' : 'offline-div';\n    return loggedIn;\n  }\n\n/**\n * The `newMessage` function resets message-related properties and clears active styles, and closes the\n * mobile section if the screen size is small.\n */\n  newMessage() {\n    this.channelService.privateMsg = false;\n    this.channelService.channelMsg = false;\n    this.channelService.messages = [];\n    this.clearactiveStyle();\n    if (this.resizeListenerService.smScreen || this.resizeListenerService.xsmScreen) {\n      this.mainsectionComponent.hanldeCloseMobile();\n    }\n  }\n\n/**\n * The clearactiveStyle function resets the active channel titles in a TypeScript class.\n */\n  clearactiveStyle() {\n    this.activeChannelTitle = '';\n    this.activePrivateChannel = '';\n    this.activeDirectChannel = '';\n  }\n\n  ngOnDestroy() {\n    this.unsubChannels();\n    this.unsubCurrentChannels();\n    this.unsubUserDmIds();\n    this.unsubUserDmData();\n    this.sidebarService.userDmData = [];\n  }\n}\n\n    \n\n    \n        \n  \n    \n    \n  \n  \n    \n      \n        \n      \n       Devspace \n    \n    \n  \n  \n    \n      \n        \n        \n        \n          \n          \n          Channels\n        \n      \n      \n      \n    \n    \n      @for (channel of sidebarService.channels; track $index) {\n      \n        \n        {{channel.title}}\n      \n      }\n      \n        \n        Channel hinzufügen\n      \n    \n  \n  \n    \n    \n    \n      \n      \n      Direktnachrichten\n    \n  \n  \n    \n      \n      \n      {{userService.userInfo.name}} (Du)\n    \n    @for (dm of sidebarService.userDmData; track dm; let i = $index) {\n    @if (dm.id != userService.userInfo.id) {\n    \n      \n      \n      {{dm.name}}\n    \n    }\n    }\n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                             Devspace                                                                             Channels                                        @for (channel of sidebarService.channels; track $index) {                      {{channel.title}}            }                      Channel hinzufügen                                            Direktnachrichten                              {{userService.userInfo.name}} (Du)        @for (dm of sidebarService.userDmData; track dm; let i = $index) {    @if (dm.id != userService.userInfo.id) {                      {{dm.name}}        }    }  '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'SidebarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SidebarService.html":{"url":"injectables/SidebarService.html","title":"injectable - SidebarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SidebarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/sidebar.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channels\n                            \n                            \n                                channelService\n                            \n                            \n                                channelUsers\n                            \n                            \n                                firestore\n                            \n                            \n                                userDmData\n                            \n                            \n                                userDmIds\n                            \n                            \n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getDmStatus\n                            \n                            \n                                    Async\n                                getUsersFromChannel\n                            \n                            \n                                refChannels\n                            \n                            \n                                refUserDirectMsgs\n                            \n                            \n                                    Async\n                                removeChannelUser\n                            \n                            \n                                retrieveChannels\n                            \n                            \n                                retrieveCurrentChannels\n                            \n                            \n                                retrieveCurrentDirectMsgs\n                            \n                            \n                                retrieveDmUserData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/sidebar.service.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getDmStatus\n                        \n                    \n                \n            \n            \n                \ngetDmStatus(isLoggedIn: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/sidebar.service.ts:99\n                        \n                    \n\n\n            \n                \n                        The function getDmStatus returns a CSS class name based on the user's login status.\nuser is currently logged in or not.\nof the isLoggedIn parameter.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                isLoggedIn\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe isLoggedIn parameter is a boolean value that indicates whether a\nuser is currently logged in or not.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     \"online-div\" | \"offline-div\"\n\n                        \n                            \n                                The function getDmStatus returns either 'online-div' or 'offline-div' based on the value\nof the isLoggedIn parameter.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUsersFromChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsersFromChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/sidebar.service.ts:130\n                        \n                    \n\n\n            \n                \n                        The function getUsersFromChannel retrieves users from a specific channel document in Firestore and\nadds them to an array.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refChannels\n                        \n                    \n                \n            \n            \n                \nrefChannels()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/sidebar.service.ts:122\n                        \n                    \n\n\n            \n                \n                        Firestore collection reference for Channels\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                collection\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refUserDirectMsgs\n                        \n                    \n                \n            \n            \n                \nrefUserDirectMsgs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/sidebar.service.ts:139\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeChannelUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeChannelUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/sidebar.service.ts:107\n                        \n                    \n\n\n            \n                \n                        Pushes the actual channels of the user into the channel array\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        retrieveChannels\n                        \n                    \n                \n            \n            \n                \nretrieveChannels()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/sidebar.service.ts:24\n                        \n                    \n\n\n            \n                \n                        Starts snapshot on Channels Collection\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                Unsubscribe\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        retrieveCurrentChannels\n                        \n                    \n                \n            \n            \n                \nretrieveCurrentChannels()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/sidebar.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Starts snapshot on userchannels and rearranges the channels in the sidebar when a user left or has been\nadded to a channel.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                Unsubscribe\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        retrieveCurrentDirectMsgs\n                        \n                    \n                \n            \n            \n                \nretrieveCurrentDirectMsgs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/sidebar.service.ts:62\n                        \n                    \n\n\n            \n                \n                        The function retrieveCurrentDirectMsgs retrieves the current direct messages for a user and\nreturns an unsubscribe function.\nfunction.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                The unsubscribe function is being returned from the retrieveCurrentDirectMsgs()\nfunction.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        retrieveDmUserData\n                        \n                    \n                \n            \n            \n                \nretrieveDmUserData()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/sidebar.service.ts:77\n                        \n                    \n\n\n            \n                \n                        The function retrieveDmUserData retrieves user data from Firestore based on specific user IDs and\nupdates the userDmData array asynchronously.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                The unsubscribe function is being returned from the retrieveDmUserData() function.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channels\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/sidebar.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelService\n\n                    \n                \n                \n                    \n                        Default value : inject(ChannelService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/sidebar.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/sidebar.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firestore\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Firestore\n\n                    \n                \n                \n                    \n                        Default value : inject(Firestore)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/sidebar.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userDmData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/sidebar.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userDmIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/sidebar.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Default value : inject(UserService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/sidebar.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, inject } from '@angular/core';\nimport { Firestore, Unsubscribe, addDoc, collection, doc, query, getDoc, getDocs, setDoc, onSnapshot, updateDoc, where, FieldValue, arrayRemove, DocumentData } from '@angular/fire/firestore';\nimport { UserService } from './user.service';\nimport { UserData } from '../models/userdata.class';\nimport { ChannelService } from './channel.service';\n@Injectable({\n  providedIn: 'root'\n})\nexport class SidebarService {\n  firestore: Firestore = inject(Firestore);\n  userService: UserService = inject(UserService);\n  channelService: ChannelService = inject(ChannelService);\n  channels: any[] = [];\n  channelUsers: any[] = [];\n  userDmIds: string[] = [];\n  userDmData: any[] = [];\n\n  constructor() { }\n\n  /**\n   * Starts snapshot on Channels Collection\n   * @returns Unsubscribe\n   */\n  retrieveChannels() {\n    const unsubscribe = onSnapshot(query(this.refChannels()), (querySnapshot) => {\n      this.channels = [];\n      querySnapshot.forEach(channel => {\n        if (this.userService.userChannels.includes(channel.id))\n          this.channels.push(channel.data())\n      });\n      if (this.channelService.channelMsg) {\n        this.channelService.refreshChannelData();\n      }\n    });\n    return unsubscribe\n  }\n\n  /**\n   * Starts snapshot on userchannels and rearranges the channels in the sidebar when a user left or has been\n   * added to a channel.\n   * @returns Unsubscribe\n   */\n  retrieveCurrentChannels() {\n    const unsubscribe = onSnapshot(query(this.userService.refUserChannels()), async (querySnapshot) => {\n      let channelCounter = 0;\n      querySnapshot.forEach(() => {\n        channelCounter++;\n      });\n      if (channelCounter != this.channels.length) {\n        await this.removeChannelUser();\n      }\n    });\n    return unsubscribe\n  }\n\n/**\n * The function `retrieveCurrentDirectMsgs` retrieves the current direct messages for a user and\n * returns an unsubscribe function.\n * @returns The `unsubscribe` function is being returned from the `retrieveCurrentDirectMsgs()`\n * function.\n */\n  retrieveCurrentDirectMsgs() {\n    const unsubscribe = onSnapshot(query(this.refUserDirectMsgs()), (querySnapshot) => {\n      this.userDmIds = [];\n      querySnapshot.forEach((userDm) => {\n        this.userDmIds.push(userDm.data()['dmUserId'])\n      });\n    });\n    return unsubscribe\n  }\n\n/**\n * The function `retrieveDmUserData` retrieves user data from Firestore based on specific user IDs and\n * updates the `userDmData` array asynchronously.\n * @returns The `unsubscribe` function is being returned from the `retrieveDmUserData()` function.\n */\n  retrieveDmUserData() {\n    const unsubscribe = onSnapshot(query(this.userService.refUserProfile()), (querySnapshot) => {\n      setTimeout(() => {\n        this.userDmData = [];\n        querySnapshot.forEach((userDm) => {\n          if (this.userDmIds.includes(userDm.id)) {\n            const data: any = userDm.data();\n            this.userDmData.push(data);\n          }\n        });\n      }, 25);\n    });\n    return unsubscribe\n  }\n\n/**\n * The function `getDmStatus` returns a CSS class name based on the user's login status.\n * @param {boolean} isLoggedIn - The `isLoggedIn` parameter is a boolean value that indicates whether a\n * user is currently logged in or not.\n * @returns The function `getDmStatus` returns either 'online-div' or 'offline-div' based on the value\n * of the `isLoggedIn` parameter.\n */\n  getDmStatus(isLoggedIn: boolean) {\n    const loggedIn = isLoggedIn == true ? 'online-div' : 'offline-div';\n    return loggedIn;\n  }\n\n  /**\n   * Pushes the actual channels of the user into the channel array\n   */\n  async removeChannelUser() {\n    const querySnapshot = await getDocs(query(this.refChannels()));\n    this.channels = [],\n      this.channelService.currentChannelUsers = [];\n    querySnapshot.forEach(channel => {\n      if (this.userService.userChannels.includes(channel.id)) {\n        this.channels.push(channel.data())\n      }\n    });\n  }\n\n  /**\n   * Firestore collection reference for Channels\n   * @returns collection\n   */\n  refChannels() {\n    return collection(this.firestore, \"Channels\")\n  }\n\n/**\n * The function `getUsersFromChannel` retrieves users from a specific channel document in Firestore and\n * adds them to an array.\n */\n  async getUsersFromChannel() {\n    const docRef = doc(this.firestore, \"Channels\", \"eGATth4XDS0ztUbhnYsR\");\n    const docSnap = await getDoc(docRef);\n    const channel: any = docSnap.data();\n    channel.users.forEach((element: any) => {\n      this.channelUsers.push(element);\n    });\n  }\n\n  refUserDirectMsgs() {\n    return collection(this.firestore, 'user', sessionStorage.getItem(\"uid\") as string, 'directmessages')\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StateService.html":{"url":"injectables/StateService.html","title":"injectable - StateService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/state-service.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                editChannelDialogOpenMobile\n                            \n                            \n                                openDialogAddUser$\n                            \n                            \n                                resizeListenerService\n                            \n                            \n                                    Private\n                                showAddUserSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getEditChannelDialogOpenMobile\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                setEditChannelDialogOpenMobile\n                            \n                            \n                                triggerAddUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/state-service.service.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor function that registers a resize callback for the edit channel dialog on mobile devices.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getEditChannelDialogOpenMobile\n                        \n                    \n                \n            \n            \n                \ngetEditChannelDialogOpenMobile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/state-service.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Retrieves the state of the edit channel dialog on mobile devices.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                The state of the edit channel dialog on mobile devices.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/state-service.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Unregisters the resize callback function from the ResizeListenerService\nin order to clean up and prevent memory leaks when the component is destroyed.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setEditChannelDialogOpenMobile\n                        \n                    \n                \n            \n            \n                \nsetEditChannelDialogOpenMobile(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/state-service.service.ts:25\n                        \n                    \n\n\n            \n                \n                        Sets the state of the edit channel dialog on mobile devices.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe state to set for the edit channel dialog on mobile devices.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        triggerAddUser\n                        \n                    \n                \n            \n            \n                \ntriggerAddUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/state-service.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Triggers the showAddUserSubject BehaviorSubject to emit a new value, indicating that the add user dialog should be opened.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        editChannelDialogOpenMobile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/state-service.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openDialogAddUser$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.showAddUserSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/state-service.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resizeListenerService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResizeListenerService\n\n                    \n                \n                \n                    \n                        Default value : inject(ResizeListenerService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/state-service.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showAddUserSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/state-service.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, inject } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { ResizeListenerService } from '../../shared/services/resize-listener.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StateService {\n  resizeListenerService: ResizeListenerService = inject(ResizeListenerService);\n  private showAddUserSubject = new Subject();\n  openDialogAddUser$ = this.showAddUserSubject.asObservable();\n  editChannelDialogOpenMobile: boolean = false;\n\n  /**\n   * Constructor function that registers a resize callback for the edit channel dialog on mobile devices.\n   */\n  constructor() {\n    this.resizeListenerService.registerResizeCallback(this.getEditChannelDialogOpenMobile.bind(this));\n  }\n\n  /**\n   * Sets the state of the edit channel dialog on mobile devices.\n   * @param {boolean} state - The state to set for the edit channel dialog on mobile devices.\n   */\n  setEditChannelDialogOpenMobile(state: boolean): void {\n    this.editChannelDialogOpenMobile = state;\n  }\n\n  /**\n   * Retrieves the state of the edit channel dialog on mobile devices.\n   * @return {boolean} The state of the edit channel dialog on mobile devices.\n   */\n  getEditChannelDialogOpenMobile(): boolean {\n    return this.editChannelDialogOpenMobile;\n  }\n\n  /**\n   * Triggers the `showAddUserSubject` BehaviorSubject to emit a new value, indicating that the add user dialog should be opened.\n   */\n  triggerAddUser(): void {\n    this.showAddUserSubject.next();\n  }\n\n  /**\n   * Unregisters the resize callback function from the ResizeListenerService\n   * in order to clean up and prevent memory leaks when the component is destroyed.\n   */\n  ngOnDestroy(): void {\n    this.resizeListenerService.unregisterResizeCallback(this.getEditChannelDialogOpenMobile.bind(this));\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ThreadService.html":{"url":"injectables/ThreadService.html","title":"injectable - ThreadService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ThreadService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/thread.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelService\n                            \n                            \n                                data$\n                            \n                            \n                                    Private\n                                dataSubject\n                            \n                            \n                                fileData\n                            \n                            \n                                firestore\n                            \n                            \n                                hideThread$\n                            \n                            \n                                    Private\n                                hideThreadSubject\n                            \n                            \n                                isActive\n                            \n                            \n                                isSubscribed\n                            \n                            \n                                messages\n                            \n                            \n                                messagesTimestamp\n                            \n                            \n                                originMessage\n                            \n                            \n                                startMutationObserver\n                            \n                            \n                                storageService\n                            \n                            \n                                unsub\n                            \n                            \n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeData\n                            \n                            \n                                clearFileData\n                            \n                            \n                                    Async\n                                createThreadMessage\n                            \n                            \n                                refThreadMessages\n                            \n                            \n                                refUpdateFilePath\n                            \n                            \n                                refUpdateThread\n                            \n                            \n                                restartListener\n                            \n                            \n                                startListenerChannel\n                            \n                            \n                                stopListener\n                            \n                            \n                                triggerHideThread\n                            \n                            \n                                    Async\n                                updateChannelMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/thread.service.ts:27\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changeData\n                        \n                    \n                \n            \n            \n                \nchangeData(data: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/thread.service.ts:37\n                        \n                    \n\n\n            \n                \n                        The changeData function in TypeScript updates the data and restarts the listener.\nThis string is then used to update the data subject using this.dataSubject.next(data) and to\nrestart a listener using this.restartListener(data).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data parameter is a string that is passed to the changeData method.\nThis string is then used to update the data subject using this.dataSubject.next(data) and to\nrestart a listener using this.restartListener(data).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearFileData\n                        \n                    \n                \n            \n            \n                \nclearFileData()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/thread.service.ts:98\n                        \n                    \n\n\n            \n                \n                        The clearFileData function resets file data and aborts any ongoing file upload for a thread.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createThreadMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    createThreadMessage(obj: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/thread.service.ts:70\n                        \n                    \n\n\n            \n                \n                        The createThreadMessage function asynchronously creates a new message in a thread, updates the\nthread information, and handles file uploads if present.\nmessage thread. It takes an obj parameter which contains the data for the new message being\ncreated. The function first adds the new message document to a collection using addDoc, then\nupdates the thread with the new message\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe createThreadMessage function is an asynchronous function that creates a new\nmessage thread. It takes an obj parameter which contains the data for the new message being\ncreated. The function first adds the new message document to a collection using addDoc, then\nupdates the thread with the new message\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refThreadMessages\n                        \n                    \n                \n            \n            \n                \nrefThreadMessages()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/thread.service.ts:146\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refUpdateFilePath\n                        \n                    \n                \n            \n            \n                \nrefUpdateFilePath(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/thread.service.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refUpdateThread\n                        \n                    \n                \n            \n            \n                \nrefUpdateThread()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/thread.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        restartListener\n                        \n                    \n                \n            \n            \n                \nrestartListener(data: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/thread.service.ts:121\n                        \n                    \n\n\n            \n                \n                        The restartListener function stops the current listener and then starts a new listener with the\nprovided data.\nparameter is used to restart the listener by stopping it and then starting it again with the new\ndata provided.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe restartListener function takes a data parameter of type string. This\nparameter is used to restart the listener by stopping it and then starting it again with the new\ndata provided.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startListenerChannel\n                        \n                    \n                \n            \n            \n                \nstartListenerChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/thread.service.ts:46\n                        \n                    \n\n\n            \n                \n                        The startListenerChannel function sets up a listener for changes in a Firestore query and updates\nthe messages array accordingly.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stopListener\n                        \n                    \n                \n            \n            \n                \nstopListener()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/thread.service.ts:106\n                        \n                    \n\n\n            \n                \n                        The stopListener function checks if a subscription is active and unsubscribes if it is.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        triggerHideThread\n                        \n                    \n                \n            \n            \n                \ntriggerHideThread()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/thread.service.ts:159\n                        \n                    \n\n\n            \n                \n                        Triggers the hiding of the thread by emitting a value through the hideThreadSubject.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateChannelMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateChannelMessage(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/thread.service.ts:134\n                        \n                    \n\n\n            \n                \n                        The updateChannelMessage function asynchronously updates a specific message in a channel based on\na matching timestamp.\ninformation related to updating a channel message. It likely includes properties such as\ntimestamp, emoji, and message that are used to identify and update a specific message in a\nchannel.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data parameter in the updateChannelMessage contains\ninformation related to updating a channel message. It likely includes properties such as\ntimestamp, emoji, and message that are used to identify and update a specific message in a\nchannel.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelService\n\n                    \n                \n                \n                    \n                        Default value : inject(ChannelService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.dataSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dataSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject('')\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fileData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : { src: '', name: '', type: '' }\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firestore\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Firestore\n\n                    \n                \n                \n                    \n                        Default value : inject(Firestore)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hideThread$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.hideThreadSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hideThreadSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSubscribed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messagesTimestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        originMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startMutationObserver\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storageService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StorageService\n\n                    \n                \n                \n                    \n                        Default value : inject(StorageService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsub\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Unsubscribe\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Default value : inject(UserService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, inject } from '@angular/core';\nimport { Firestore, Unsubscribe, addDoc, collection, doc, getDocs, onSnapshot, query, updateDoc } from '@angular/fire/firestore';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { ChannelService } from './channel.service';\nimport { UserService } from './user.service';\nimport { StorageService } from '../../shared/services/storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThreadService {\n  channelService: ChannelService = inject(ChannelService);\n  userService: UserService = inject(UserService);\n  firestore: Firestore = inject(Firestore);\n  storageService: StorageService = inject(StorageService);\n  originMessage!: any;\n  isActive: boolean = false;\n  private dataSubject = new BehaviorSubject('');\n  data$ = this.dataSubject.asObservable();\n  private hideThreadSubject = new Subject();\n  hideThread$ = this.hideThreadSubject.asObservable();\n  isSubscribed: boolean = false;\n  unsub!: Unsubscribe;\n  messages: any[] = [];\n  messagesTimestamp: any[] = [];\n  startMutationObserver: boolean = false;\n  fileData: any = { src: '', name: '', type: '' };\n\n  constructor() { }\n\n  /**\n   * The `changeData` function in TypeScript updates the data and restarts the listener.\n   * @param {string} data - The `data` parameter is a string that is passed to the `changeData` method.\n   * This string is then used to update the data subject using `this.dataSubject.next(data)` and to\n   * restart a listener using `this.restartListener(data)`.\n   */\n  changeData(data: string) {\n    this.dataSubject.next(data);\n    this.restartListener(data);\n  }\n\n/**\n * The `startListenerChannel` function sets up a listener for changes in a Firestore query and updates\n * the messages array accordingly.\n */\n  startListenerChannel() {\n    if (this.isSubscribed)\n      this.unsub();\n\n    this.unsub = onSnapshot(query(this.refThreadMessages()), (querySnapshot) => {\n      this.messages = [];\n      this.messagesTimestamp = [];\n      querySnapshot.forEach(async (doc) => {\n        this.messages.unshift(doc.data())\n        this.isSubscribed = true;\n      });\n      console.log(this.messages);\n      this.messages.sort((a, b) => a.timestamp - b.timestamp);\n    });\n  }\n\n/**\n * The `createThreadMessage` function asynchronously creates a new message in a thread, updates the\n * thread information, and handles file uploads if present.\n * @param {any} obj - The `createThreadMessage` function is an asynchronous function that creates a new\n * message thread. It takes an `obj` parameter which contains the data for the new message being\n * created. The function first adds the new message document to a collection using `addDoc`, then\n * updates the thread with the new message\n */\n  async createThreadMessage(obj: any) {\n    await addDoc(this.refThreadMessages(), obj)\n      .then(async (docRef) => {\n        await updateDoc(this.refUpdateThread(), {\n          repliesCount: this.messages.length,\n          lastReply: obj.timestamp\n        });\n        if (this.storageService.filesTextareaThread && this.storageService.filesTextareaThread.length > 0) {\n          this.fileData.src = this.storageService.downloadUrlThread;\n          this.fileData.name = this.storageService.fileNameTextareaThread;\n          this.fileData.type = this.storageService.uploadedFileTypeThread;\n          await updateDoc(this.refUpdateFilePath(docRef.id), {\n            uploadedFile: this.fileData\n          });\n          this.clearFileData();\n        }\n      });\n  }\n\n\n  refUpdateFilePath(id: string) {\n    return doc(this.firestore, \"Channels\", this.channelService.channelMsgData.collection, 'messages', this.originMessage.msgId, 'thread', id)\n  }\n\n\n/**\n * The clearFileData function resets file data and aborts any ongoing file upload for a thread.\n */\n  clearFileData() {\n    this.fileData = { src: '', name: '', type: '' };\n    this.storageService.abortUploadForThread();\n  }\n\n  /**\n   * The `stopListener` function checks if a subscription is active and unsubscribes if it is.\n   */\n  stopListener() {\n    if (this.isSubscribed) {\n      this.unsub();\n      this.isSubscribed = false;\n      console.log(\"Listener Unsubscribed\");\n    }\n  }\n\n  /**\n   * The `restartListener` function stops the current listener and then starts a new listener with the\n   * provided data.\n   * @param {string} data - The `restartListener` function takes a `data` parameter of type string. This\n   * parameter is used to restart the listener by stopping it and then starting it again with the new\n   * data provided.\n   */\n  restartListener(data: string) {\n    this.stopListener();\n    this.startListenerChannel();\n  }\n\n/**\n * The `updateChannelMessage` function asynchronously updates a specific message in a channel based on\n * a matching timestamp.\n * @param {any} data - The `data` parameter in the `updateChannelMessage` contains\n * information related to updating a channel message. It likely includes properties such as\n * `timestamp`, `emoji`, and `message` that are used to identify and update a specific message in a\n * channel.\n */\n  async updateChannelMessage(data: any) {\n    const querySnapshot = await getDocs(query(this.refThreadMessages()));\n    querySnapshot.forEach(async (dataset) => {\n      if (data.timestamp == dataset.data()['timestamp']) {\n        await updateDoc(doc(this.firestore, \"Channels\", this.channelService.channelMsgData.collection, 'messages', this.originMessage.msgId, 'thread', dataset.id), {\n          emoji: data.emoji,\n          message: data.message\n        });\n      }\n    });\n  }\n\n  refThreadMessages() {\n    return collection(this.firestore, \"Channels\", this.channelService.channelMsgData.collection, 'messages', this.originMessage.msgId, 'thread')\n  }\n\n  refUpdateThread() {\n    return doc(this.firestore, \"Channels\", this.channelService.channelMsgData.collection, \"messages\", this.originMessage.msgId)\n  }\n\n\n\n  /**\n   * Triggers the hiding of the thread by emitting a value through the hideThreadSubject.\n   */\n  triggerHideThread() {\n    this.hideThreadSubject.next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserData.html":{"url":"classes/UserData.html","title":"class - UserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/userdata.class.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                isLoggedIn\n                            \n                            \n                                name\n                            \n                            \n                                profilePicture\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(obj?: any)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/models/userdata.class.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        obj\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/userdata.class.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/userdata.class.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoggedIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/userdata.class.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/userdata.class.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profilePicture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/userdata.class.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserData {\n    email: string;\n    id: string;\n    isLoggedIn: boolean;\n    name: string;\n    profilePicture: string;\n\n    constructor(obj?: any) {\n        this.email = obj ? obj.email : \"\";\n        this.id = obj ? obj.id : \"\";\n        this.isLoggedIn = true;\n        this.name = obj ? obj.name : \"\";\n        this.profilePicture = obj ? obj.profilePicture : \"\";\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserInfo.html":{"url":"interfaces/UserInfo.html","title":"interface - UserInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/userinfo.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            isLoggedIn\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            profilePicture\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isLoggedIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isLoggedIn:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profilePicture\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        profilePicture:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInfo {\n    email: string,\n    id: string,\n    isLoggedIn: boolean,\n    name: string,\n    profilePicture: string,\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/UserMenuDialogComponent.html":{"url":"components/UserMenuDialogComponent.html","title":"component - UserMenuDialogComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  UserMenuDialogComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/header/user-menu-dialog/user-menu-dialog.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-user-menu-dialog\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            MatDialogTitle\n                            MatDialogContent\n                            MatDialogActions\n                            MatDialogClose\n                            RouterLink\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./user-menu-dialog.component.html\n            \n\n\n\n            \n                styleUrl\n                ./user-menu-dialog.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelService\n                            \n                            \n                                    Public\n                                dialog\n                            \n                            \n                                hoverLogout\n                            \n                            \n                                hoverProfile\n                            \n                            \n                                threadService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeDialog\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                openDialog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialog: MatDialog, dialogRef: MatDialogRef, dialogRefAddUser: MatDialogRef, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/components/header/user-menu-dialog/user-menu-dialog.component.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialogRefAddUser\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeDialog\n                        \n                    \n                \n            \n            \n                \ncloseDialog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/header/user-menu-dialog/user-menu-dialog.component.ts:59\n                        \n                    \n\n\n            \n                \n                        The closeDialog function closes all open dialog windows.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/header/user-menu-dialog/user-menu-dialog.component.ts:32\n                        \n                    \n\n\n            \n                \n                        The logout function logs out the user, clears session storage, signs out of authentication, stops\nlistening to channels and threads, resets user information, and closes a dialog.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openDialog\n                        \n                    \n                \n            \n            \n                \nopenDialog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/header/user-menu-dialog/user-menu-dialog.component.ts:48\n                        \n                    \n\n\n            \n                \n                        This function opens the dialog and determines if the ShowProfile component is editable or not\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelService\n\n                    \n                \n                \n                    \n                        Default value : inject(ChannelService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/user-menu-dialog/user-menu-dialog.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatDialog\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/user-menu-dialog/user-menu-dialog.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hoverLogout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/user-menu-dialog/user-menu-dialog.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hoverProfile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/user-menu-dialog/user-menu-dialog.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        threadService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ThreadService\n\n                    \n                \n                \n                    \n                        Default value : inject(ThreadService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/user-menu-dialog/user-menu-dialog.component.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, ViewChildren, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatDialog, MatDialogActions, MatDialogClose, MatDialogContent, MatDialogRef, MatDialogTitle } from '@angular/material/dialog';\nimport { RouterLink } from '@angular/router';\nimport { ShowProfileComponent } from '../../show-profile/show-profile.component';\nimport { UserService } from '../../../services/user.service';\nimport { UserData } from '../../../models/userdata.class';\nimport { getAuth } from '@angular/fire/auth';\nimport { ChannelService } from '../../../services/channel.service';\nimport { subscribeOn } from 'rxjs';\nimport { AddUserDialogComponent } from '../../../../mainsection/channel/add-user-dialog/add-user-dialog.component';\nimport { AddUserToChannelDialogComponent } from '../../../../mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component';\nimport { ThreadService } from '../../../services/thread.service';\n@Component({\n  selector: 'app-user-menu-dialog',\n  standalone: true,\n  imports: [CommonModule, MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogClose, RouterLink],\n  templateUrl: './user-menu-dialog.component.html',\n  styleUrl: './user-menu-dialog.component.scss'\n})\nexport class UserMenuDialogComponent {\n  constructor(public dialog: MatDialog, private dialogRef: MatDialogRef, private dialogRefAddUser: MatDialogRef, private userService: UserService) { }\n  channelService: ChannelService = inject(ChannelService);\n  threadService:ThreadService = inject(ThreadService);\n  hoverProfile: boolean = false;\n  hoverLogout: boolean = false;\n\n/**\n * The `logout` function logs out the user, clears session storage, signs out of authentication, stops\n * listening to channels and threads, resets user information, and closes a dialog.\n */\n  async logout() {\n    await this.userService.userLoggedOut();\n    sessionStorage.removeItem('uid');\n    getAuth().signOut();\n    this.channelService.stopListener();\n    this.threadService.stopListener();\n    setTimeout(() => {\n      this.userService.userInfo = new UserData();\n    }, 200);\n    this.dialogRef.close();\n  }\n\n  /**\n   * This function opens the dialog and determines if the ShowProfile component is editable or not\n   * @param profileEditable boolean - determine if ShowUser component is editable or not\n   */\n  openDialog() {\n    let dialogRef = this.dialog.open(ShowProfileComponent, { panelClass: ['show-profile', 'box-shadow', 'box-radius-right-corner'] });\n    dialogRef.componentInstance.profileEditable = true;\n    dialogRef\n      .afterClosed()\n      .subscribe();\n  }\n\n/**\n * The closeDialog function closes all open dialog windows.\n */\n  closeDialog() {\n    this.dialog.closeAll();\n  }\n}\n\n    \n\n    \n        \n    \n    \n        \n            Profil\n        \n    \n    \n        \n            Log Out\n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                            Profil                                    Log Out            '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'UserMenuDialogComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                allUsers\n                            \n                            \n                                createUserInfo\n                            \n                            \n                                    Optional\n                                currentUser\n                            \n                            \n                                firestore\n                            \n                            \n                                key\n                            \n                            \n                                otherUserInfo\n                            \n                            \n                                userChannels\n                            \n                            \n                                userInfo\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkIfUserExists\n                            \n                            \n                                    Async\n                                checkRegisteredUser\n                            \n                            \n                                    Async\n                                createUserProfile\n                            \n                            \n                                    Async\n                                getOnlineStatusProfile\n                            \n                            \n                                newUserAvatar\n                            \n                            \n                                prepareDataNewUser\n                            \n                            \n                                prepareDataNewUserGoogle\n                            \n                            \n                                refUserChannels\n                            \n                            \n                                refUserProfile\n                            \n                            \n                                retrieveAllUsers\n                            \n                            \n                                    Async\n                                retrieveOtherUserProfile\n                            \n                            \n                                retrieveUserChannels\n                            \n                            \n                                retrieveUserProfile\n                            \n                            \n                                    Async\n                                updateUserProfile\n                            \n                            \n                                    Async\n                                updateUserProfilePicture\n                            \n                            \n                                    Async\n                                userLoggedIn\n                            \n                            \n                                    Async\n                                userLoggedOut\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/user.service.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkIfUserExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkIfUserExists(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Check if a user already exists in Firestore\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user ID to check\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A boolean indicating whether the user exists\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkRegisteredUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkRegisteredUser(email: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Check if a user with the given email and name already exists in the Firestore \"user\" collection.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe email of the user to check.\n\n\n                                            \n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the user to check.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to an object with two boolean properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUserProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUserProfile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:162\n                        \n                    \n\n\n            \n                \n                        Creates a new user in firestore\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOnlineStatusProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOnlineStatusProfile(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:229\n                        \n                    \n\n\n            \n                \n                        The function getOnlineStatusProfile retrieves the online status profile of a user with the\nspecified ID.\nrepresents the unique identifier of a user profile.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id parameter in the getOnlineStatusProfile function is a string that\nrepresents the unique identifier of a user profile.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newUserAvatar\n                        \n                    \n                \n            \n            \n                \nnewUserAvatar(url: any, uid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:218\n                        \n                    \n\n\n            \n                \n                        Function to assign Profile picture url to createUserInfo\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nURL of the img uploaded to the firestore\n\n\n                                            \n                                        \n                                        \n                                                uid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prepareDataNewUser\n                        \n                    \n                \n            \n            \n                \nprepareDataNewUser(obj: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:195\n                        \n                    \n\n\n            \n                \n                        Function to assign incoming data to createUserInfo\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nFormGroup which contains data from the register form\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prepareDataNewUserGoogle\n                        \n                    \n                \n            \n            \n                \nprepareDataNewUserGoogle(obj: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:206\n                        \n                    \n\n\n            \n                \n                        Function to assign incoming data to createUserInfo\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nFormGroup which contains data from the register form\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refUserChannels\n                        \n                    \n                \n            \n            \n                \nrefUserChannels()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:186\n                        \n                    \n\n\n            \n                \n                        The refUserChannels function returns a reference to the user channels collection in Firestore\nbased on the current user's ID stored in sessionStorage.\nwithin the 'user' document corresponding to the user ID stored in the session storage.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                The refUserChannels() function is returning a reference to the 'userchannels' collection\nwithin the 'user' document corresponding to the user ID stored in the session storage.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refUserProfile\n                        \n                    \n                \n            \n            \n                \nrefUserProfile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:176\n                        \n                    \n\n\n            \n                \n                        Return the collection to which should be referenced to in a snapshot for example\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                collection reference - firestore\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        retrieveAllUsers\n                        \n                    \n                \n            \n            \n                \nretrieveAllUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:123\n                        \n                    \n\n\n            \n                \n                        The function retrieveAllUsers retrieves all user data from a Firestore collection\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                The unsubscribe function is being returned from the retrieveAllUsers function.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        retrieveOtherUserProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    retrieveOtherUserProfile(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:78\n                        \n                    \n\n\n            \n                \n                        This TypeScript function retrieves the profile information of another user using their ID from a\nFirestore database.\nrepresents the unique identifier of the user whose profile you want to retrieve.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id parameter in the retrieveOtherUserProfile function is a string that\nrepresents the unique identifier of the user whose profile you want to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        retrieveUserChannels\n                        \n                    \n                \n            \n            \n                \nretrieveUserChannels()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:109\n                        \n                    \n\n\n            \n                \n                        listens to changes to referenced collection and stores the data\nin userChannels\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                Unsubscribe from snapshot\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        retrieveUserProfile\n                        \n                    \n                \n            \n            \n                \nretrieveUserProfile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:64\n                        \n                    \n\n\n            \n                \n                        listens to changes to referenced collection and stores the data\nin userInfo\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                Unsubscribe from snapshot\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUserProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserProfile(ngForm: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:137\n                        \n                    \n\n\n            \n                \n                        Gets the Data from input parameter and updates it in the firestore of the current user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ngForm\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Objectdata provided by the form in show-profile component\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUserProfilePicture\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserProfilePicture(picturePath: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:153\n                        \n                    \n\n\n            \n                \n                        The updateUserProfilePicture function updates the profile picture of the current user in a\nFirestore database.\nis a string that represents the file path or URL of the new profile picture that will be updated in\nthe user's profile.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                picturePath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe picturePath parameter in the updateUserProfilePicture function\nis a string that represents the file path or URL of the new profile picture that will be updated in\nthe user's profile.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        userLoggedIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    userLoggedIn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:88\n                        \n                    \n\n\n            \n                \n                        The userLoggedIn function updates the isLoggedIn field in the user profile document to true for\nthe currently logged-in user.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        userLoggedOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    userLoggedOut()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:98\n                        \n                    \n\n\n            \n                \n                        The function userLoggedOut updates the isLoggedIn field to false in the user profile document\nwhen the user logs out.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        allUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DocumentData[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/user.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createUserInfo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserInfo\n\n                    \n                \n                \n                    \n                        Default value : {\n    name: \"\",\n    email: \"\",\n    id: \"\",\n    isLoggedIn: false,\n    profilePicture: \"\",\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/user.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        currentUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/user.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firestore\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Firestore\n\n                    \n                \n                \n                    \n                        Default value : inject(Firestore)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/user.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/user.service.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        otherUserInfo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/user.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userChannels\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/user.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userInfo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserInfo\n\n                    \n                \n                \n                    \n                        Default value : new UserData()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/user.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, inject } from '@angular/core';\nimport { Firestore, Unsubscribe, addDoc, collection, doc, query, getDoc, getDocs, setDoc, onSnapshot, updateDoc, where, DocumentData, arrayUnion } from '@angular/fire/firestore';\nimport { UserInfo } from '../interfaces/userinfo';\nimport { UserData } from '../models/userdata.class';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class UserService {\n  firestore: Firestore = inject(Firestore);\n  currentUser?: string | null;\n  userInfo: UserInfo = new UserData();\n  otherUserInfo!: any;\n  userChannels: string[] = [];\n  allUsers: DocumentData[] = [];\n  createUserInfo: UserInfo = {\n    name: \"\",\n    email: \"\",\n    id: \"\",\n    isLoggedIn: false,\n    profilePicture: \"\",\n  };\n  key!: string;\n\n  constructor(private router: Router) {\n    if (sessionStorage.getItem(\"uid\") === null && (this.router.url !== '/register' && !this.router.url.includes('confirmpassword')))\n      this.router.navigate(['/']);\n  }\n\n  /**\n   * Check if a user already exists in Firestore\n   * @param userId - The user ID to check\n   * @returns A boolean indicating whether the user exists\n   */\n  async checkIfUserExists(userId: string): Promise {\n    const userDoc = await getDoc(doc(this.firestore, \"user\", userId));\n    const userExists = userDoc.exists();\n    return userExists;\n  }\n\n  /**\n   * Check if a user with the given email and name already exists in the Firestore \"user\" collection.\n   * @param {string} email - The email of the user to check.\n   * @param {string} name - The name of the user to check.\n   * @return {Promise} A promise that resolves to an object with two boolean properties.\n   */\n  async checkRegisteredUser(email: string, name: string): Promise {\n    const emailQuery = query(collection(this.firestore, \"user\"), where(\"email\", \"==\", email));\n    const nameQuery = query(collection(this.firestore, \"user\"), where(\"name\", \"==\", name));\n    const [emailSnapshot, nameSnapshot] = await Promise.all([getDocs(emailQuery), getDocs(nameQuery)]);\n    return {\n      emailExists: !emailSnapshot.empty,\n      nameExists: !nameSnapshot.empty\n    };\n  }\n\n  /**\n   * listens to changes to referenced collection and stores the data\n   * in userInfo\n   * @returns Unsubscribe from snapshot\n   */\n  retrieveUserProfile() {\n    const unsubscribe = onSnapshot(doc(this.refUserProfile(), sessionStorage.getItem(\"uid\") as string), async (user) => {\n      this.userInfo = new UserData(user.data())\n      this.currentUser = sessionStorage.getItem(\"uid\");\n    });\n    return unsubscribe\n  }\n\n/**\n * This TypeScript function retrieves the profile information of another user using their ID from a\n * Firestore database.\n * @param {string} id - The `id` parameter in the `retrieveOtherUserProfile` function is a string that\n * represents the unique identifier of the user whose profile you want to retrieve.\n */\n  async retrieveOtherUserProfile(id: string) {\n    const docRef = doc(this.firestore, \"user\", id);\n    const docSnap = await getDoc(docRef);\n    this.otherUserInfo = docSnap.data();\n  }\n\n/**\n * The `userLoggedIn` function updates the `isLoggedIn` field in the user profile document to true for\n * the currently logged-in user.\n */\n  async userLoggedIn() {\n    await updateDoc(doc(this.refUserProfile(), sessionStorage.getItem('uid') as string), {\n      isLoggedIn: true\n    });\n  }\n\n/**\n * The function `userLoggedOut` updates the `isLoggedIn` field to `false` in the user profile document\n * when the user logs out.\n */\n  async userLoggedOut() {\n    await updateDoc(doc(this.refUserProfile(), sessionStorage.getItem('uid') as string), {\n      isLoggedIn: false\n    });\n  }\n\n  /**\n   * listens to changes to referenced collection and stores the data\n   * in userChannels\n   * @returns Unsubscribe from snapshot\n   */\n  retrieveUserChannels() {\n    const unsubscribe = onSnapshot(query(this.refUserChannels()), (querySnapshot) => {\n      this.userChannels = [];\n      querySnapshot.forEach(element => {\n        this.userChannels.unshift(element.data()['channelid']);\n      });\n    });\n    return unsubscribe\n  }\n\n  /**\n   * The function `retrieveAllUsers` retrieves all user data from a Firestore collection\n   * @returns The `unsubscribe` function is being returned from the `retrieveAllUsers` function.\n   */\n  retrieveAllUsers() {\n    const unsubscribe = onSnapshot(query(this.refUserProfile()), (querySnapshot) => {\n      this.allUsers = [];\n      querySnapshot.forEach((doc) => {\n        this.allUsers.push(doc.data())\n      });\n    });\n    return unsubscribe\n  }\n\n  /**\n   * Gets the Data from input parameter and updates it in the firestore of the current user\n   * @param ngForm Objectdata provided by the form in show-profile component\n   */\n  async updateUserProfile(ngForm: any) {\n    const userProfileData = ngForm.value\n\n    await updateDoc(doc(this.refUserProfile(), this.currentUser as string), {\n      name: userProfileData.name,\n      email: userProfileData.email\n    });\n  }\n\n  /**\n   * The `updateUserProfilePicture` function updates the profile picture of the current user in a\n   * Firestore database.\n   * @param {string} picturePath - The `picturePath` parameter in the `updateUserProfilePicture` function\n   * is a string that represents the file path or URL of the new profile picture that will be updated in\n   * the user's profile.\n   */\n  async updateUserProfilePicture(picturePath: string) {\n    await updateDoc(doc(this.refUserProfile(), this.currentUser as string), {\n      profilePicture: picturePath\n    });\n  }\n\n  /**\n   * Creates a new user in firestore\n   */\n  async createUserProfile() {\n    await setDoc(doc(this.firestore, \"user\", this.createUserInfo.id), this.createUserInfo)\n      .then(async () => {\n        const channelId = { channelid: 'eGATth4XDS0ztUbhnYsR' };\n        await addDoc(collection(this.firestore, 'user', this.createUserInfo.id, 'userchannels'), channelId);\n        await addDoc(collection(this.firestore, 'user', this.createUserInfo.id, 'directmessages'), { dmUserId: this.createUserInfo.id });\n        await updateDoc(doc(this.firestore, \"Channels\", channelId.channelid), { users: arrayUnion(this.createUserInfo.id) });\n      });\n  }\n\n  /**\n   * Return the collection to which should be referenced to in a snapshot for example\n   * @returns collection reference - firestore\n   */\n  refUserProfile() {\n    return collection(this.firestore, \"user\")\n  }\n\n  /**\n   * The `refUserChannels` function returns a reference to the user channels collection in Firestore\n   * based on the current user's ID stored in sessionStorage.\n   * @returns The `refUserChannels()` function is returning a reference to the 'userchannels' collection\n   * within the 'user' document corresponding to the user ID stored in the session storage.\n   */\n  refUserChannels() {\n    return collection(this.firestore, 'user', sessionStorage.getItem(\"uid\") as string, 'userchannels')\n  }\n\n  /**\n   * Function to assign incoming data to createUserInfo\n   * @param obj - FormGroup which contains data from the register form\n   * @param uid - user ID from authentification\n   */\n  prepareDataNewUser(obj: any) {\n    this.createUserInfo.name = obj.name;\n    this.createUserInfo.email = obj.email;\n    this.createUserInfo.isLoggedIn = false;\n  }\n\n  /**\n   * Function to assign incoming data to createUserInfo\n   * @param obj - FormGroup which contains data from the register form\n   * @param uid - user ID from authentification\n   */\n  prepareDataNewUserGoogle(obj: any) {\n    this.createUserInfo.name = obj.displayName;\n    this.createUserInfo.email = obj.email;\n    this.createUserInfo.isLoggedIn = false;\n    this.createUserInfo.id = obj.uid;\n    this.createUserInfo.profilePicture = obj.photoURL;\n  }\n\n  /**\n   * Function to assign Profile picture url to createUserInfo\n   * @param url - URL of the img uploaded to the firestore\n   */\n  newUserAvatar(url: any, uid: string) {\n    this.createUserInfo.id = uid;\n    this.createUserInfo.profilePicture = url;\n  }\n\n  /**\n   * The function `getOnlineStatusProfile` retrieves the online status profile of a user with the\n   * specified ID.\n   * @param {string} id - The `id` parameter in the `getOnlineStatusProfile` function is a string that\n   * represents the unique identifier of a user profile.\n   */\n  async getOnlineStatusProfile(id: string) {\n    const docSnap = await getDoc(doc(this.firestore, \"user\", id));\n    this.otherUserInfo.isLoggedIn = docSnap.data()!['isLoggedIn'];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/VerifyComponent.html":{"url":"components/VerifyComponent.html","title":"component - VerifyComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  VerifyComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/verify/verify.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-verify\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            MatDialogClose\n                            ReactiveFormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./verify.component.html\n            \n\n\n\n            \n                styleUrl\n                ./verify.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authService\n                            \n                            \n                                key\n                            \n                            \n                                keyForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                submitKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialogRef: MatDialogRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/components/verify/verify.component.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        submitKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    submitKey()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/verify/verify.component.ts:29\n                        \n                    \n\n\n            \n                \n                        The submitKey function asynchronously verifies a key input, sets a flag to indicate verification,\nand closes a dialog window.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthService\n\n                    \n                \n                \n                    \n                        Default value : inject(AuthService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/verify/verify.component.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/verify/verify.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keyForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/verify/verify.component.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { MatDialogClose, MatDialogRef } from '@angular/material/dialog';\nimport { CommonModule } from '@angular/common';\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-verify',\n  standalone: true,\n  imports: [CommonModule, MatDialogClose, ReactiveFormsModule],\n  templateUrl: './verify.component.html',\n  styleUrl: './verify.component.scss',\n})\nexport class VerifyComponent {\n  authService: AuthService = inject(AuthService);\n  keyForm: FormGroup;\n  key!: string;\n\n  constructor(private dialogRef: MatDialogRef) {\n    this.keyForm = new FormGroup({\n      key: new FormControl(''),\n    });\n  }\n\n/**\n * The `submitKey` function asynchronously verifies a key input, sets a flag to indicate verification,\n * and closes a dialog window.\n */\n  async submitKey() {\n    await this.authService.verifyChange(this.keyForm.controls['key'].value);\n    this.authService.verified = true;\n    this.dialogRef.close()\n  }\n}\n\n    \n\n    \n        \n    Bitte Passwort eingeben\n    \n        \n    \n    Bestätigen\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Bitte Passwort eingeben                    Bestätigen'\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'VerifyComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/imprint/imprint.component.ts\n            \n            component\n            ImprintComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/login/chooseavatar/chooseavatar.component.ts\n            \n            component\n            ChooseavatarComponent\n            \n                46 %\n                (7/15)\n            \n        \n        \n            \n                \n                src/app/login/confirmpassword/confirmpassword.component.ts\n            \n            component\n            ConfirmpasswordComponent\n            \n                42 %\n                (6/14)\n            \n        \n        \n            \n                \n                src/app/login/login.component.ts\n            \n            component\n            LoginComponent\n            \n                37 %\n                (14/37)\n            \n        \n        \n            \n                \n                src/app/login/register/register.component.ts\n            \n            component\n            RegisterComponent\n            \n                50 %\n                (8/16)\n            \n        \n        \n            \n                \n                src/app/login/resetpassword/resetpassword.component.ts\n            \n            component\n            ResetpasswordComponent\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts\n            \n            component\n            AddUserDialogComponent\n            \n                21 %\n                (3/14)\n            \n        \n        \n            \n                \n                src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts\n            \n            component\n            AddUserToChannelDialogComponent\n            \n                6 %\n                (1/15)\n            \n        \n        \n            \n                \n                src/app/mainsection/channel/channel-messages/channel-messages.component.ts\n            \n            component\n            ChannelMessagesComponent\n            \n                39 %\n                (13/33)\n            \n        \n        \n            \n                \n                src/app/mainsection/channel/channel-messages/message/message.component.ts\n            \n            component\n            MessageComponent\n            \n                9 %\n                (5/54)\n            \n        \n        \n            \n                \n                src/app/mainsection/channel/channel.component.ts\n            \n            component\n            ChannelComponent\n            \n                8 %\n                (3/37)\n            \n        \n        \n            \n                \n                src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts\n            \n            component\n            EditChannelDialogComponent\n            \n                28 %\n                (4/14)\n            \n        \n        \n            \n                \n                src/app/mainsection/mainsection.component.ts\n            \n            component\n            MainsectionComponent\n            \n                41 %\n                (14/34)\n            \n        \n        \n            \n                \n                src/app/mainsection/sidebar/add-new-channel/add-new-channel.component.ts\n            \n            component\n            AddNewChannelComponent\n            \n                27 %\n                (3/11)\n            \n        \n        \n            \n                \n                src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts\n            \n            component\n            AddNewUserToChannelComponent\n            \n                36 %\n                (7/19)\n            \n        \n        \n            \n                \n                src/app/mainsection/sidebar/sidebar.component.ts\n            \n            component\n            SidebarComponent\n            \n                40 %\n                (11/27)\n            \n        \n        \n            \n                \n                src/app/mainsection/thread/thread.component.ts\n            \n            component\n            ThreadComponent\n            \n                3 %\n                (2/65)\n            \n        \n        \n            \n                \n                src/app/outsideclick.directive.ts\n            \n            directive\n            OutsideclickDirective\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/privacypolicy/privacypolicy.component.ts\n            \n            component\n            PrivacypolicyComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/components/header/header.component.ts\n            \n            component\n            HeaderComponent\n            \n                30 %\n                (6/20)\n            \n        \n        \n            \n                \n                src/app/shared/components/header/user-menu-dialog/user-menu-dialog.component.ts\n            \n            component\n            UserMenuDialogComponent\n            \n                30 %\n                (3/10)\n            \n        \n        \n            \n                \n                src/app/shared/components/show-profile/show-profile.component.ts\n            \n            component\n            ShowProfileComponent\n            \n                34 %\n                (10/29)\n            \n        \n        \n            \n                \n                src/app/shared/components/verify/verify.component.ts\n            \n            component\n            VerifyComponent\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/channelinfo.ts\n            \n            interface\n            ChannelInfo\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/userinfo.ts\n            \n            interface\n            UserInfo\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/shared/models/channels.class.ts\n            \n            class\n            ChannelData\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/shared/models/message.class.ts\n            \n            class\n            MessageData\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/app/shared/models/userdata.class.ts\n            \n            class\n            UserData\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/shared/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                src/app/shared/services/channel.service.ts\n            \n            injectable\n            ChannelService\n            \n                37 %\n                (22/58)\n            \n        \n        \n            \n                \n                src/app/shared/services/emoji.service.ts\n            \n            injectable\n            EmojiService\n            \n                0 %\n                (0/21)\n            \n        \n        \n            \n                \n                src/app/shared/services/mutation.observer.service.ts\n            \n            injectable\n            MutationObserverService\n            \n                25 %\n                (2/8)\n            \n        \n        \n            \n                \n                src/app/shared/services/resize-listener.service.ts\n            \n            injectable\n            ResizeListenerService\n            \n                91 %\n                (11/12)\n            \n        \n        \n            \n                \n                src/app/shared/services/sidebar.service.ts\n            \n            injectable\n            SidebarService\n            \n                44 %\n                (8/18)\n            \n        \n        \n            \n                \n                src/app/shared/services/state-service.service.ts\n            \n            injectable\n            StateService\n            \n                50 %\n                (5/10)\n            \n        \n        \n            \n                \n                src/app/shared/services/storage.service.ts\n            \n            injectable\n            StorageService\n            \n                38 %\n                (16/42)\n            \n        \n        \n            \n                \n                src/app/shared/services/thread.service.ts\n            \n            injectable\n            ThreadService\n            \n                27 %\n                (8/29)\n            \n        \n        \n            \n                \n                src/app/shared/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                62 %\n                (17/27)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^17.0.0\n        \n            @angular/cdk : ^17.3.10\n        \n            @angular/common : ^17.0.0\n        \n            @angular/compiler : ^17.0.0\n        \n            @angular/core : ^17.0.0\n        \n            @angular/fire : ^17.1.0\n        \n            @angular/forms : ^17.0.0\n        \n            @angular/material : ^17.3.10\n        \n            @angular/platform-browser : ^17.0.0\n        \n            @angular/platform-browser-dynamic : ^17.0.0\n        \n            @angular/router : ^17.0.0\n        \n            @ctrl/ngx-emoji-mart : ^9.2.0\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.14.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDaBubble\nThis project was generated with Angular CLI version 17.0.6.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The application will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    23 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideRouter(routes, withViewTransitions()),\n    provideAnimations(),\n    provideFirebaseApp(() =>\n      initializeApp({\n        projectId: 'da-bubble-e6d79',\n        appId: '1:728652156728:web:52fda9767640c5a89efbcd',\n        storageBucket: 'da-bubble-e6d79.appspot.com',\n        apiKey: Environment.API_KEY,\n        authDomain: 'da-bubble-e6d79.firebaseapp.com',\n        messagingSenderId: '728652156728',\n      })\n    ),\n    provideFirestore(() => getFirestore()),\n    provideStorage(() => getStorage()),\n    provideAuth(() => getAuth()),\n  ],\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
