var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AddNewChannelComponent.html",[0,0.013,1,0.681]],["body/components/AddNewChannelComponent.html",[0,0.019,1,1.063,2,0.899,3,0.192,4,0.164,5,0.676,6,0.627,7,0.676,8,0.164,9,4.608,10,0.93,11,4.165,12,2.079,13,0.627,14,1.496,15,1.608,16,1.324,17,1.15,18,0.899,19,0.701,20,0.968,21,2.82,22,2.576,23,1.217,24,1.171,25,0.968,26,3.398,27,1.12,28,3.398,29,0.164,30,0.275,31,3.97,32,1.951,33,1.606,34,2.097,35,3.97,36,4.716,37,2.432,38,0.498,39,1.217,40,4.917,41,3.391,42,5.671,43,0.348,44,1.685,45,2.977,46,3.492,47,0.617,48,3.398,49,0.498,50,0.029,51,0.397,52,0.358,53,0.636,54,4.036,55,3.19,56,2.817,57,1.161,58,4.036,59,2.585,60,1.731,61,2.664,62,2.736,63,3.263,64,3.113,65,4.716,66,4.716,67,0.973,68,5.149,69,1.606,70,0.582,71,2.817,72,2.026,73,2.978,74,0.986,75,2.664,76,0.771,77,2.817,78,2.413,79,1.744,80,2.185,81,3.398,82,4.036,83,4.036,84,4.036,85,0.771,86,0.699,87,0.699,88,0.899,89,1.492,90,2.372,91,2.817,92,4.335,93,2.372,94,3.113,95,2.372,96,2.205,97,2.372,98,0.762,99,0.676,100,0.538,101,0.314,102,1.042,103,1.121,104,1.539,105,2.817,106,2.664,107,2.817,108,2.372,109,1.86,110,2.817,111,0.192,112,0.136,113,1.685,114,0.969,115,2.817,116,1.539,117,2.205,118,1.305,119,1.539,120,0.627,121,2.079,122,2.372,123,0.582,124,2.372,125,1.208,126,1.415,127,2.079,128,4.036,129,2.372,130,2.079,131,2.372,132,3.97,133,2.372,134,2.079,135,1.86,136,2.079,137,4.036,138,2.372,139,0.627,140,2.817,141,2.817,142,4.036,143,1.86,144,2.372,145,2.817,146,2.817,147,2.817,148,2.817,149,3.799,150,1.87,151,4.036,152,3.398,153,4.036,154,4.036,155,4.036,156,4.036,157,4.036,158,3.398,159,4.036,160,4.036,161,4.036,162,4.036,163,4.036,164,4.036,165,3.398,166,2.978,167,2.978,168,2.978,169,3.398,170,3.398,171,2.978,172,2.413,173,2.978,174,3.398,175,3.398,176,3.398,177,0.676,178,0.968,179,0.899,180,0.496,181,1.235,182,0.676,183,1.131,184,0.582,185,1.235,186,0.582,187,0.582,188,0.676,189,0.627,190,0.627,191,0.676,192,0.582,193,0.676,194,0.582,195,0.676,196,0.582,197,0.627,198,0.582,199,0.676,200,0.582,201,0.676,202,0.627,203,0.676,204,0.582,205,0.676,206,0.627,207,0.676,208,0.627,209,0.676,210,0.582,211,0.676,212,0.582,213,0.676,214,0.582,215,0.627,216,0.676,217,0.582,218,0.676,219,0.627,220,0.676,221,0.582,222,0.627,223,0.582,224,0.676,225,0.627,226,0.538,227,0.627,228,0.676,229,0.017,230,0.017]],["title/components/AddNewUserToChannelComponent.html",[0,0.013,24,0.681]],["body/components/AddNewUserToChannelComponent.html",[0,0.017,1,0.482,2,0.784,3,0.159,4,0.136,5,0.561,6,0.521,7,0.561,8,0.136,9,4.737,10,0.928,11,4.238,12,1.725,13,0.521,14,1.468,15,1.577,16,1.219,17,1.057,18,0.784,19,0.629,20,0.844,21,2.53,22,2.311,23,1.092,24,0.972,25,0.844,26,2.962,27,0.976,28,2.962,29,0.293,30,0.239,32,1.825,35,3.562,37,2.275,38,0.434,39,1.092,40,4.467,43,0.522,47,0.639,48,1.968,49,0.434,50,0.029,51,0.374,52,0.371,53,0.581,55,1.277,57,1.204,59,2.124,62,1.766,67,0.726,69,1.873,70,0.679,72,1.766,74,1.122,76,1.051,79,2.095,80,2.458,85,0.964,86,0.748,87,0.802,88,0.942,89,1.301,90,1.968,93,1.968,95,1.968,96,1.922,97,1.968,98,0.729,99,0.561,100,0.446,101,0.261,102,0.864,103,0.93,104,1.277,109,1.543,111,0.159,112,0.113,120,0.784,123,1.095,125,1.509,149,2.596,177,0.561,178,0.844,179,1.048,180,0.412,181,1.129,182,0.561,183,1.015,184,0.482,185,1.129,186,0.482,187,0.482,188,0.561,189,0.521,190,0.521,191,0.561,192,0.482,193,0.561,194,0.482,195,0.561,196,0.482,197,0.521,198,0.482,199,0.561,200,0.482,201,0.561,202,0.521,203,0.561,204,0.482,205,0.561,206,0.521,207,0.561,208,0.521,209,0.561,210,0.482,211,0.561,212,0.482,213,0.561,214,0.482,215,0.521,216,0.561,217,0.482,218,0.561,219,0.521,220,0.561,221,0.482,222,0.942,223,0.482,224,0.561,225,0.521,226,0.446,227,0.521,228,0.561,229,0.014,230,0.019,231,3.122,232,4.231,233,4.231,234,5.049,235,4.635,236,4.231,237,2.535,238,4.062,239,1.181,240,5.305,241,3.914,242,4.467,243,3.963,244,4.467,245,4.467,246,2.337,247,2.337,248,3.518,249,3.172,250,2.596,251,2.337,252,3.518,253,2.962,254,1.922,255,2.337,256,1.766,257,3.107,258,2.625,259,3.172,260,3.502,261,2.337,262,2.104,263,2.596,264,2.962,265,3.518,266,2.962,267,2.337,268,3.172,269,2.322,270,2.104,271,2.322,272,2.962,273,2.596,274,2.962,275,2.337,276,2.962,277,1.922,278,3.562,279,3.562,280,2.337,281,2.596,282,1.509,283,2.596,284,1.922,285,2.337,286,2.337,287,2.337,288,1.725,289,1.63,290,2.337,291,2.337,292,3.122,293,2.596,294,2.337,295,1.127,296,1.766,297,1.003,298,1.725,299,2.337,300,2.337,301,2.337,302,2.337,303,2.337,304,1.968,305,3.518,306,2.337,307,1.968,308,2.337,309,0.62,310,2.337,311,2.337,312,3.518,313,2.337,314,3.562,315,1.968,316,1.968,317,2.53,318,2.337,319,1.63,320,2.962,321,3.122,322,2.596,323,2.962,324,3.518,325,2.962,326,1.968,327,1.543,328,1.968,329,1.725,330,1.968,331,1.968,332,1.968,333,1.968,334,2.337,335,0.697,336,2.337,337,2.337,338,2.337,339,3.963,340,3.502,341,3.518,342,2.962,343,2.962,344,2.962,345,3.518,346,2.815,347,3.963,348,2.962,349,1.21]],["title/components/AddUserDialogComponent.html",[0,0.013,184,0.681]],["body/components/AddUserDialogComponent.html",[0,0.018,1,0.554,2,0.868,3,0.183,4,0.156,5,0.644,6,0.598,7,0.644,8,0.156,10,0.684,13,0.598,14,1.489,15,1.6,16,1.26,17,0.809,18,0.868,19,0.58,20,0.935,21,2.745,22,2.507,23,1.185,24,0.554,25,0.935,27,1.082,29,0.31,30,0.265,32,1.919,34,1.442,38,0.481,39,1.44,47,0.631,49,0.566,50,0.029,51,0.415,52,0.372,53,0.566,55,2.751,57,1.126,59,2.304,62,1.957,67,0.805,69,2.004,70,0.689,74,1.123,76,0.962,79,2.063,80,2.333,85,0.513,86,0.758,87,0.816,89,1.442,98,0.728,99,0.644,100,0.513,101,0.299,102,0.993,103,1.069,104,1.467,111,0.183,112,0.13,120,0.868,123,1.104,125,1.672,150,1.244,165,3.282,177,0.644,178,0.935,179,0.868,180,0.473,181,1.208,182,0.644,183,1.101,184,1.04,185,1.208,186,0.554,187,0.554,188,0.644,189,0.598,190,0.598,191,0.644,192,0.554,193,0.644,194,0.554,195,0.644,196,0.554,197,0.598,198,0.554,199,0.644,200,0.554,201,0.644,202,0.598,203,0.644,204,0.554,205,0.644,206,0.598,207,0.644,208,0.598,209,0.644,210,0.554,211,0.644,212,0.554,213,0.644,214,0.554,215,0.598,216,0.644,217,0.554,218,0.644,219,0.598,220,0.644,221,0.554,222,0.598,223,0.554,224,0.644,225,0.598,226,0.513,227,0.598,228,0.644,229,0.016,230,0.021,231,3.386,234,5.207,235,3.282,237,2.304,238,4.247,239,1.242,241,3.716,243,4.24,244,4.697,245,4.697,249,2.331,258,2.478,259,2.331,260,3.324,266,3.282,268,3.336,269,2.573,270,2.331,271,2.573,272,3.282,273,2.877,274,3.282,276,3.282,277,2.13,278,3.864,279,3.864,281,2.877,282,1.672,283,2.877,284,2.13,289,1.244,292,3.386,293,2.877,295,1.248,296,1.348,297,1.152,298,1.981,309,0.473,314,3.282,315,2.261,316,2.261,317,2.745,319,2.333,320,3.282,321,2.877,322,1.981,323,3.282,325,2.261,326,2.261,327,1.773,328,2.261,329,1.981,330,3.282,331,2.261,332,2.261,333,2.261,335,1.368,339,3.282,340,2.573,344,3.282,346,3.012,347,4.24,348,3.282,349,1.341,350,4.694,351,3.804,352,1.606,353,2.573,354,2.573,355,3.864,356,2.585,357,3.899,358,5.036,359,2.685,360,2.685,361,2.685,362,2.685,363,3.899,364,2.685,365,2.685,366,2.685,367,1.773,368,1.773,369,1.806,370,1.773,371,2.261,372,1.981,373,2.261,374,1.981,375,1.773,376,2.261,377,1.467,378,1.606,379,1.606,380,1.152,381,2.685,382,2.685,383,2.685,384,2.685,385,1.467,386,1.981,387,3.899,388,2.685,389,2.685,390,2.685,391,2.685,392,1.773,393,2.877,394,2.685,395,2.261,396,1.773,397,2.261,398,3.899,399,3.899]],["title/components/AddUserToChannelDialogComponent.html",[0,0.013,186,0.681]],["body/components/AddUserToChannelDialogComponent.html",[0,0.019,1,0.609,2,0.928,3,0.201,4,0.171,5,0.707,6,0.657,7,0.707,8,0.171,10,0.566,13,0.657,14,1.502,15,1.615,16,1.286,17,1.211,18,0.928,19,0.781,20,1,21,2.892,22,2.642,23,1.248,24,0.609,25,1,27,1.157,29,0.281,30,0.284,32,1.98,33,1.659,34,2.235,38,0.514,39,1.486,43,0.364,44,1.763,45,3.029,46,2.493,47,0.646,49,0.597,50,0.029,51,0.392,52,0.369,53,0.597,70,0.684,72,2.093,74,1.119,76,0.796,85,1.059,86,0.714,87,0.714,88,0.657,89,1.542,98,0.746,99,0.707,100,0.563,101,0.329,102,1.09,103,1.173,104,1.611,111,0.201,112,0.143,113,1.763,116,1.611,117,2.277,118,1.366,119,1.611,123,0.86,139,0.657,177,0.707,178,1,179,0.928,180,0.52,181,1.261,182,0.707,183,1.16,184,0.609,185,1.261,186,1.085,187,0.609,188,0.707,189,0.657,190,0.657,191,0.707,192,0.609,193,0.707,194,0.609,195,0.707,196,0.609,197,0.657,198,0.609,199,0.707,200,0.609,201,0.707,202,0.657,203,0.707,204,0.609,205,0.707,206,0.657,207,0.707,208,0.657,209,0.707,210,0.609,211,0.707,212,0.609,213,0.707,214,0.86,215,0.928,216,0.707,217,0.609,218,0.707,219,0.657,220,0.707,221,0.609,222,0.657,223,0.609,224,0.707,225,0.657,226,0.563,227,0.657,228,0.707,229,0.017,230,0.017,239,1.282,288,2.176,289,1.931,295,1.335,296,1.48,297,1.265,340,2.752,342,4.425,346,2.493,350,4.795,351,3.887,352,1.763,353,2.752,354,2.752,355,4.071,367,1.946,368,1.946,370,1.946,372,2.176,374,2.176,400,4.835,401,4.835,402,4.835,403,3.99,404,3.076,405,4.169,406,4.425,407,5.256,408,5.256,409,3.076,410,4.169,411,2.949,412,4.169,413,2.277,414,2.871,415,2.493,416,4.169,417,2.949,418,2.949,419,4.169,420,4.169,421,2.949,422,2.949,423,3.086,424,4.169,425,3.878,426,2.949,427,2.176,428,4.169,429,4.169,430,4.169,431,2.949,432,2.949,433,2.949,434,1.946,435,2.483,436,2.752,437,2.277,438,3.076,439,2.752,440,2.483,441,2.949,442,2.483,443,1.946,444,1.48,445,2.949,446,2.483,447,1.946,448,1.763,449,2.949,450,2.949,451,2.949,452,2.949,453,2.949,454,2.949,455,4.169,456,4.169,457,3.076]],["title/components/AppComponent.html",[0,0.013,187,0.681]],["body/components/AppComponent.html",[0,0.023,1,0.839,2,1.152,3,0.277,4,0.236,5,0.975,6,0.906,7,0.975,8,0.236,10,0.703,13,0.906,14,1.539,15,1.656,16,1.236,17,1.003,18,1.152,19,0.769,20,1.241,23,1.469,24,0.839,25,1.241,27,1.435,29,0.236,30,0.352,43,0.702,47,0.599,50,0.028,51,0.387,52,0.33,74,0.971,86,0.773,87,0.773,98,0.763,99,0.975,100,0.776,101,0.453,111,0.277,112,0.197,126,2.857,177,0.975,178,1.241,179,1.152,180,0.717,181,1.437,182,0.975,183,1.365,184,0.839,185,1.437,186,0.839,187,1.236,188,0.975,189,0.906,190,0.906,191,0.975,192,0.839,193,0.975,194,0.839,195,0.975,196,0.839,197,0.906,198,0.839,199,0.975,200,0.839,201,0.975,202,0.906,203,0.975,204,0.839,205,0.975,206,0.906,207,0.975,208,0.906,209,0.975,210,0.839,211,0.975,212,0.839,213,0.975,214,0.839,215,0.906,216,0.975,217,0.839,218,0.975,219,0.906,220,0.975,221,0.839,222,0.906,223,0.839,224,0.975,225,0.906,226,0.776,227,0.906,228,0.975,229,0.021,230,0.021,239,1.408,295,1.657,297,1.744,309,0.717,356,2.929,369,2.397,380,1.744,458,3.424,459,2.219,460,5.69,461,5.174,462,5.174,463,5.174,464,4.066,465,4.356,466,4.356,467,4.066,468,1.744]],["title/injectables/AuthService.html",[469,0.916,470,1.804]],["body/injectables/AuthService.html",[3,0.266,4,0.227,8,0.227,29,0.227,30,0.343,38,0.623,39,1.682,43,0.483,47,0.626,49,0.729,50,0.029,51,0.402,52,0.363,53,0.729,57,0.963,67,1.153,70,0.69,74,1.015,85,0.963,86,0.685,87,0.685,88,1.124,98,0.754,100,0.747,101,0.436,111,0.266,112,0.189,120,1.315,123,1.153,136,2.885,229,0.021,230,0.021,239,1.394,309,1.208,335,1.504,356,2.899,369,2.338,380,1.677,459,1.677,469,1.4,470,2.757,471,1.812,472,3.292,473,4.704,474,4.248,475,5.046,476,5.046,477,3.91,478,5.046,479,5.046,480,4.339,481,3.91,482,4.355,483,4.13,484,5.046,485,3.341,486,5.046,487,3.723,488,4.248,489,5.046,490,3.91,491,2.532,492,5.268,493,4.809,494,3.017,495,5.046,496,5.046,497,3.91,498,3.53,499,3.91,500,3.225,501,3.91,502,3.91,503,2.885,504,3.292,505,3.91,506,2.338,507,1.963,508,1.812,509,3.91,510,3.91,511,3.91,512,4.122,513,5.046,514,3.723,515,3.91,516,3.91,517,3.91]],["title/classes/ChannelData.html",[106,2.179,112,0.16]],["body/classes/ChannelData.html",[3,0.301,4,0.257,8,0.257,29,0.257,30,0.371,33,2.569,38,0.673,43,0.546,47,0.655,49,0.673,50,0.029,51,0.371,52,0.375,53,0.673,67,1.375,70,0.673,76,0.845,106,3.6,111,0.301,112,0.214,125,2.719,126,3.344,127,3.264,139,0.985,229,0.022,230,0.022,258,2.938,309,1.216,377,3.574,518,2.92,519,3.724,520,5.454,521,5.197,522,4.024,523,5.454,524,3.264,525,4.423,526,4.423,527,4.423,528,5.454,529,4.423,530,4.423,531,5.913,532,4.423,533,5.913,534,4.423,535,5.913,536,5.913,537,4.423]],["title/interfaces/ChannelInfo.html",[94,2.179,538,1.974]],["body/interfaces/ChannelInfo.html",[3,0.347,4,0.296,8,0.296,29,0.296,30,0.404,50,0.028,52,0.376,67,1.336,94,3.919,111,0.347,126,3.249,229,0.024,230,0.024,258,2.998,309,1.213,377,3.535,538,3.048,539,3.761,540,4.291]],["title/components/ChooseavatarComponent.html",[0,0.013,192,0.681]],["body/components/ChooseavatarComponent.html",[0,0.021,1,0.419,2,0.704,3,0.138,4,0.118,5,0.487,6,0.452,7,0.487,8,0.336,10,0.644,13,0.452,14,1.445,15,1.551,16,0.903,17,0.683,18,0.704,19,0.577,20,0.758,23,1.001,24,0.419,25,0.758,29,0.225,30,0.215,34,1.168,38,0.39,39,1.001,43,0.251,47,0.604,49,0.54,50,0.029,51,0.379,52,0.323,53,0.54,64,2.086,67,0.8,70,0.647,74,0.878,76,0.905,78,1.889,79,1.618,80,2.325,86,0.682,87,0.682,88,0.864,98,0.702,99,0.487,100,0.388,101,0.226,111,0.138,112,0.098,114,0.699,118,1.464,120,0.864,123,0.8,126,1.586,136,1.499,139,0.452,173,2.331,177,0.487,178,0.758,179,1.118,180,0.358,181,1.05,182,0.487,183,0.93,184,0.419,185,1.05,186,0.419,187,0.419,188,0.487,189,0.452,190,0.452,191,0.487,192,0.903,193,0.487,194,0.419,195,0.487,196,0.419,197,0.452,198,0.419,199,0.487,200,0.419,201,0.487,202,0.452,203,0.487,204,0.419,205,0.487,206,0.452,207,0.487,208,0.452,209,0.487,210,0.903,211,0.487,212,0.419,213,0.487,214,0.419,215,0.452,216,0.487,217,0.419,218,0.487,219,0.452,220,0.487,221,0.419,222,0.452,223,0.419,224,0.487,225,0.452,226,0.388,227,0.452,228,0.487,229,0.013,230,0.013,237,1.02,239,1.118,260,3.129,263,3.497,277,2.39,295,1.012,297,0.871,309,0.98,319,1.464,327,3.576,335,1.413,349,2.148,414,1.11,436,2.888,437,2.39,468,0.871,493,1.499,498,2.616,500,1.726,506,1.215,508,0.941,512,1.499,541,1.499,542,1.71,543,1.889,544,3.265,545,3.16,546,2.119,547,2.66,548,3.878,549,3.16,550,3.991,551,2.861,552,3.991,553,3.878,554,4.74,555,3.703,556,4.375,557,2.888,558,3.16,559,4.375,560,2.66,561,3.684,562,1.71,563,3.313,564,3.133,565,3.16,566,3.16,567,2.031,568,3.228,569,2.331,570,3.878,571,2.66,572,2.031,573,2.331,574,3.878,575,3.001,576,2.66,577,2.086,578,2.66,579,2.331,580,2.031,581,2.331,582,4.375,583,1.889,584,2.66,585,2.086,586,3.16,587,3.16,588,3.991,589,2.031,590,2.086,591,1.889,592,3.16,593,4.375,594,2.031,595,2.66,596,2.66,597,2.031,598,2.66,599,5.256,600,1.726,601,1.889,602,2.031,603,2.086,604,1.889,605,2.66,606,2.031,607,2.742,608,2.031,609,2.66,610,2.031,611,2.031,612,2.031,613,1.71,614,2.031,615,2.031,616,2.031,617,1.11,618,2.56,619,1.499,620,1.499,621,1.215,622,1.341,623,1.499,624,1.499,625,4.451,626,1.499,627,2.331,628,1.499,629,1.499,630,1.499,631,2.031,632,1.499,633,2.331,634,2.331,635,1.499,636,2.031,637,2.031,638,3.684,639,2.031,640,2.031,641,2.031,642,1.71,643,2.031,644,2.031,645,1.71,646,1.71,647,1.71,648,2.031,649,2.031,650,2.031,651,1.71,652,1.499,653,2.031,654,2.031,655,2.031,656,2.031,657,2.031,658,2.031,659,2.031,660,2.031,661,3.16,662,2.031,663,2.331,664,2.031,665,1.341,666,1.726,667,3.16,668,3.16,669,2.66,670,3.16,671,3.16,672,3.16,673,3.16,674,3.16,675,2.66,676,2.66,677,2.66,678,1.889,679,2.086,680,2.66,681,3.16,682,2.66,683,1.71,684,1.71,685,3.265,686,2.66,687,1.71,688,2.031,689,3.878,690,4.561,691,3.458,692,3.16,693,1.71,694,2.031,695,3.684,696,4.789,697,3.265,698,2.331,699,4.275,700,2.66,701,3.497,702,2.66,703,3.16,704,2.031,705,1.499,706,1.71,707,5.079,708,2.331,709,2.031,710,4.225,711,3.991,712,4.574,713,3.16,714,5.021,715,4.275,716,3.16,717,3.16,718,3.497,719,3.16,720,1.499,721,1.71,722,2.086,723,3.16,724,2.031,725,2.031,726,1.71,727,2.66,728,1.71,729,1.71,730,1.71,731,2.66,732,4.411,733,2.031,734,1.71,735,2.031,736,2.031,737,2.66,738,5.239,739,4.411,740,2.031,741,3.991,742,2.66,743,2.031,744,3.265,745,3.16,746,3.878,747,1.71,748,4.375,749,3.16,750,4.74,751,3.16,752,1.71,753,2.031,754,1.71,755,1.71,756,4.74,757,2.031,758,2.031,759,3.16,760,2.031,761,3.878,762,3.16,763,3.878,764,3.878,765,3.16,766,2.031,767,2.031,768,2.031,769,3.16,770,3.878,771,3.878,772,2.861,773,4.375,774,4.375,775,3.878,776,2.031,777,3.684,778,1.71,779,1.71,780,1.71,781,3.16,782,3.16,783,3.878,784,4.375,785,2.66,786,2.031,787,3.16,788,2.031,789,2.031,790,3.16,791,2.031,792,2.031,793,2.031,794,2.031,795,2.031,796,2.031,797,2.031]],["title/components/ConfirmpasswordComponent.html",[0,0.013,194,0.681]],["body/components/ConfirmpasswordComponent.html",[0,0.018,1,0.555,2,0.869,3,0.183,4,0.156,5,0.645,6,0.599,7,0.645,8,0.156,10,0.801,13,0.599,14,1.489,15,1.601,16,1.04,17,0.809,18,0.869,19,0.83,20,0.936,23,1.185,24,0.555,25,0.936,27,1.083,29,0.156,30,0.265,38,0.482,39,1.185,43,0.332,47,0.632,49,0.482,50,0.029,51,0.364,52,0.349,53,0.622,57,0.745,60,1.674,63,3.417,67,0.805,70,0.711,74,0.817,75,2.576,76,0.877,79,1.443,81,3.285,85,0.745,86,0.624,87,0.857,88,0.599,98,0.711,99,0.645,100,0.513,101,0.3,102,0.994,111,0.183,112,0.222,120,1.023,123,1.04,135,2.576,139,1.192,177,0.645,178,0.936,179,0.869,180,0.474,181,1.209,182,0.645,183,1.102,184,0.555,185,1.209,186,0.555,187,0.555,188,0.645,189,0.599,190,0.599,191,0.645,192,0.555,193,0.645,194,1.04,195,0.645,196,0.555,197,0.599,198,0.555,199,0.645,200,0.555,201,0.645,202,0.599,203,0.645,204,0.555,205,0.645,206,0.599,207,0.645,208,0.599,209,0.645,210,0.555,211,0.645,212,0.555,213,0.645,214,0.555,215,0.599,216,0.645,217,0.555,218,0.645,219,0.599,220,0.645,221,0.555,222,0.599,223,0.555,224,0.645,225,0.599,226,0.513,227,0.599,228,0.645,229,0.016,230,0.016,237,1.35,254,2.753,309,1.129,319,1.246,335,0.802,349,0.925,448,1.608,459,1.674,468,1.153,470,3.222,474,3.285,480,4.128,483,2.576,485,3.2,500,1.469,504,2.264,506,1.608,508,1.246,546,2.509,551,3.389,557,3.326,564,3.74,573,2.879,576,3.285,577,2.576,581,3.718,600,2.132,607,3.049,617,1.469,618,3.032,619,1.984,620,1.984,621,1.608,622,1.775,623,1.984,624,1.984,625,2.879,626,1.984,627,2.879,628,1.984,629,1.984,632,1.984,633,2.879,634,2.879,635,1.984,663,2.879,665,1.775,666,2.132,678,2.334,679,2.576,798,2.264,799,5.581,800,3.032,801,3.902,802,3.902,803,4.505,804,3.867,805,4.593,806,5.581,807,5.351,808,5.581,809,1.775,810,3.902,811,5.039,812,2.879,813,2.879,814,2.879,815,2.689,816,3.902,817,5.039,818,6.106,819,4.243,820,3.285,821,2.689,822,3.902,823,3.902,824,5.898,825,4.118,826,3.902,827,3.902,828,3.902,829,5.039,830,2.689,831,5.581,832,2.879,833,3.285,834,3.285,835,3.902,836,2.879,837,3.285,838,5.039,839,4.506,840,3.902,841,3.902,842,2.689,843,3.902,844,3.902,845,2.576,846,2.689,847,3.902,848,3.902,849,3.902,850,3.285,851,2.689,852,2.689,853,2.689,854,3.2,855,2.689,856,3.902,857,2.689,858,2.689,859,2.689,860,3.032,861,2.879,862,3.902,863,3.902,864,2.689,865,2.689,866,2.689,867,2.689,868,2.689,869,2.689,870,2.689,871,2.264,872,2.689,873,2.689,874,2.689,875,3.902,876,3.902,877,2.689,878,2.689,879,3.902,880,3.902,881,2.689,882,3.902,883,1.469,884,1.984,885,2.689,886,3.902,887,2.689,888,2.689,889,2.689,890,2.689,891,2.689,892,2.689,893,2.689,894,3.718,895,3.285,896,3.285,897,3.902]],["title/components/EditChannelDialogComponent.html",[0,0.013,196,0.681]],["body/components/EditChannelDialogComponent.html",[0,0.018,1,0.546,2,0.858,3,0.18,4,0.153,5,0.634,6,0.589,7,0.634,8,0.153,10,0.618,13,0.589,14,1.487,15,1.598,16,1.097,17,1.216,18,0.858,19,0.852,20,0.924,21,2.72,22,2.485,23,1.174,24,0.546,25,0.924,27,1.069,29,0.153,30,0.262,31,3.245,32,1.908,34,1.425,37,2.144,38,0.476,39,1.545,47,0.63,49,0.476,50,0.029,51,0.428,52,0.353,53,0.476,55,3.27,57,1.19,59,1.935,60,2.379,62,2.509,63,3.207,67,1.236,69,1.534,70,0.656,74,0.929,76,0.736,79,0.977,85,1.015,86,0.797,87,0.797,88,1.333,89,1.425,92,4.208,96,2.105,98,0.739,99,0.634,100,0.505,101,0.295,102,0.977,103,1.052,104,1.444,109,1.745,111,0.18,112,0.128,120,0.858,121,1.95,122,2.225,123,0.795,124,2.225,125,1.134,126,2.283,127,1.95,129,2.225,130,1.95,131,2.225,132,3.829,133,2.225,134,1.95,135,1.745,138,3.245,139,0.589,150,1.225,166,2.843,167,2.843,168,2.843,169,3.245,170,3.245,171,2.843,172,2.305,173,2.843,174,3.245,175,3.245,176,3.245,177,0.634,178,0.924,179,0.858,180,0.466,181,1.199,182,0.634,183,1.091,184,0.546,185,1.199,186,1.032,187,0.546,188,0.634,189,0.589,190,0.589,191,0.634,192,0.546,193,0.634,194,0.546,195,0.634,196,1.032,197,1.276,198,0.546,199,0.634,200,0.546,201,0.634,202,0.589,203,0.634,204,0.546,205,0.634,206,0.589,207,0.634,208,0.589,209,0.634,210,0.546,211,0.634,212,0.546,213,0.634,214,0.546,215,0.589,216,0.634,217,0.546,218,0.634,219,0.589,220,0.634,221,0.546,222,0.589,223,0.546,224,0.634,225,0.589,226,0.505,227,0.589,228,0.634,229,0.016,230,0.016,239,1.236,258,1.225,295,1.234,297,1.134,335,1.584,343,3.245,349,0.909,351,1.581,352,1.581,353,2.544,354,2.544,356,2.57,367,1.745,368,1.745,369,1.785,370,1.745,371,2.225,372,1.95,374,1.95,378,1.581,379,1.581,380,1.134,392,1.745,393,2.843,396,1.745,409,1.95,427,1.95,600,2.105,682,3.245,898,5.342,899,5.342,900,4.548,901,5.314,902,4.548,903,5.548,904,5.548,905,4.998,906,4.998,907,4.998,908,2.643,909,2.57,910,2.843,911,3.245,912,2.989,913,3.854,914,2.643,915,4.998,916,2.305,917,2.643,918,3.854,919,2.643,920,3.299,921,3.854,922,3.854,923,2.843,924,3.854,925,2.643,926,3.829,927,3.854,928,3.245,929,1.95,930,2.225,931,2.643,932,1.745,933,1.745,934,2.643,935,2.643,936,3.854,937,2.225,938,3.854,939,2.643,940,2.643,941,3.854,942,2.643,943,2.643,944,2.643,945,2.643,946,3.854,947,2.643,948,2.643,949,2.643,950,2.643,951,1.745,952,2.643,953,2.225,954,2.225,955,2.643,956,2.643,957,2.643,958,2.225,959,2.643,960,4.998,961,4.208,962,4.208,963,3.854,964,3.854,965,3.854]],["title/components/HeaderComponent.html",[0,0.013,198,0.681]],["body/components/HeaderComponent.html",[0,0.018,1,0.543,2,0.855,3,0.179,4,0.153,5,0.631,6,0.586,7,0.631,8,0.153,10,0.521,13,0.586,14,1.486,15,1.597,16,1.029,17,0.799,18,0.855,19,0.85,20,0.921,22,2.478,23,1.17,24,0.543,25,0.921,27,1.065,29,0.361,30,0.261,32,1.905,33,1.528,34,2.048,37,2.375,38,0.474,41,3.312,43,0.325,44,1.573,45,2.897,47,0.647,49,0.474,50,0.029,51,0.361,52,0.365,53,0.474,55,1.437,57,1.189,67,0.543,69,1.528,70,0.738,72,2.503,74,0.951,76,1.013,79,0.972,85,0.502,86,0.752,87,0.777,88,0.586,89,1.42,96,2.098,98,0.76,99,0.631,100,0.502,101,0.293,102,0.972,103,1.047,111,0.179,112,0.257,113,1.573,114,0.905,116,1.437,117,2.724,118,1.218,119,1.437,120,0.855,123,1.095,139,0.586,177,0.631,178,0.921,179,0.855,180,0.463,181,1.196,182,0.631,183,1.088,184,0.543,185,1.196,186,0.543,187,0.543,188,0.631,189,0.586,190,0.586,191,0.631,192,0.543,193,0.631,194,0.543,195,0.631,196,0.543,197,0.586,198,1.029,199,0.631,200,0.543,201,0.631,202,0.586,203,0.631,204,1.21,205,0.631,206,0.586,207,0.631,208,0.586,209,0.631,210,0.543,211,0.631,212,0.543,213,0.631,214,0.543,215,0.586,216,0.631,217,0.793,218,0.631,219,0.586,220,0.631,221,1.029,222,1.233,223,0.543,224,0.631,225,0.586,226,0.502,227,0.586,228,0.631,229,0.016,230,0.02,231,3.346,237,2.277,238,3.346,239,1.233,241,4.086,249,2.982,253,3.233,254,2.098,260,2.534,281,2.833,282,2.139,283,2.833,289,2.101,292,3.346,293,2.833,295,1.229,296,1.32,298,1.94,309,0.879,317,2.296,319,1.218,329,1.94,346,2.296,349,1.321,413,2.724,414,3.026,415,2.296,423,3.002,425,3.679,436,1.736,437,2.724,439,2.534,444,3.126,447,2.993,448,1.573,573,2.833,591,2.296,718,2.833,814,2.833,929,1.94,966,2.214,967,3.84,968,3.84,969,3.84,970,4.535,971,4.535,972,5.303,973,4.535,974,3.679,975,5.538,976,4.987,977,5.538,978,3.84,979,2.63,980,3.84,981,2.63,982,2.296,983,2.833,984,2.63,985,3.84,986,3.233,987,4.198,988,3.233,989,3.233,990,2.534,991,2.63,992,3.84,993,3.84,994,2.63,995,3.233,996,5.303,997,3.818,998,3.818,999,2.833,1000,2.63,1001,3.679,1002,3.84,1003,3.84,1004,2.63,1005,2.63,1006,3.84,1007,4.987,1008,3.84,1009,2.63,1010,2.63,1011,3.84,1012,2.63,1013,2.63,1014,2.63,1015,2.63,1016,2.63,1017,1.736,1018,1.94,1019,1.736,1020,2.214,1021,2.214,1022,1.94,1023,1.94,1024,2.63,1025,2.63,1026,2.214,1027,1.94,1028,2.63,1029,1.94,1030,2.214,1031,1.736,1032,1.573,1033,1.94,1034,2.63,1035,2.63,1036,2.214,1037,2.63,1038,2.63,1039,1.94,1040,2.63,1041,1.736,1042,2.63,1043,2.63,1044,3.84,1045,2.63,1046,2.63,1047,2.63,1048,2.63,1049,3.84,1050,3.84,1051,2.63,1052,2.63,1053,2.63,1054,2.63,1055,2.63,1056,3.233,1057,3.84,1058,3.84,1059,4.987,1060,3.233,1061,3.84,1062,2.833]],["title/components/ImprintComponent.html",[0,0.013,200,0.681]],["body/components/ImprintComponent.html",[0,0.023,1,0.874,2,1.182,3,0.288,4,0.246,5,1.016,6,0.943,7,1.016,8,0.246,10,0.721,13,0.943,14,1.543,15,1.661,16,1.255,17,1.022,18,1.182,19,0.789,20,1.273,24,0.874,25,1.273,27,1.473,50,0.028,51,0.394,74,0.986,98,0.655,101,0.472,111,0.288,112,0.205,177,1.016,178,1.273,179,1.182,180,0.746,181,1.458,182,1.016,183,1.391,184,0.874,185,1.458,186,0.874,187,0.874,188,1.016,189,0.943,190,0.943,191,1.016,192,0.874,193,1.016,194,0.874,195,1.016,196,0.874,197,0.943,198,0.874,199,1.016,200,1.255,201,1.016,202,0.943,203,1.016,204,0.874,205,1.016,206,0.943,207,1.016,208,0.943,209,1.016,210,0.874,211,1.016,212,0.874,213,1.016,214,0.874,215,0.943,216,1.016,217,0.874,218,1.016,219,0.943,220,1.016,221,0.874,222,0.943,223,0.874,224,1.016,225,0.943,226,0.809,227,0.943,228,1.016,229,0.022,230,0.022,468,1.816,491,2.277,494,3.174,546,3.168,666,2.9,678,3.174,1063,3.566,1064,5.308,1065,5.308,1066,5.308,1067,5.308,1068,4.469,1069,5.308,1070,5.308,1071,5.308,1072,5.308,1073,5.308,1074,5.308,1075,3.504,1076,3.504,1077,5.308,1078,5.308]],["title/components/MainsectionComponent.html",[0,0.013,204,0.681]],["body/components/MainsectionComponent.html",[0,0.021,1,0.418,2,0.702,3,0.138,4,0.118,5,0.486,6,0.451,7,0.486,8,0.118,10,0.593,13,0.451,14,1.444,15,1.585,16,0.902,17,0.682,18,0.702,19,0.949,20,0.756,23,0.999,24,0.418,25,0.756,27,0.875,29,0.118,30,0.214,38,0.539,43,0.478,47,0.661,50,0.029,51,0.263,52,0.35,57,0.834,70,0.775,74,0.708,76,1.163,85,1.033,86,0.735,87,0.735,88,1.266,98,0.701,99,0.486,100,0.387,101,0.226,111,0.138,112,0.269,114,1.724,139,0.702,177,0.486,178,0.756,179,1.343,180,0.357,181,1.048,182,0.486,183,0.929,184,0.418,185,1.048,186,0.418,187,0.418,188,0.486,189,0.973,190,0.451,191,0.486,192,0.418,193,0.486,194,0.418,195,0.486,196,0.418,197,0.451,198,1.195,199,0.486,200,0.418,201,0.486,202,0.451,203,0.486,204,0.902,205,0.486,206,0.451,207,0.486,208,0.451,209,0.486,210,0.418,211,0.486,212,0.418,213,0.486,214,0.418,215,1.289,216,0.486,217,0.902,218,0.486,219,0.973,220,0.486,221,0.418,222,1.054,223,0.418,224,0.486,225,0.451,226,0.387,227,0.451,228,0.486,229,0.013,230,0.013,239,1.116,259,2.998,262,2.612,264,2.654,282,2.522,289,2.322,295,1.009,296,1.017,297,0.869,309,0.682,423,3.189,425,4.194,438,2.326,543,1.885,555,2.326,557,2.883,571,2.654,575,3.516,581,2.326,590,2.081,617,2.739,630,2.326,691,3.881,699,2.326,705,3.223,715,2.856,720,2.326,722,2.081,814,3.223,825,2.326,883,1.106,909,1.461,916,3.516,986,4.22,987,3.678,988,2.654,989,3.678,990,2.883,1029,3.861,1036,5.018,1039,2.856,1041,3.124,1079,1.705,1080,3.259,1081,3.871,1082,3.152,1083,3.152,1084,3.152,1085,3.871,1086,3.871,1087,3.871,1088,3.871,1089,2.739,1090,5.233,1091,3.871,1092,4.733,1093,3.871,1094,3.871,1095,2.739,1096,4.733,1097,3.871,1098,3.871,1099,3.871,1100,4.368,1101,5.013,1102,5.013,1103,4.368,1104,4.368,1105,3.678,1106,3.678,1107,3.223,1108,3.678,1109,4.368,1110,4.368,1111,4.368,1112,5.013,1113,5.013,1114,3.152,1115,2.025,1116,3.752,1117,2.654,1118,3.152,1119,4.604,1120,2.025,1121,3.678,1122,5.683,1123,2.025,1124,4.733,1125,4.733,1126,2.025,1127,3.152,1128,3.678,1129,3.152,1130,3.152,1131,4.368,1132,2.025,1133,5.412,1134,4.368,1135,3.699,1136,2.025,1137,2.025,1138,2.654,1139,3.152,1140,3.152,1141,4.22,1142,4.368,1143,4.368,1144,2.025,1145,3.678,1146,3.152,1147,2.654,1148,2.025,1149,2.025,1150,2.326,1151,3.152,1152,2.025,1153,2.326,1154,3.152,1155,2.654,1156,2.025,1157,3.678,1158,2.025,1159,2.025,1160,2.025,1161,3.152,1162,3.152,1163,3.871,1164,3.152,1165,2.025,1166,3.152,1167,2.025,1168,3.152,1169,3.985,1170,2.025,1171,3.152,1172,2.025,1173,2.326,1174,2.025,1175,2.025,1176,3.152,1177,2.025,1178,2.025,1179,3.152,1180,2.025,1181,2.025,1182,2.326,1183,2.025,1184,3.152,1185,2.025,1186,2.025,1187,2.025,1188,2.025,1189,2.025,1190,2.025,1191,2.025,1192,2.025,1193,2.025,1194,1.494,1195,1.494,1196,1.106,1197,2.025,1198,2.025,1199,3.152,1200,2.025,1201,3.152,1202,2.025,1203,3.152,1204,2.025,1205,2.025,1206,2.025,1207,2.025,1208,5.233,1209,2.025,1210,2.025,1211,4.368,1212,2.025,1213,3.152,1214,4.733,1215,5.013,1216,5.559,1217,5.013,1218,2.025,1219,2.025,1220,5.013,1221,4.368,1222,2.025,1223,2.025,1224,5.013,1225,2.025,1226,2.025,1227,2.025,1228,3.152,1229,3.152,1230,3.152,1231,2.025,1232,2.025,1233,2.025,1234,2.025,1235,1.705,1236,3.152,1237,3.152,1238,2.025,1239,2.025,1240,1.705,1241,2.025,1242,2.025,1243,3.152,1244,3.152]],["title/classes/MessageData.html",[112,0.16,1245,2.436]],["body/classes/MessageData.html",[3,0.292,4,0.249,8,0.249,29,0.249,30,0.364,33,2.321,38,0.661,43,0.53,47,0.668,49,0.53,50,0.029,51,0.436,52,0.385,53,0.53,70,0.53,111,0.292,112,0.208,125,2.818,139,0.956,229,0.022,230,0.022,309,1.209,385,3.434,386,3.166,437,3.187,444,3.155,491,2.696,518,2.833,521,5.142,522,3.949,524,3.166,1245,3.949,1246,3.613,1247,4.637,1248,6.285,1249,4.149,1250,5.292,1251,5.353,1252,4.291,1253,4.291,1254,4.291,1255,4.291,1256,4.291,1257,4.291,1258,4.291,1259,4.291,1260,4.507,1261,4.507,1262,3.166,1263,4.507,1264,3.613,1265,5.353,1266,4.291,1267,5.353,1268,4.291,1269,4.507,1270,3.166,1271,5.353,1272,4.291,1273,5.353,1274,4.291]],["title/injectables/MutationObserverService.html",[469,0.916,1275,2.436]],["body/injectables/MutationObserverService.html",[3,0.24,4,0.204,6,1.316,8,0.204,10,0.857,19,0.923,29,0.204,30,0.32,33,2.542,38,0.581,43,0.655,47,0.621,49,0.435,50,0.029,51,0.24,52,0.353,53,0.435,57,1.161,67,0.727,69,2.255,70,0.655,76,1.082,85,1.161,86,0.77,87,0.77,88,1.262,98,0.581,101,0.393,111,0.24,112,0.17,114,2.197,120,1.049,123,0.727,139,1.182,179,1.489,229,0.019,230,0.019,254,3.391,349,1.62,423,3.167,437,2.574,459,1.511,469,1.307,471,1.632,485,3.174,507,1.768,585,3.504,708,4.654,742,4.469,845,3.899,910,3.916,912,3.174,920,3.504,995,3.966,998,5.118,1039,3.916,1119,3.916,1196,1.924,1275,3.476,1276,2.965,1277,6.078,1278,5.308,1279,5.907,1280,6.078,1281,6.387,1282,4.711,1283,3.522,1284,2.817,1285,4.711,1286,4.711,1287,4.711,1288,3.476,1289,3.476,1290,4.711,1291,6.554,1292,3.522,1293,4.711,1294,5.907,1295,6.207,1296,4.973,1297,3.504,1298,5.118,1299,4.469,1300,3.504,1301,5.308,1302,4.469,1303,5.308,1304,5.308,1305,4.711,1306,4.711,1307,3.916,1308,3.522,1309,5.308,1310,4.711,1311,3.522,1312,3.522,1313,3.522,1314,4.711,1315,4.711,1316,5.907,1317,5.308,1318,4.711,1319,3.522,1320,3.522,1321,5.667,1322,3.522,1323,3.522,1324,3.522,1325,3.522,1326,3.522,1327,3.522]],["title/directives/OutsideclickDirective.html",[180,0.582,226,0.63]],["body/directives/OutsideclickDirective.html",[3,0.315,4,0.269,8,0.269,10,0.629,13,1.031,14,1.249,18,1.249,19,0.834,29,0.269,33,2.401,38,0.692,43,0.571,47,0.627,49,0.692,50,0.029,51,0.381,52,0.35,53,0.692,70,0.571,76,1.071,98,0.571,101,0.516,111,0.315,112,0.224,123,1.157,139,1.031,180,0.988,225,1.031,226,1.071,227,1.249,229,0.023,230,0.023,289,2.145,423,3.148,444,2.324,508,2.145,591,3.75,701,3.415,1328,3.897,1329,5.607,1330,5.607,1331,6.032,1332,5.607,1333,5.607,1334,4.629,1335,5.607,1336,5.607,1337,6.032,1338,4.629,1339,6.032,1340,5.607,1341,5.607,1342,6.032,1343,6.27,1344,6.032,1345,5.607,1346,4.629,1347,5.607,1348,5.607,1349,4.629,1350,5.607,1351,4.629,1352,4.629]],["title/components/RegisterComponent.html",[0,0.013,210,0.681]],["body/components/RegisterComponent.html",[0,0.016,1,0.451,2,0.744,3,0.148,4,0.127,5,0.524,6,0.486,7,0.524,8,0.127,10,0.801,13,0.486,14,1.457,15,1.565,16,0.938,17,0.715,18,0.744,19,0.728,20,0.801,23,1.047,24,0.451,25,0.801,29,0.127,30,0.227,38,0.412,39,1.333,43,0.269,47,0.618,49,0.561,50,0.029,51,0.435,52,0.352,53,0.561,57,0.638,60,1.949,61,2.205,63,1.192,67,0.938,70,0.702,74,0.957,76,0.935,79,1.235,80,1.011,85,0.986,86,0.702,87,0.665,88,1.197,98,0.702,99,0.524,100,0.417,101,0.243,102,0.807,111,0.148,112,0.106,114,0.751,118,1.011,120,1.151,121,1.61,123,0.837,130,2.464,134,1.61,135,4.257,139,1.151,149,2.464,152,2.812,166,1.61,167,2.464,168,2.464,171,2.464,172,3.09,177,0.524,178,0.801,179,1.012,180,0.385,181,1.09,182,0.524,183,0.973,184,0.451,185,1.09,186,0.451,187,0.451,188,0.524,189,0.486,190,0.486,191,0.524,192,0.451,193,0.524,194,0.451,195,0.524,196,0.451,197,0.486,198,0.451,199,0.524,200,0.451,201,0.524,202,0.486,203,0.524,204,0.451,205,0.524,206,0.486,207,0.524,208,0.486,209,0.524,210,1.066,211,0.524,212,0.451,213,0.524,214,0.451,215,0.486,216,0.524,217,0.451,218,0.524,219,0.486,220,0.524,221,0.451,222,0.486,223,0.451,224,0.524,225,0.486,226,0.417,227,0.486,228,0.524,229,0.014,230,0.014,239,1.314,250,1.61,256,2.282,270,1.997,282,1.949,289,1.011,295,0.699,296,1.096,297,0.936,304,2.812,309,1.106,319,1.88,335,1.209,349,1.955,356,2.394,369,1.547,380,0.936,423,2.037,436,3,444,2.282,457,2.464,468,0.936,483,2.678,485,2.718,491,2.379,492,3.827,494,3.215,498,2.426,508,1.011,514,1.61,541,1.61,543,1.997,546,2.216,547,2.812,564,3.469,568,3.354,569,3.354,575,1.997,585,2.205,590,3,600,1.825,601,1.997,604,1.305,651,1.838,666,2.483,669,4.124,677,2.812,678,1.997,679,2.205,680,3.827,683,1.838,684,1.838,685,1.838,686,3.416,687,1.838,690,2.812,691,1.441,693,1.838,695,3.416,696,3.416,697,3.416,698,1.61,699,4.092,700,3.416,701,2.464,702,3.827,706,2.812,707,2.812,708,1.61,710,3.416,712,3.354,714,1.838,715,1.61,721,2.812,722,3.41,726,2.812,727,1.838,728,1.838,729,1.838,730,1.838,731,2.812,732,1.838,734,1.838,739,1.838,741,2.812,744,4.35,747,1.838,754,2.812,755,1.838,777,2.812,778,1.838,779,1.838,780,1.838,785,1.838,800,2.678,809,1.441,813,1.61,834,1.838,837,2.812,854,2.718,860,3,861,1.61,883,1.192,884,1.61,1041,3,1068,2.812,1075,3.549,1076,3.549,1080,3.416,1106,3.827,1116,2.205,1128,2.812,1138,2.812,1145,2.812,1157,2.812,1353,1.838,1354,2.464,1355,4.057,1356,3.34,1357,4.124,1358,4.898,1359,4.057,1360,4.898,1361,4.057,1362,4.057,1363,4.545,1364,3.34,1365,3.34,1366,3.34,1367,5.166,1368,4.545,1369,3.34,1370,3.34,1371,3.34,1372,2.183,1373,3.34,1374,5.801,1375,5.545,1376,3.34,1377,3.34,1378,2.183,1379,3.416,1380,2.812,1381,3.34,1382,2.183,1383,3.34,1384,3.34,1385,3.34,1386,2.183,1387,2.812,1388,3.34,1389,2.183,1390,3.34,1391,2.183,1392,2.183,1393,2.183,1394,2.183,1395,2.183,1396,2.183,1397,3.34,1398,2.183,1399,2.183,1400,3.34,1401,2.183,1402,2.183,1403,3.416,1404,2.183,1405,1.838,1406,2.183,1407,2.183,1408,2.183,1409,2.183,1410,2.183,1411,2.183,1412,4.545,1413,3.34,1414,2.183,1415,2.183,1416,2.183,1417,2.183,1418,2.183,1419,2.183,1420,3.34,1421,2.812,1422,2.812,1423,2.812,1424,2.183,1425,3.34,1426,3.34,1427,4.545,1428,4.057,1429,2.183,1430,4.057,1431,2.183,1432,2.183,1433,2.183,1434,3.34,1435,2.183,1436,2.812,1437,2.183,1438,3.34,1439,3.34,1440,2.183,1441,3.34,1442,2.183,1443,1.838,1444,2.183,1445,2.183,1446,2.183,1447,2.183,1448,2.183,1449,2.183,1450,4.545,1451,3.34,1452,3.34,1453,3.34,1454,3.34,1455,3.827,1456,4.545,1457,3.34,1458,4.545,1459,2.812,1460,3.34,1461,3.34,1462,3.34,1463,4.545,1464,3.34,1465,3.34,1466,2.183,1467,2.183,1468,2.183,1469,3.34,1470,2.183,1471,4.057,1472,2.183,1473,2.183,1474,4.057,1475,4.545,1476,2.183,1477,2.183,1478,3.34,1479,2.183,1480,2.183,1481,2.183,1482,2.183,1483,2.183,1484,2.183,1485,2.183,1486,2.183,1487,2.183,1488,2.183,1489,2.183,1490,3.34,1491,2.183]],["title/components/ResetpasswordComponent.html",[0,0.013,212,0.681]],["body/components/ResetpasswordComponent.html",[0,0.021,1,0.718,2,1.04,3,0.237,4,0.202,5,0.834,6,0.775,7,0.834,8,0.202,10,0.634,13,0.775,14,1.522,15,1.637,16,1.164,17,0.929,18,1.04,19,0.838,20,1.121,23,1.361,24,0.718,25,1.121,27,1.296,29,0.202,30,0.318,38,0.577,39,1.361,43,0.429,47,0.564,49,0.429,50,0.029,51,0.384,52,0.271,53,0.429,57,0.892,70,0.429,74,0.914,86,0.634,87,0.634,98,0.726,99,0.834,101,0.388,111,0.237,112,0.168,123,1.089,158,4.747,172,2.793,177,0.834,178,1.121,179,1.04,180,0.613,181,1.353,182,0.834,183,1.265,184,0.718,185,1.353,186,0.718,187,0.718,188,0.834,189,0.775,190,0.775,191,0.834,192,0.718,193,0.834,194,0.718,195,0.834,196,0.718,197,0.775,198,0.718,199,0.834,200,0.718,201,0.834,202,0.775,203,0.834,204,0.718,205,0.834,206,0.775,207,0.834,208,0.775,209,0.834,210,0.718,211,0.834,212,1.164,213,0.834,214,0.718,215,0.775,216,0.834,217,0.718,218,0.834,219,0.775,220,0.834,221,0.718,222,0.775,223,0.718,224,0.834,225,0.775,226,0.664,227,0.775,228,0.834,229,0.019,230,0.019,237,1.746,256,2.345,277,2.552,309,0.613,319,1.611,335,1.037,349,1.196,468,1.492,483,3.083,491,2.418,493,2.566,494,3.761,500,2.552,506,2.08,508,1.611,512,2.566,514,2.566,546,2.882,551,3.892,555,3.447,564,3.622,577,3.083,578,3.933,579,3.447,607,3.309,617,1.9,618,3.482,619,2.566,620,2.566,621,2.08,622,2.296,623,2.566,624,2.566,625,3.447,626,2.566,627,3.447,628,2.566,629,2.566,630,2.566,632,2.566,633,3.447,634,3.447,635,2.566,663,3.447,665,2.296,666,2.552,678,2.793,679,3.083,803,4.441,809,2.296,883,1.9,884,2.566,894,4.16,895,3.933,896,3.933,928,3.933,1075,4.152,1076,3.083,1357,2.928,1379,2.928,1387,3.933,1436,3.933,1443,3.933,1459,3.933,1492,2.928,1493,4.671,1494,4.671,1495,4.671,1496,6.056,1497,4.671,1498,3.478,1499,4.671,1500,3.478,1501,3.478,1502,3.478,1503,3.478,1504,3.478,1505,3.478,1506,4.671,1507,4.671,1508,4.671,1509,5.638,1510,4.671,1511,4.671,1512,4.671,1513,4.671,1514,4.671]],["title/injectables/ResizeListenerService.html",[469,0.916,1089,1.804]],["body/injectables/ResizeListenerService.html",[3,0.258,4,0.22,8,0.22,29,0.22,30,0.337,38,0.611,43,0.611,47,0.659,49,0.68,50,0.029,51,0.375,52,0.376,53,0.68,57,1.249,61,2.506,64,2.506,67,1.137,70,0.72,76,1.258,85,1.185,86,0.843,87,0.843,88,1.382,98,0.469,101,0.423,111,0.258,112,0.184,114,2.205,120,0.846,123,0.784,229,0.02,230,0.02,459,1.629,469,1.373,471,1.759,482,2.801,507,1.906,575,3.491,591,3.294,712,4.665,909,2.294,1089,2.704,1108,4.638,1150,4.783,1354,2.801,1515,5.581,1516,3.197,1517,5.508,1518,4.95,1519,5.508,1520,4.95,1521,4.95,1522,4.95,1523,4.95,1524,4.95,1525,5.837,1526,3.797,1527,6.054,1528,4.95,1529,3.197,1530,5.837,1531,3.797,1532,5.837,1533,5.508,1534,5.508,1535,5.508,1536,4.95,1537,3.797,1538,5.636,1539,4.95,1540,3.797,1541,4.95,1542,4.95,1543,3.797,1544,3.797,1545,4.95,1546,3.797,1547,3.797,1548,3.797,1549,3.797,1550,2.801,1551,3.797,1552,3.797,1553,3.797,1554,3.797,1555,3.797,1556,3.797,1557,3.797,1558,3.797,1559,3.797,1560,3.797,1561,3.797,1562,3.797,1563,3.797,1564,3.797,1565,3.797,1566,3.797,1567,3.797]],["title/components/ShowProfileComponent.html",[0,0.013,214,0.681]],["body/components/ShowProfileComponent.html",[0,0.015,1,0.41,2,0.692,3,0.135,4,0.115,5,0.477,6,0.442,7,0.477,8,0.349,10,0.637,13,0.442,14,1.441,15,1.546,16,0.892,17,0.674,18,0.692,19,0.87,20,0.745,23,0.987,24,0.41,25,0.745,27,0.862,29,0.115,30,0.211,32,1.711,33,1.979,34,2.13,37,2.133,38,0.383,39,1.284,41,2.974,43,0.383,45,2.563,46,2.286,47,0.651,49,0.534,50,0.029,51,0.385,52,0.383,53,0.534,57,1.231,60,2.229,61,2.05,63,2.089,64,2.524,67,0.789,69,2.068,70,0.762,72,2.17,73,2.291,74,0.974,76,0.992,78,1.857,79,1.414,80,2.782,85,1.027,86,0.768,87,0.838,88,1.321,89,1.148,96,1.697,98,0.711,99,0.477,100,0.379,101,0.222,102,0.735,103,0.791,111,0.135,112,0.227,114,1.068,116,1.085,117,1.697,118,0.92,119,1.085,120,0.852,123,0.968,139,1.157,143,1.311,144,1.673,177,0.477,178,1.247,179,1.231,180,0.35,181,1.037,182,0.477,183,0.917,184,0.41,185,1.037,186,0.41,187,0.41,188,0.477,189,0.442,190,0.442,191,0.477,192,0.41,193,0.477,194,0.41,195,0.477,196,0.41,197,0.442,198,0.41,199,0.477,200,0.41,201,0.477,202,0.442,203,0.477,204,0.41,205,0.477,206,0.442,207,0.477,208,0.442,209,0.477,210,0.41,211,0.477,212,0.41,213,0.477,214,0.892,215,1.157,216,0.477,217,0.41,218,0.477,219,0.442,220,0.477,221,0.41,222,0.442,223,0.641,224,0.917,225,0.442,226,0.379,227,0.442,228,0.477,229,0.013,230,0.013,239,1.108,256,1.559,258,1.771,262,1.857,263,2.291,270,2.286,271,2.854,284,1.697,289,0.92,295,0.994,296,0.997,309,1.131,335,1.14,413,2.362,414,2.362,415,1.857,423,1.92,434,4.31,440,1.673,443,3.549,447,1.311,448,1.188,470,3.088,473,2.615,487,2.291,488,2.615,491,1.64,494,2.585,550,3.219,552,4.759,560,4.187,561,4.187,562,1.673,563,3.283,583,1.857,588,4.375,591,1.857,596,2.615,598,2.615,599,4.759,600,2.839,601,1.857,603,2.05,604,1.857,605,3.219,609,2.615,638,3.64,642,3.219,645,1.673,646,1.673,647,1.673,675,2.615,676,2.615,705,3.967,800,2.524,812,2.291,819,2.615,839,2.291,854,2.585,860,1.311,861,1.466,909,2.003,920,2.524,961,2.615,962,3.64,974,2.291,982,3.216,983,2.291,1017,2.854,1018,2.821,1019,2.524,1023,1.466,1026,1.673,1027,1.466,1031,2.05,1032,1.857,1033,2.291,1060,2.615,1062,2.291,1075,2.854,1076,2.854,1095,2.717,1116,2.05,1182,2.291,1284,1.857,1300,2.05,1403,1.673,1405,1.673,1568,5.498,1569,1.673,1570,3.106,1571,3.106,1572,5.196,1573,4.691,1574,4.691,1575,3.823,1576,3.219,1577,3.949,1578,4.691,1579,4.973,1580,4.187,1581,5.377,1582,4.973,1583,4.973,1584,4.323,1585,4.323,1586,3.106,1587,1.987,1588,3.106,1589,1.987,1590,2.05,1591,2.615,1592,1.987,1593,4.691,1594,3.19,1595,4.691,1596,3.106,1597,1.987,1598,3.106,1599,1.987,1600,2.615,1601,3.19,1602,3.64,1603,3.106,1604,1.987,1605,3.823,1606,3.219,1607,3.823,1608,3.823,1609,3.219,1610,3.823,1611,1.987,1612,1.987,1613,1.987,1614,1.987,1615,1.987,1616,3.106,1617,1.987,1618,1.987,1619,1.987,1620,1.987,1621,1.987,1622,1.987,1623,3.106,1624,1.987,1625,1.987,1626,1.987,1627,1.987,1628,1.987,1629,1.987,1630,1.987,1631,1.987,1632,1.987,1633,1.673,1634,1.987,1635,1.673,1636,1.987,1637,1.987,1638,1.987,1639,1.987,1640,1.987,1641,1.987,1642,1.987,1643,1.987,1644,1.987,1645,3.823,1646,3.106,1647,1.987,1648,3.823,1649,1.987,1650,1.987,1651,1.987,1652,1.987,1653,1.987,1654,1.987,1655,1.673,1656,1.987,1657,1.987,1658,1.987,1659,1.987,1660,1.673,1661,1.987,1662,1.987,1663,1.987,1664,3.106,1665,1.673,1666,2.615,1667,3.106,1668,3.106,1669,3.106,1670,3.106,1671,3.106]],["title/components/SidebarComponent.html",[0,0.013,217,0.681]],["body/components/SidebarComponent.html",[0,0.016,1,0.933,2,0.738,3,0.147,4,0.125,5,0.518,6,0.481,7,0.518,8,0.125,10,0.662,11,1.426,13,0.481,14,1.455,15,1.563,16,1.062,17,1.158,18,0.738,19,0.765,20,0.795,23,1.04,24,0.446,25,0.795,27,0.919,29,0.355,30,0.307,32,1.77,33,1.319,34,1.903,37,2.431,38,0.409,41,2.703,43,0.267,44,1.292,45,2.664,47,0.654,49,0.558,50,0.029,51,0.4,52,0.361,53,0.558,57,1.105,60,1.421,62,2.269,67,0.832,70,0.787,72,1.664,74,0.938,76,1.105,79,1.225,86,0.751,87,0.799,88,0.738,89,1.225,96,1.81,98,0.726,99,0.518,100,0.412,101,0.241,103,0.86,104,1.18,108,1.819,109,1.426,111,0.147,112,0.274,113,1.292,114,1.677,116,1.18,117,1.81,118,1.001,119,1.18,120,1.007,123,0.684,126,2.583,139,0.738,150,1.535,177,0.518,178,0.795,179,0.738,180,0.381,181,1.084,182,0.518,183,0.967,184,0.446,185,1.084,186,0.446,187,0.446,188,0.518,189,0.481,190,0.481,191,0.518,192,0.446,193,0.518,194,0.446,195,0.518,196,0.446,197,0.481,198,0.446,199,0.518,200,0.446,201,0.518,202,0.481,203,0.518,204,1.194,205,0.518,206,0.481,207,0.518,208,0.481,209,0.518,210,0.446,211,0.518,212,0.446,213,0.518,214,0.446,215,0.481,216,0.518,217,0.933,218,0.518,219,0.481,220,0.518,221,0.446,222,1.262,223,0.446,224,0.518,225,0.481,226,0.412,227,0.481,228,0.518,229,0.014,230,0.014,237,1.084,239,1.146,254,1.81,262,2.703,268,3.077,269,2.984,277,2.926,282,1.939,288,1.594,295,1.061,297,0.926,309,1.087,340,2.187,346,2.703,380,0.926,404,3.335,413,3.02,414,3.338,415,3.077,437,2.811,439,2.984,444,3.123,457,2.445,498,1.981,541,2.445,543,1.981,544,3.394,557,2.984,575,3.077,577,3.396,583,1.981,600,2.202,604,3.57,617,2.926,618,3.218,621,1.292,622,1.426,691,2.984,718,2.445,720,2.445,722,1.426,825,2.445,909,2.384,923,2.974,937,1.819,974,3.335,982,2.703,983,2.445,990,2.984,999,2.445,1031,1.426,1032,1.292,1033,1.594,1041,1.426,1056,2.79,1062,2.445,1089,2.811,1107,3.335,1116,2.187,1121,2.79,1135,3.335,1141,2.79,1153,2.445,1173,2.445,1194,1.594,1195,1.594,1235,2.79,1284,1.981,1289,4.508,1590,2.187,1672,1.819,1673,3.313,1674,3.313,1675,4.031,1676,4.031,1677,4.031,1678,4.031,1679,4.031,1680,4.031,1681,4.031,1682,4.031,1683,4.52,1684,5.145,1685,4.52,1686,3.313,1687,4.52,1688,5.145,1689,3.313,1690,3.313,1691,2.16,1692,5.527,1693,3.313,1694,3.313,1695,2.16,1696,3.313,1697,3.313,1698,2.16,1699,4.332,1700,2.411,1701,2.16,1702,2.16,1703,3.313,1704,2.16,1705,3.806,1706,5.357,1707,2.79,1708,2.16,1709,2.16,1710,2.79,1711,3.313,1712,2.16,1713,2.16,1714,2.16,1715,3.313,1716,3.313,1717,2.16,1718,5.357,1719,3.313,1720,2.16,1721,2.16,1722,2.16,1723,2.16,1724,2.16,1725,2.16,1726,3.313,1727,3.313,1728,3.313,1729,3.313,1730,2.16,1731,2.16,1732,2.16,1733,2.16,1734,2.16,1735,2.16,1736,2.16,1737,1.426,1738,2.16,1739,2.16,1740,2.16,1741,3.313,1742,2.16,1743,3.313,1744,2.16,1745,3.313,1746,2.16,1747,3.313,1748,2.16,1749,4.876,1750,2.16,1751,4.031,1752,3.313,1753,3.313,1754,2.16,1755,3.313,1756,3.313,1757,3.313,1758,3.313,1759,2.16,1760,2.16,1761,1.819,1762,2.16,1763,2.16,1764,3.313,1765,3.313,1766,3.313,1767,3.313,1768,3.313,1769,3.313,1770,3.313]],["title/injectables/SidebarService.html",[37,1.416,469,0.916]],["body/injectables/SidebarService.html",[3,0.194,4,0.166,8,0.166,17,1.033,19,0.425,29,0.166,30,0.277,32,1.96,37,1.748,38,0.503,39,1.513,43,0.586,47,0.654,49,0.352,50,0.029,51,0.323,52,0.348,53,0.352,57,1.268,59,2.385,67,0.59,69,2.18,70,0.819,74,1.042,85,1.088,86,0.796,87,0.85,89,1.507,98,0.676,100,0.545,101,0.318,111,0.194,112,0.23,120,0.636,123,1.277,139,1.306,150,2.956,229,0.017,230,0.017,239,1.269,242,4.796,249,3.098,256,2.046,257,3.76,258,1.888,259,2.437,268,3.406,273,3.007,282,2.443,295,1.305,309,0.837,335,1.416,349,0.982,356,2.931,369,1.888,375,1.885,377,3.203,378,1.708,379,1.708,380,1.225,396,2.69,404,4.203,413,2.831,414,3.275,415,3.098,438,3.007,439,2.69,459,1.225,469,1.131,471,1.323,498,2.437,503,2.107,507,1.434,583,2.437,772,2.107,883,1.56,909,1.888,912,3.098,916,2.437,930,2.405,932,1.885,933,1.885,951,3.616,982,2.437,1001,3.007,1032,3.098,1135,3.007,1153,3.007,1288,3.506,1296,3.431,1297,2.69,1299,3.431,1300,2.69,1594,3.506,1699,4.613,1700,3.585,1705,3.431,1737,4.352,1761,2.405,1771,2.405,1772,4.751,1773,4.751,1774,5.181,1775,5.181,1776,5.181,1777,5.181,1778,5.181,1779,5.994,1780,5.994,1781,4.075,1782,4.075,1783,2.856,1784,2.856,1785,3.007,1786,2.856,1787,2.856,1788,2.856,1789,4.075,1790,2.856,1791,4.362,1792,4.362,1793,2.856,1794,4.075,1795,2.856,1796,2.856,1797,4.075,1798,2.856,1799,2.856,1800,2.856,1801,2.856,1802,2.856,1803,2.856,1804,2.405,1805,2.405,1806,2.107,1807,2.856,1808,2.405,1809,1.56,1810,2.107,1811,2.405,1812,2.856,1813,4.075,1814,4.075,1815,4.075,1816,4.075,1817,2.856,1818,2.856,1819,4.751,1820,2.856,1821,2.856,1822,2.856,1823,2.856,1824,2.856,1825,4.075,1826,2.856,1827,2.856,1828,2.856,1829,2.856,1830,2.856,1831,2.856,1832,2.856,1833,2.856,1834,3.007,1835,2.107,1836,2.107,1837,2.405,1838,2.405,1839,2.405,1840,2.405,1841,2.856,1842,2.856,1843,2.405,1844,2.405]],["title/injectables/StateService.html",[403,2.179,469,0.916]],["body/injectables/StateService.html",[0,0.02,3,0.26,4,0.222,8,0.222,10,0.795,16,1.027,17,1.154,29,0.222,30,0.339,34,2.454,38,0.614,43,0.749,47,0.65,49,0.472,50,0.029,51,0.26,52,0.321,53,0.472,57,1.118,60,2.135,67,0.79,70,0.723,74,0.807,76,1.188,85,1.24,86,0.795,87,0.845,88,1.108,98,0.683,100,0.731,101,0.427,111,0.26,112,0.185,114,1.902,120,0.853,139,1.108,197,1.459,229,0.02,230,0.02,257,3.285,403,3.285,406,4.656,459,1.642,469,1.381,471,1.774,507,1.922,595,4.19,603,3.285,617,3.604,990,4.323,1089,3.509,1107,4.32,1147,4.19,1150,4.32,1173,3.672,1194,2.825,1195,2.825,1196,2.091,1298,4.19,1307,4.08,1538,4.93,1845,5.514,1846,3.223,1847,5.53,1848,6.07,1849,5.855,1850,4.977,1851,5.855,1852,4.977,1853,6.549,1854,3.828,1855,3.828,1856,4.977,1857,4.977,1858,4.977,1859,4.19,1860,4.977,1861,4.977,1862,4.977,1863,4.977,1864,3.828,1865,3.828,1866,4.19,1867,4.977,1868,4.19,1869,4.977,1870,4.977,1871,3.828,1872,3.828,1873,3.828,1874,3.828,1875,4.977,1876,3.828,1877,3.828]],["title/injectables/ThreadService.html",[469,0.916,1095,1.804]],["body/injectables/ThreadService.html",[3,0.157,4,0.134,8,0.318,10,0.882,17,0.995,19,0.344,29,0.134,30,0.342,32,1.817,38,0.43,39,1.363,43,0.518,47,0.662,49,0.62,50,0.029,51,0.384,52,0.377,53,0.62,57,1.245,59,3.339,60,1.496,62,1.751,67,0.966,69,2.412,70,0.738,75,3.813,76,1.009,78,2.799,85,1.009,86,0.841,87,0.855,88,1.221,89,1.29,98,0.652,100,0.441,101,0.258,111,0.157,112,0.112,114,1.817,120,1.042,123,0.477,125,2.265,139,0.936,150,2.168,229,0.014,230,0.019,239,1.176,249,3.004,254,1.905,256,2.349,259,2.512,262,2.086,268,2.086,271,3.316,282,1.496,284,2.744,295,1.117,309,1.123,317,3.004,335,1.497,349,0.795,356,2.615,369,1.616,375,3.089,377,2.557,378,2.086,379,1.382,380,0.991,385,1.905,392,1.525,393,3.453,444,3.306,459,0.991,469,0.968,471,1.07,482,3.897,503,1.705,507,1.16,563,3.486,590,2.302,601,3.004,603,2.302,613,1.945,652,1.705,737,2.936,820,2.936,836,3.1,845,2.302,909,2.771,912,2.512,916,2.086,920,3.813,926,3.537,932,1.525,933,2.773,951,2.302,953,2.936,954,1.945,958,1.945,1001,4.263,1095,1.905,1105,3.537,1117,2.936,1119,4.675,1169,2.936,1196,1.262,1247,3.453,1250,4.229,1284,2.086,1289,2.573,1307,3.897,1600,2.936,1606,3.537,1710,3.537,1737,2.773,1785,3.1,1791,2.936,1806,1.705,1811,1.945,1834,1.705,1835,1.705,1836,2.573,1859,2.936,1866,3.537,1878,1.945,1879,4.201,1880,4.201,1881,5.023,1882,4.201,1883,4.201,1884,4.201,1885,4.201,1886,4.201,1887,4.201,1888,5.282,1889,5.282,1890,5.282,1891,4.68,1892,3.487,1893,4.68,1894,5.282,1895,5.282,1896,5.282,1897,4.68,1898,5.282,1899,3.487,1900,3.487,1901,2.31,1902,3.487,1903,6.192,1904,4.68,1905,5.282,1906,4.68,1907,3.487,1908,2.31,1909,3.487,1910,3.487,1911,3.487,1912,2.31,1913,3.487,1914,4.201,1915,3.487,1916,2.31,1917,3.487,1918,2.31,1919,2.31,1920,3.487,1921,2.31,1922,2.936,1923,4.201,1924,4.201,1925,4.201,1926,2.31,1927,2.31,1928,3.487,1929,2.31,1930,3.487,1931,3.487,1932,3.487,1933,2.31,1934,4.201,1935,4.201,1936,2.31,1937,3.487,1938,2.31,1939,2.31,1940,4.201,1941,2.31,1942,3.487,1943,2.31,1944,2.31,1945,2.31,1946,2.31,1947,2.31,1948,2.31,1949,2.31,1950,2.31,1951,3.487,1952,2.31,1953,2.31,1954,2.31,1955,4.68,1956,4.201,1957,2.31,1958,2.31,1959,2.31,1960,2.31,1961,2.31,1962,2.31,1963,2.31,1964,2.31,1965,2.31,1966,2.31,1967,2.31,1968,2.31,1969,2.31,1970,2.31,1971,2.31,1972,2.31,1973,2.31,1974,2.31,1975,2.31,1976,2.31,1977,2.31,1978,2.31,1979,2.31,1980,2.31,1981,2.31,1982,3.487,1983,2.31,1984,4.68,1985,2.31,1986,2.31,1987,2.31,1988,2.31,1989,2.31,1990,2.31,1991,2.31,1992,2.31,1993,2.31,1994,2.31,1995,2.31]],["title/classes/UserData.html",[112,0.16,1809,1.804]],["body/classes/UserData.html",[3,0.325,4,0.278,8,0.278,19,0.711,29,0.278,30,0.389,43,0.59,47,0.658,49,0.59,50,0.029,51,0.431,52,0.382,53,0.59,85,1.092,111,0.325,112,0.231,125,2.779,229,0.023,230,0.023,309,1.181,385,3.342,386,3.528,491,2.624,518,3.157,522,4.219,524,3.528,1249,4.038,1260,4.026,1261,4.026,1262,3.528,1263,4.026,1264,4.026,1269,4.026,1270,3.528,1700,3.658,1809,3.124,1996,4.026,1997,5.718,1998,4.782,1999,4.782,2000,4.782,2001,4.782,2002,4.782]],["title/interfaces/UserInfo.html",[538,1.974,2003,2.179]],["body/interfaces/UserInfo.html",[3,0.343,4,0.293,8,0.293,29,0.293,30,0.401,50,0.028,51,0.439,52,0.381,85,1.194,111,0.343,229,0.024,230,0.024,309,1.212,385,3.523,491,2.766,538,3.015,539,3.72,1249,4.257,1700,3.856,2003,3.894,2004,4.245]],["title/components/UserMenuDialogComponent.html",[0,0.013,221,0.681]],["body/components/UserMenuDialogComponent.html",[0,0.023,1,0.633,2,0.954,3,0.209,4,0.178,5,0.735,6,0.683,7,0.735,8,0.178,10,0.671,13,0.683,14,1.507,15,1.62,16,1.104,17,0.991,18,0.954,19,0.734,20,1.028,23,1.275,24,0.633,25,1.028,27,1.189,29,0.178,30,0.291,32,2.005,33,1.705,34,2.369,38,0.529,39,1.275,41,3.197,43,0.378,44,1.833,45,3.073,46,3.364,47,0.62,49,0.378,50,0.029,51,0.364,52,0.338,53,0.378,57,1.113,62,2.151,70,0.609,72,2.151,74,1.074,76,0.818,85,1.074,86,0.726,87,0.726,88,1.191,89,1.584,98,0.797,99,0.735,100,0.585,101,0.342,103,1.22,111,0.209,112,0.148,113,1.833,114,1.699,116,1.675,117,2.34,118,1.42,119,1.675,120,0.683,143,2.023,150,1.985,177,0.735,178,1.028,179,0.954,180,0.54,181,1.283,182,0.735,183,1.185,184,0.884,185,1.283,186,0.884,187,0.633,188,0.735,189,0.683,190,0.683,191,0.735,192,0.633,193,0.735,194,0.633,195,0.735,196,0.633,197,0.683,198,0.633,199,0.735,200,0.633,201,0.735,202,0.683,203,0.735,204,0.633,205,0.735,206,0.683,207,0.735,208,0.683,209,0.735,210,0.633,211,0.735,212,0.633,213,0.735,214,0.884,215,1.1,216,0.735,217,0.633,218,0.735,219,0.683,220,0.735,221,1.104,222,1.51,223,0.633,224,0.735,225,0.683,226,0.585,227,0.683,228,0.735,229,0.018,230,0.018,239,1.332,269,2.828,284,2.34,335,0.914,351,2.562,352,1.833,353,2.828,354,2.828,367,2.023,368,2.023,370,2.023,373,2.581,409,2.262,427,2.262,434,2.023,435,2.581,442,2.581,443,2.023,446,2.581,447,2.023,448,1.833,468,1.315,500,1.675,506,1.833,546,2.698,604,2.562,607,3.184,883,1.675,929,3.161,1017,3.949,1018,3.644,1019,3.26,1020,4.158,1021,4.158,1022,4.635,1023,2.262,1027,2.262,1029,2.262,1030,2.581,1031,2.023,1095,3.184,1182,3.161,1196,1.675,1240,2.581,1577,2.581,1580,4.907,1590,3.529,1591,3.607,1601,3.161,1635,2.581,1655,2.581,1665,2.581,1666,3.607,1809,2.34,1810,2.262,1922,3.607,2005,5.289,2006,4.938,2007,4.938,2008,5.829,2009,4.938,2010,3.065,2011,3.065,2012,3.607,2013,3.607,2014,4.284,2015,4.284,2016,4.284,2017,4.284,2018,3.065,2019,4.284,2020,4.284,2021,4.938,2022,3.065,2023,4.284,2024,3.065,2025,3.065,2026,3.065,2027,3.065,2028,3.065,2029,3.065,2030,4.284]],["title/injectables/UserService.html",[239,0.735,469,0.916]],["body/injectables/UserService.html",[0,0.012,3,0.132,4,0.112,8,0.247,10,0.724,19,0.559,29,0.112,30,0.29,38,0.375,39,1.675,43,0.239,47,0.645,49,0.692,50,0.029,51,0.431,52,0.359,53,0.718,55,1.662,57,1.253,59,3.058,63,2.686,67,1.131,69,2.12,70,0.793,74,1.105,75,2.008,76,0.718,78,1.819,79,1.125,80,1.409,85,0.813,86,0.629,87,0.629,88,1.146,98,0.572,100,0.369,101,0.216,111,0.132,112,0.094,120,1.295,123,1.217,125,1.827,139,1.249,150,1.741,215,0.677,229,0.012,230,0.012,239,0.677,250,3.628,257,3.246,258,0.896,270,2.548,277,1.662,282,1.304,284,1.662,307,2.561,309,1.183,317,2.548,321,3.628,322,1.427,327,2.008,335,1.733,356,2.987,369,1.409,375,1.277,376,1.629,377,3.356,378,1.157,379,1.157,380,0.83,385,3.509,392,1.277,395,2.561,396,3.618,397,3.164,413,1.662,443,4.256,459,0.83,468,0.83,469,0.844,471,0.896,480,2.481,487,4.139,491,2.406,507,0.971,508,0.896,564,2.941,568,3.796,569,2.244,583,2.77,601,1.819,607,1.662,652,1.427,665,1.277,809,1.277,812,2.244,832,4.139,833,2.561,839,2.773,845,2.812,854,2.548,909,2.469,912,1.819,916,2.941,923,2.773,932,1.277,933,1.277,951,2.008,982,1.819,997,3.164,999,4.044,1032,1.819,1249,2.481,1262,1.427,1270,2.244,1284,1.819,1288,2.244,1297,3.246,1300,2.008,1354,3.417,1380,3.164,1421,3.587,1422,1.629,1423,1.629,1529,3.587,1576,3.164,1594,2.244,1601,2.773,1602,4.331,1700,3.186,1737,3.892,1785,3.796,1792,4.14,1804,1.629,1805,1.629,1806,1.427,1808,3.164,1809,2.053,1810,1.427,1834,2.244,1835,1.427,1836,1.427,1837,1.629,1838,2.561,1839,1.629,1840,1.629,1843,3.587,1844,1.629,1868,2.561,2003,3.703,2012,2.561,2013,3.164,2031,1.629,2032,3.758,2033,5.481,2034,3.758,2035,3.041,2036,3.041,2037,4.26,2038,4.917,2039,3.041,2040,3.041,2041,3.041,2042,5.328,2043,4.26,2044,5.328,2045,4.26,2046,4.26,2047,4.26,2048,3.041,2049,4.917,2050,4.917,2051,4.917,2052,3.041,2053,3.041,2054,1.934,2055,3.758,2056,3.041,2057,1.934,2058,1.934,2059,3.041,2060,1.934,2061,4.917,2062,4.14,2063,3.041,2064,1.934,2065,4.917,2066,3.041,2067,3.041,2068,1.934,2069,4.26,2070,3.041,2071,1.934,2072,1.934,2073,3.9,2074,3.041,2075,3.041,2076,1.934,2077,4.917,2078,3.041,2079,1.934,2080,3.041,2081,1.934,2082,3.041,2083,4.26,2084,3.758,2085,3.758,2086,1.934,2087,4.26,2088,1.934,2089,3.041,2090,1.934,2091,3.041,2092,3.041,2093,3.041,2094,1.934,2095,3.758,2096,3.758,2097,4.632,2098,1.934,2099,1.934,2100,1.934,2101,1.934,2102,1.934,2103,1.934,2104,1.934,2105,1.934,2106,1.934,2107,1.934,2108,1.934,2109,1.934,2110,1.934,2111,3.041,2112,3.041,2113,1.934,2114,1.934,2115,3.041,2116,1.934,2117,1.934,2118,1.934,2119,1.934,2120,1.934,2121,1.934,2122,1.934,2123,1.934,2124,1.934,2125,1.934,2126,1.934,2127,1.934,2128,3.758,2129,1.934,2130,4.26,2131,1.934,2132,1.934,2133,1.934,2134,1.934,2135,1.934,2136,1.934,2137,1.934,2138,1.934,2139,1.934,2140,1.934,2141,1.934,2142,1.934,2143,1.934,2144,4.917,2145,1.934,2146,1.934,2147,1.934,2148,1.934,2149,3.041,2150,3.041,2151,3.041,2152,3.041,2153,1.934,2154,3.041,2155,1.934,2156,1.934,2157,1.934]],["title/components/VerifyComponent.html",[0,0.013,223,0.681]],["body/components/VerifyComponent.html",[0,0.022,1,0.787,2,1.105,3,0.259,4,0.221,5,0.914,6,0.849,7,0.914,8,0.221,10,0.794,13,0.849,14,1.533,15,1.649,16,1.207,17,0.972,18,1.105,19,0.82,20,1.19,23,1.424,24,0.787,25,1.19,27,1.377,29,0.221,30,0.338,34,1.835,38,0.612,39,1.424,43,0.47,46,2.967,47,0.606,49,0.47,50,0.028,51,0.398,52,0.339,53,0.47,57,0.947,60,2.128,70,0.47,73,3.661,74,0.948,80,2.299,86,0.517,87,0.517,98,0.748,99,0.914,100,0.728,101,0.425,102,1.409,103,1.516,111,0.259,112,0.184,143,2.515,172,2.967,177,0.914,178,1.19,179,1.105,180,0.671,181,1.402,182,0.914,183,1.324,184,0.787,185,1.402,186,0.787,187,0.787,188,0.914,189,0.849,190,0.849,191,0.914,192,0.787,193,0.914,194,0.787,195,0.914,196,0.787,197,0.849,198,0.787,199,0.914,200,0.787,201,0.914,202,0.849,203,0.914,204,0.787,205,0.914,206,0.849,207,0.914,208,0.849,209,0.914,210,0.787,211,0.914,212,0.787,213,0.914,214,0.787,215,0.849,216,0.914,217,0.787,218,0.914,219,0.849,220,0.914,221,0.787,222,0.849,223,1.207,224,1.324,225,0.849,226,0.728,227,0.849,228,0.914,229,0.02,230,0.02,256,2.491,309,0.874,335,1.136,470,3.395,480,4.102,508,1.766,800,3.642,804,4.646,850,4.178,854,3.495,860,3.275,871,3.208,894,3.661,910,3.661,911,4.178,1017,3.858,1019,3.642,1455,4.178,1590,3.275,1633,3.208,1660,3.208,2158,3.208,2159,4.962,2160,4.962,2161,6.214,2162,3.811,2163,4.962,2164,3.811,2165,4.962,2166,4.962,2167,3.811,2168,3.811,2169,3.811,2170,4.962]],["title/coverage.html",[2171,3.797]],["body/coverage.html",[0,0.027,1,0.819,8,0.23,9,3.757,10,0.833,11,3.361,12,3.757,17,1.046,24,0.819,32,1.364,37,1.701,50,0.029,52,0.23,74,1.018,94,2.618,106,2.618,112,0.272,180,0.699,184,0.819,186,0.819,187,0.819,189,0.883,190,0.883,192,0.819,194,0.819,196,0.819,198,0.819,200,0.819,202,0.883,204,0.819,206,0.883,208,0.883,210,0.819,212,0.819,214,0.819,217,0.819,219,0.883,221,0.819,222,1.134,223,0.819,226,0.757,229,0.021,230,0.021,239,0.883,349,2.266,350,3.757,351,3.045,352,3.549,403,2.618,434,2.618,458,3.339,469,1.828,470,2.167,472,3.339,519,3.339,538,3.045,540,3.339,542,3.339,563,2.618,711,4.735,772,2.926,798,3.339,898,3.339,899,3.339,966,3.339,1022,2.926,1063,3.339,1079,3.339,1089,2.167,1095,2.167,1155,3.339,1245,2.926,1246,3.339,1275,2.926,1276,3.339,1328,3.339,1353,3.339,1492,3.339,1515,3.339,1516,3.339,1568,3.339,1569,3.339,1672,3.339,1771,3.339,1809,2.167,1845,3.339,1846,3.339,1878,3.339,1996,3.339,2003,2.618,2004,3.339,2005,3.339,2031,3.339,2062,3.339,2158,3.339,2171,3.339,2172,3.966,2173,3.966,2174,5.624,2175,3.339,2176,3.339,2177,5.624,2178,3.966,2179,3.966,2180,5.092,2181,3.966,2182,3.966,2183,5.092,2184,3.966,2185,3.966,2186,3.966,2187,3.966,2188,3.966,2189,3.966,2190,3.966,2191,3.966,2192,5.092,2193,3.966,2194,3.966,2195,3.966,2196,3.966,2197,3.966,2198,3.966,2199,3.966,2200,3.966,2201,3.966,2202,3.966,2203,3.966,2204,3.966,2205,3.966,2206,3.966,2207,5.092,2208,3.966,2209,3.966,2210,3.966,2211,3.966,2212,3.966,2213,3.966,2214,3.966,2215,3.966,2216,3.966,2217,3.966,2218,3.966,2219,3.966,2220,3.966,2221,3.966,2222,3.966,2223,3.966,2224,3.966,2225,3.966,2226,3.966,2227,3.966,2228,3.966,2229,3.966,2230,3.966,2231,3.966,2232,3.966,2233,3.966,2234,3.966,2235,3.966,2236,3.966,2237,3.966,2238,3.966,2239,3.966,2240,3.966,2241,3.966,2242,3.966,2243,3.966,2244,3.966,2245,3.966,2246,3.966,2247,3.966,2248,3.966]],["title/dependencies.html",[2249,2.033,2250,3.344]],["body/dependencies.html",[50,0.028,99,1.221,101,0.568,102,1.882,229,0.024,230,0.024,468,2.183,621,3.044,1196,2.781,1247,3.756,2250,4.286,2251,6.775,2252,5.09,2253,5.933,2254,5.09,2255,5.09,2256,5.09,2257,5.09,2258,5.933,2259,5.933,2260,5.09,2261,5.09,2262,5.09,2263,5.09,2264,5.09,2265,5.09,2266,5.09,2267,5.09,2268,5.09]],["title/index.html",[29,0.16,2269,2.755,2270,2.755]],["body/index.html",[0,0.024,4,0.278,10,0.651,16,0.989,50,0.023,51,0.326,229,0.023,230,0.023,485,2.866,543,2.866,579,3.536,584,4.035,585,4.042,607,2.619,666,2.619,698,4.855,813,4.518,832,3.536,836,3.536,1297,3.164,1302,4.821,1609,4.035,1707,4.035,2073,4.035,2249,3.536,2271,5.726,2272,4.793,2273,6.124,2274,4.035,2275,4.793,2276,4.793,2277,5.726,2278,6.484,2279,6.651,2280,4.793,2281,4.793,2282,4.793,2283,4.793,2284,4.793,2285,4.793,2286,4.793,2287,6.124,2288,4.793,2289,6.344,2290,4.793,2291,4.793,2292,4.793,2293,5.726,2294,5.726,2295,6.344,2296,4.793,2297,5.726,2298,4.793,2299,4.793,2300,4.793,2301,4.793,2302,5.726,2303,4.793,2304,4.793,2305,4.793,2306,4.793,2307,6.124,2308,4.793,2309,4.793,2310,3.536]],["title/modules.html",[2311,3.797]],["body/modules.html",[50,0.025,229,0.025,230,0.025,2311,4.564]],["title/overview.html",[2310,3.327]],["body/overview.html",[2,1.192,50,0.025,180,0.943,229,0.025,230,0.025,319,2.479,471,2.479,518,3.532,539,3.948,752,4.505,2310,3.948,2312,5.351,2313,5.351,2314,5.351]],["title/properties.html",[30,0.27,2249,2.033]],["body/properties.html",[30,0.367,50,0.026,229,0.025,230,0.025,2274,4.546,2315,5.399]],["title/miscellaneous/variables.html",[1550,2.93,2316,2.32]],["body/miscellaneous/variables.html",[29,0.295,50,0.028,52,0.295,86,0.69,87,0.69,229,0.024,230,0.024,465,5.282,466,5.282,500,2.774,1550,3.747,2175,4.275,2176,4.988,2316,4.275,2317,5.078,2318,5.078,2319,5.078,2320,5.078,2321,5.078,2322,5.078,2323,5.078,2324,5.078,2325,5.078,2326,5.078,2327,5.078,2328,5.078,2329,5.078,2330,5.078,2331,5.078,2332,5.078,2333,5.078,2334,5.078,2335,5.078,2336,5.078,2337,5.078,2338,5.078,2339,5.078,2340,5.078,2341,5.078]]],"invertedIndex":[["",{"_index":50,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":349,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"coverage.html":{}}}],["0.0.0",{"_index":2315,"title":{},"body":{"properties.html":{}}}],["0.14.2",{"_index":2268,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2177,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2226,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2174,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2224,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2227,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2225,"title":{},"body":{"coverage.html":{}}}],["000000000",{"_index":1078,"title":{},"body":{"components/ImprintComponent.html":{}}}],["1",{"_index":319,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/HeaderComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"overview.html":{}}}],["1.1",{"_index":735,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["1.125rem",{"_index":782,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["1.1875rem",{"_index":704,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["1.25rem",{"_index":791,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["1.4s",{"_index":763,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["1/15",{"_index":2191,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":2187,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":2223,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":2313,"title":{},"body":{"overview.html":{}}}],["10/29",{"_index":2221,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":715,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{}}}],["1000",{"_index":884,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["100px",{"_index":784,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["10px",{"_index":756,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["11/12",{"_index":2237,"title":{},"body":{"coverage.html":{}}}],["11/27",{"_index":2212,"title":{},"body":{"coverage.html":{}}}],["1181px",{"_index":780,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["12/23",{"_index":2234,"title":{},"body":{"coverage.html":{}}}],["120px",{"_index":787,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["12px",{"_index":783,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["13/33",{"_index":2196,"title":{},"body":{"coverage.html":{}}}],["14/34",{"_index":2206,"title":{},"body":{"coverage.html":{}}}],["14/37",{"_index":2184,"title":{},"body":{"coverage.html":{}}}],["1440",{"_index":1556,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["1440px",{"_index":1545,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["16",{"_index":2222,"title":{},"body":{"coverage.html":{}}}],["16/37",{"_index":2202,"title":{},"body":{"coverage.html":{}}}],["16/42",{"_index":2243,"title":{},"body":{"coverage.html":{}}}],["168px",{"_index":713,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["16px",{"_index":703,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["17.0.0",{"_index":2251,"title":{},"body":{"dependencies.html":{}}}],["17.0.6",{"_index":2275,"title":{},"body":{"index.html":{}}}],["17.1.0",{"_index":2256,"title":{},"body":{"dependencies.html":{}}}],["17.3.10",{"_index":2253,"title":{},"body":{"dependencies.html":{}}}],["17/27",{"_index":2246,"title":{},"body":{"coverage.html":{}}}],["180deg",{"_index":631,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["184px",{"_index":758,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["186px",{"_index":757,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["19px",{"_index":1491,"title":{},"body":{"components/RegisterComponent.html":{}}}],["1:728652156728:web:52fda9767640c5a89efbcd",{"_index":2328,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1px",{"_index":747,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["1rem",{"_index":797,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["2",{"_index":752,"title":{},"body":{"components/ChooseavatarComponent.html":{},"overview.html":{}}}],["2.3.0",{"_index":2266,"title":{},"body":{"dependencies.html":{}}}],["2/8",{"_index":2235,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":2186,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":2028,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["20px",{"_index":709,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["21",{"_index":2188,"title":{},"body":{"coverage.html":{}}}],["22/58",{"_index":2230,"title":{},"body":{"coverage.html":{}}}],["23",{"_index":2312,"title":{},"body":{"overview.html":{}}}],["24px",{"_index":700,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["25",{"_index":772,"title":{},"body":{"components/ChooseavatarComponent.html":{},"injectables/SidebarService.html":{},"coverage.html":{}}}],["27",{"_index":2207,"title":{},"body":{"coverage.html":{}}}],["27/55",{"_index":2199,"title":{},"body":{"coverage.html":{}}}],["28",{"_index":2203,"title":{},"body":{"coverage.html":{}}}],["2px",{"_index":1474,"title":{},"body":{"components/RegisterComponent.html":{}}}],["2rem",{"_index":692,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["3",{"_index":2314,"title":{},"body":{"overview.html":{}}}],["3/10",{"_index":2219,"title":{},"body":{"coverage.html":{}}}],["3/11",{"_index":2208,"title":{},"body":{"coverage.html":{}}}],["3/14",{"_index":2189,"title":{},"body":{"coverage.html":{}}}],["3/7",{"_index":2228,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":2218,"title":{},"body":{"coverage.html":{}}}],["30deg",{"_index":1502,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["32px",{"_index":740,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["33",{"_index":2216,"title":{},"body":{"coverage.html":{}}}],["33/66",{"_index":2214,"title":{},"body":{"coverage.html":{}}}],["34",{"_index":2220,"title":{},"body":{"coverage.html":{}}}],["36",{"_index":2209,"title":{},"body":{"coverage.html":{}}}],["36px",{"_index":793,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["37",{"_index":2183,"title":{},"body":{"coverage.html":{}}}],["38",{"_index":2242,"title":{},"body":{"coverage.html":{}}}],["39",{"_index":2195,"title":{},"body":{"coverage.html":{}}}],["4/14",{"_index":2204,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":2211,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":1488,"title":{},"body":{"components/RegisterComponent.html":{}}}],["400px",{"_index":1489,"title":{},"body":{"components/RegisterComponent.html":{}}}],["40px",{"_index":687,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["41",{"_index":2205,"title":{},"body":{"coverage.html":{}}}],["42",{"_index":2180,"title":{},"body":{"coverage.html":{}}}],["422px",{"_index":794,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["42526e",{"_index":1487,"title":{},"body":{"components/RegisterComponent.html":{}}}],["43",{"_index":2201,"title":{},"body":{"coverage.html":{}}}],["44",{"_index":2238,"title":{},"body":{"coverage.html":{}}}],["444df2ce",{"_index":753,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["46",{"_index":2178,"title":{},"body":{"coverage.html":{}}}],["46px",{"_index":795,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["480",{"_index":1562,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["480px",{"_index":792,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["49",{"_index":2198,"title":{},"body":{"coverage.html":{}}}],["4px",{"_index":726,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["5",{"_index":1457,"title":{},"body":{"components/RegisterComponent.html":{}}}],["5/10",{"_index":2240,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":711,"title":{},"body":{"components/ChooseavatarComponent.html":{},"coverage.html":{}}}],["50px",{"_index":1466,"title":{},"body":{"components/RegisterComponent.html":{}}}],["52",{"_index":2233,"title":{},"body":{"coverage.html":{}}}],["56px",{"_index":796,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["57px",{"_index":768,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["58px",{"_index":767,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["6",{"_index":2190,"title":{},"body":{"coverage.html":{}}}],["6/14",{"_index":2181,"title":{},"body":{"coverage.html":{}}}],["6/18",{"_index":2217,"title":{},"body":{"coverage.html":{}}}],["600",{"_index":1560,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["60px",{"_index":790,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["62",{"_index":2245,"title":{},"body":{"coverage.html":{}}}],["64px",{"_index":725,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["67px",{"_index":688,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["7.8.0",{"_index":2264,"title":{},"body":{"dependencies.html":{}}}],["7/15",{"_index":2179,"title":{},"body":{"coverage.html":{}}}],["7/19",{"_index":2210,"title":{},"body":{"coverage.html":{}}}],["700",{"_index":694,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["728652156728",{"_index":2336,"title":{},"body":{"miscellaneous/variables.html":{}}}],["72px",{"_index":724,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["75",{"_index":775,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["768px",{"_index":786,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["8",{"_index":1461,"title":{},"body":{"components/RegisterComponent.html":{}}}],["8/16",{"_index":2185,"title":{},"body":{"coverage.html":{}}}],["8/18",{"_index":2239,"title":{},"body":{"coverage.html":{}}}],["8/29",{"_index":2244,"title":{},"body":{"coverage.html":{}}}],["8px",{"_index":785,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["9.2.0",{"_index":2263,"title":{},"body":{"dependencies.html":{}}}],["91",{"_index":2236,"title":{},"body":{"coverage.html":{}}}],["960",{"_index":1558,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["_elementref",{"_index":1336,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["a.timestamp",{"_index":1964,"title":{},"body":{"injectables/ThreadService.html":{}}}],["abbrechen",{"_index":1671,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["aborts",{"_index":1909,"title":{},"body":{"injectables/ThreadService.html":{}}}],["absolute",{"_index":749,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["abstractcontrol",{"_index":862,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["accept",{"_index":279,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["access",{"_index":921,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["accordingly",{"_index":820,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"injectables/ThreadService.html":{}}}],["actions",{"_index":1131,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["active",{"_index":1289,"title":{},"body":{"injectables/MutationObserverService.html":{},"components/SidebarComponent.html":{},"injectables/ThreadService.html":{}}}],["activechanneltitle",{"_index":1675,"title":{},"body":{"components/SidebarComponent.html":{}}}],["activedirectchannel",{"_index":1676,"title":{},"body":{"components/SidebarComponent.html":{}}}],["activeprivatechannel",{"_index":1677,"title":{},"body":{"components/SidebarComponent.html":{}}}],["actual",{"_index":1789,"title":{},"body":{"injectables/SidebarService.html":{}}}],["actual_component",{"_index":228,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["add",{"_index":16,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"index.html":{}}}],["adddoc",{"_index":375,"title":{},"body":{"components/AddUserDialogComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["adddoc(collection(this.firestore",{"_index":395,"title":{},"body":{"components/AddUserDialogComponent.html":{},"injectables/UserService.html":{}}}],["adddoc(this.refthreadmessages",{"_index":1966,"title":{},"body":{"injectables/ThreadService.html":{}}}],["added",{"_index":1296,"title":{},"body":{"injectables/MutationObserverService.html":{},"injectables/SidebarService.html":{}}}],["addeduser",{"_index":365,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["addeduser.reset",{"_index":383,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["adding",{"_index":419,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["addnewchannel",{"_index":1715,"title":{},"body":{"components/SidebarComponent.html":{}}}],["addnewchannelcomponent",{"_index":1,"title":{"components/AddNewChannelComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["addnewusertochannelcomponent",{"_index":24,"title":{"components/AddNewUserToChannelComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["address",{"_index":1387,"title":{},"body":{"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["adds",{"_index":259,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/MainsectionComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{}}}],["adduser",{"_index":355,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{}}}],["adduserdialogcomponent",{"_index":184,"title":{"components/AddUserDialogComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["addusertochanneldialogcomponent",{"_index":186,"title":{"components/AddUserToChannelDialogComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["adresse",{"_index":1076,"title":{},"body":{"components/ImprintComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{}}}],["afterclosed",{"_index":447,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["afterviewinit",{"_index":1080,"title":{},"body":{"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{}}}],["afterwards",{"_index":66,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["again",{"_index":1925,"title":{},"body":{"injectables/ThreadService.html":{}}}],["against",{"_index":844,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["ai",{"_index":721,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["aktiv",{"_index":1593,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["align",{"_index":706,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["alle",{"_index":341,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["allows",{"_index":1607,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["allusers",{"_index":2032,"title":{},"body":{"injectables/UserService.html":{}}}],["already",{"_index":1421,"title":{},"body":{"components/RegisterComponent.html":{},"injectables/UserService.html":{}}}],["alreadypushed",{"_index":1648,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["anderen",{"_index":175,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["angular",{"_index":585,"title":{},"body":{"components/ChooseavatarComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"index.html":{}}}],["angular/animations",{"_index":621,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{},"components/SidebarComponent.html":{},"dependencies.html":{}}}],["angular/cdk",{"_index":2252,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/dialog",{"_index":110,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["angular/common",{"_index":99,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":2254,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":101,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"dependencies.html":{}}}],["angular/fire",{"_index":2255,"title":{},"body":{"dependencies.html":{}}}],["angular/fire/app",{"_index":1401,"title":{},"body":{"components/RegisterComponent.html":{}}}],["angular/fire/app/app.module",{"_index":301,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["angular/fire/auth",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["angular/fire/firestore",{"_index":380,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["angular/forms",{"_index":102,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/VerifyComponent.html":{},"dependencies.html":{}}}],["angular/material",{"_index":2257,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":299,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["angular/material/dialog",{"_index":103,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["angular/material/menu",{"_index":298,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["angular/platform",{"_index":2258,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":468,"title":{},"body":{"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ImprintComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["animate",{"_index":620,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["animate('0.3s",{"_index":633,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["animation",{"_index":761,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["animations",{"_index":622,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{},"components/SidebarComponent.html":{}}}],["anmelden",{"_index":897,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["another",{"_index":2082,"title":{},"body":{"injectables/UserService.html":{}}}],["apikey",{"_index":2331,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":15,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["app.component.html",{"_index":461,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":462,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":187,"title":{"components/AppComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":2176,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appear",{"_index":1140,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["appearance",{"_index":1471,"title":{},"body":{"components/RegisterComponent.html":{}}}],["appid",{"_index":2327,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application",{"_index":2283,"title":{},"body":{"index.html":{}}}],["applicationconfig",{"_index":2318,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appoutsideclick",{"_index":227,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["arguments",{"_index":1338,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["around",{"_index":789,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["array",{"_index":268,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{}}}],["arrayremove",{"_index":930,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"injectables/SidebarService.html":{}}}],["arrayremove(this.userservice.currentuser",{"_index":950,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["arrayunion",{"_index":376,"title":{},"body":{"components/AddUserDialogComponent.html":{},"injectables/UserService.html":{}}}],["arrayunion(this.createuserinfo.id",{"_index":2148,"title":{},"body":{"injectables/UserService.html":{}}}],["arrayunion(user.uid",{"_index":394,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["artifacts",{"_index":2290,"title":{},"body":{"index.html":{}}}],["assets/img/login/default_profil_img.png",{"_index":609,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["assign",{"_index":2065,"title":{},"body":{"injectables/UserService.html":{}}}],["async",{"_index":39,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["asynchronous",{"_index":1915,"title":{},"body":{"injectables/ThreadService.html":{}}}],["asynchronously",{"_index":256,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"components/VerifyComponent.html":{}}}],["aufgetreten",{"_index":1439,"title":{},"body":{"components/RegisterComponent.html":{}}}],["aus",{"_index":668,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["auth",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["auth/email",{"_index":1442,"title":{},"body":{"components/RegisterComponent.html":{}}}],["auth/invalid",{"_index":1446,"title":{},"body":{"components/RegisterComponent.html":{}}}],["authdomain",{"_index":2333,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authentication",{"_index":2015,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["authentification",{"_index":2149,"title":{},"body":{"injectables/UserService.html":{}}}],["authservice",{"_index":470,"title":{"injectables/AuthService.html":{}},"body":{"injectables/AuthService.html":{},"components/ConfirmpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["automatically",{"_index":584,"title":{},"body":{"components/ChooseavatarComponent.html":{},"index.html":{}}}],["avatar",{"_index":599,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["avatars",{"_index":550,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["await",{"_index":335,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["b",{"_index":1963,"title":{},"body":{"injectables/ThreadService.html":{}}}],["b.timestamp",{"_index":1965,"title":{},"body":{"injectables/ThreadService.html":{}}}],["background",{"_index":744,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["bar",{"_index":1134,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["based",{"_index":282,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["bearbeiten",{"_index":961,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"components/ShowProfileComponent.html":{}}}],["behavior",{"_index":1047,"title":{},"body":{"components/HeaderComponent.html":{}}}],["behaviorsubject",{"_index":1866,"title":{},"body":{"injectables/StateService.html":{},"injectables/ThreadService.html":{}}}],["bei",{"_index":1448,"title":{},"body":{"components/RegisterComponent.html":{}}}],["being",{"_index":912,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"injectables/MutationObserverService.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["beispiel",{"_index":163,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["benutzer",{"_index":1426,"title":{},"body":{"components/RegisterComponent.html":{}}}],["ber",{"_index":1511,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["bereits",{"_index":1428,"title":{},"body":{"components/RegisterComponent.html":{}}}],["beschreibung",{"_index":176,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["besten",{"_index":156,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["bestimmte",{"_index":345,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["bestätigen",{"_index":2170,"title":{},"body":{"components/VerifyComponent.html":{}}}],["between",{"_index":720,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{}}}],["bild",{"_index":673,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["bitte",{"_index":172,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/VerifyComponent.html":{}}}],["block",{"_index":1039,"title":{},"body":{"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{}}}],["blub",{"_index":766,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["boolean",{"_index":85,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"injectables/AuthService.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{}}}],["border",{"_index":710,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["bottom",{"_index":708,"title":{},"body":{"components/ChooseavatarComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{}}}],["box",{"_index":117,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["browser",{"_index":2259,"title":{},"body":{"dependencies.html":{}}}],["btns",{"_index":695,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["bubble",{"_index":466,"title":{},"body":{"components/AppComponent.html":{},"miscellaneous/variables.html":{}}}],["build",{"_index":2289,"title":{},"body":{"index.html":{}}}],["button",{"_index":743,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["call",{"_index":1533,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["callback",{"_index":1538,"title":{},"body":{"injectables/ResizeListenerService.html":{},"injectables/StateService.html":{}}}],["callbacks",{"_index":1535,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["called",{"_index":64,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ChooseavatarComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{}}}],["calling",{"_index":252,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["calls",{"_index":825,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{}}}],["capabilities",{"_index":2305,"title":{},"body":{"index.html":{}}}],["case",{"_index":1441,"title":{},"body":{"components/RegisterComponent.html":{}}}],["catch",{"_index":134,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{}}}],["catch((error",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["cb",{"_index":1567,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["center",{"_index":707,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["change",{"_index":2285,"title":{},"body":{"index.html":{}}}],["changed",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{},"components/ShowProfileComponent.html":{}}}],["changedata",{"_index":1888,"title":{},"body":{"injectables/ThreadService.html":{}}}],["changedata(data",{"_index":1900,"title":{},"body":{"injectables/ThreadService.html":{}}}],["changeddescription",{"_index":927,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["changeddescription.reset",{"_index":949,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["changedetector",{"_index":1085,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["changedetectorref",{"_index":1163,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["changeeditchannelstatus",{"_index":903,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["changeeditdescriptionstatus",{"_index":904,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["changes",{"_index":845,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"injectables/MutationObserverService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["channel",{"_index":17,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["channel'},{'name",{"_index":183,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["channel.component",{"_index":108,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/SidebarComponent.html":{}}}],["channel.component.html",{"_index":26,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.scss",{"_index":28,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts",{"_index":12,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"coverage.html":{}}}],["channel.component.ts:104",{"_index":247,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:112",{"_index":255,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:20",{"_index":291,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:21",{"_index":90,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:22",{"_index":97,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:23",{"_index":95,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:24",{"_index":93,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:25",{"_index":286,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:26",{"_index":287,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:27",{"_index":294,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:28",{"_index":48,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:29",{"_index":285,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:30",{"_index":91,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["channel.component.ts:31",{"_index":246,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:36",{"_index":71,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["channel.component.ts:41",{"_index":261,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:47",{"_index":56,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["channel.component.ts:59",{"_index":280,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:72",{"_index":77,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["channel.component.ts:74",{"_index":251,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:83",{"_index":267,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.component.ts:96",{"_index":275,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["channel.service",{"_index":1811,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/ThreadService.html":{}}}],["channel.title",{"_index":1765,"title":{},"body":{"components/SidebarComponent.html":{}}}],["channel.users.foreach((element",{"_index":1841,"title":{},"body":{"injectables/SidebarService.html":{}}}],["channel/add",{"_index":11,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/SidebarComponent.html":{},"coverage.html":{}}}],["channel/channel.component",{"_index":1191,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["channelcomponent",{"_index":189,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["channelcounter",{"_index":1819,"title":{},"body":{"injectables/SidebarService.html":{}}}],["channeldata",{"_index":106,"title":{"classes/ChannelData.html":{}},"body":{"components/AddNewChannelComponent.html":{},"classes/ChannelData.html":{},"coverage.html":{}}}],["channeldummy",{"_index":145,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["channeldummy.setdata(this.inputs.channelname",{"_index":146,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["channeldummy.tojson",{"_index":148,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["channelelement",{"_index":1086,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["channelid",{"_index":397,"title":{},"body":{"components/AddUserDialogComponent.html":{},"injectables/UserService.html":{}}}],["channelid.channelid",{"_index":2147,"title":{},"body":{"injectables/UserService.html":{}}}],["channelinfo",{"_index":94,"title":{"interfaces/ChannelInfo.html":{}},"body":{"components/AddNewChannelComponent.html":{},"interfaces/ChannelInfo.html":{},"coverage.html":{}}}],["channelmessagescomponent",{"_index":190,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["channelname",{"_index":92,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["channelname.reset",{"_index":941,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["channelnameexists",{"_index":31,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["channelnameexists:boolean",{"_index":935,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["channels",{"_index":150,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{}}}],["channelservice",{"_index":32,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"coverage.html":{}}}],["channelservice.channelmsgdata.creator",{"_index":964,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["channelservice.channelmsgdata.description",{"_index":963,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["channelservice.channelmsgdata.title",{"_index":960,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["channelservice.currentchannelusers",{"_index":455,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["channelusers",{"_index":1772,"title":{},"body":{"injectables/SidebarService.html":{}}}],["characterdata",{"_index":1326,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["check",{"_index":832,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"injectables/UserService.html":{},"index.html":{}}}],["checkbox",{"_index":1469,"title":{},"body":{"components/RegisterComponent.html":{}}}],["checked",{"_index":1480,"title":{},"body":{"components/RegisterComponent.html":{}}}],["checked:hover",{"_index":1482,"title":{},"body":{"components/RegisterComponent.html":{}}}],["checkifuserexists",{"_index":2035,"title":{},"body":{"injectables/UserService.html":{}}}],["checkifuserexists(userid",{"_index":2053,"title":{},"body":{"injectables/UserService.html":{}}}],["checkmobilesmallscreen",{"_index":1683,"title":{},"body":{"components/SidebarComponent.html":{}}}],["checkregistereduser",{"_index":2036,"title":{},"body":{"injectables/UserService.html":{}}}],["checkregistereduser(email",{"_index":2056,"title":{},"body":{"injectables/UserService.html":{}}}],["checks",{"_index":262,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/MainsectionComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/ThreadService.html":{}}}],["checktitle",{"_index":124,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["checkuid",{"_index":320,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["checkupdateinput",{"_index":1579,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["child(4",{"_index":1468,"title":{},"body":{"components/RegisterComponent.html":{}}}],["childlist",{"_index":1324,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["children",{"_index":1295,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["choice",{"_index":2301,"title":{},"body":{"index.html":{}}}],["chooseavatar",{"_index":545,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["chooseavatar'},{'name",{"_index":193,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["chooseavatar.component.html",{"_index":549,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["chooseavatar.component.scss",{"_index":548,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["chooseavatarcomponent",{"_index":192,"title":{"components/ChooseavatarComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["class",{"_index":112,"title":{"classes/ChannelData.html":{},"classes/MessageData.html":{},"classes/UserData.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["classes",{"_index":518,"title":{},"body":{"classes/ChannelData.html":{},"classes/MessageData.html":{},"classes/UserData.html":{},"overview.html":{}}}],["clean",{"_index":1858,"title":{},"body":{"injectables/StateService.html":{}}}],["cleanup",{"_index":1146,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["clearactivestyle",{"_index":1684,"title":{},"body":{"components/SidebarComponent.html":{}}}],["clearfiledata",{"_index":1889,"title":{},"body":{"injectables/ThreadService.html":{}}}],["clears",{"_index":269,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["cli",{"_index":2273,"title":{},"body":{"index.html":{}}}],["click",{"_index":1616,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["clickedinside",{"_index":1350,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["closed",{"_index":1718,"title":{},"body":{"components/SidebarComponent.html":{}}}],["closedialog",{"_index":1580,"title":{},"body":{"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["closes",{"_index":1590,"title":{},"body":{"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["closesides",{"_index":1100,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["closing",{"_index":1127,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["code",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{},"components/ConfirmpasswordComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"index.html":{}}}],["collection",{"_index":377,"title":{},"body":{"components/AddUserDialogComponent.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["collection(this.firestore",{"_index":1834,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["color",{"_index":732,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["column",{"_index":755,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["command",{"_index":2302,"title":{},"body":{"index.html":{}}}],["commonmodule",{"_index":23,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["compareformcontrol",{"_index":806,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["compares",{"_index":816,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["complete",{"_index":1388,"title":{},"body":{"components/RegisterComponent.html":{}}}],["completed",{"_index":1376,"title":{},"body":{"components/RegisterComponent.html":{}}}],["component",{"_index":0,"title":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":182,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"overview.html":{}}}],["confirmnewpassword",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{},"components/ConfirmpasswordComponent.html":{}}}],["confirmnewpassword(code",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirmpassword",{"_index":799,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["confirmpassword'},{'name",{"_index":195,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["confirmpassword.component.html",{"_index":801,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["confirmpassword.component.scss",{"_index":802,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["confirmpasswordcomponent",{"_index":194,"title":{"components/ConfirmpasswordComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["confirmpasswordreset",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{},"components/ConfirmpasswordComponent.html":{}}}],["confirmpasswordreset(auth",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirms",{"_index":822,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["console.error(error",{"_index":136,"title":{},"body":{"components/AddNewChannelComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{}}}],["console.error(error.code",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(\"listener",{"_index":1986,"title":{},"body":{"injectables/ThreadService.html":{}}}],["console.log('hallo",{"_index":1239,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["console.log(addeduser.name",{"_index":381,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["console.log(error",{"_index":940,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["console.log(this.code",{"_index":870,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["console.log(this.messages",{"_index":1961,"title":{},"body":{"injectables/ThreadService.html":{}}}],["console.log(this.newchannelvalues.name",{"_index":943,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["console.log(this.newchannelvalues.newdescription",{"_index":948,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["console.log(this.selecteduser",{"_index":389,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["console.log(this.userservice.userinfo.email",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(user",{"_index":391,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["const",{"_index":123,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":43,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["constructor(_elementref",{"_index":1334,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["constructor(dialog",{"_index":44,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["constructor(dialogref",{"_index":2162,"title":{},"body":{"components/VerifyComponent.html":{}}}],["constructor(ngzone",{"_index":1526,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["constructor(obj",{"_index":522,"title":{},"body":{"classes/ChannelData.html":{},"classes/MessageData.html":{},"classes/UserData.html":{}}}],["constructor(private",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["constructor(public",{"_index":113,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["constructor(router",{"_index":809,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/UserService.html":{}}}],["constructor(storageservice",{"_index":562,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["constructor(userservice",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructs",{"_index":1370,"title":{},"body":{"components/RegisterComponent.html":{}}}],["contain",{"_index":1477,"title":{},"body":{"components/RegisterComponent.html":{}}}],["container",{"_index":996,"title":{},"body":{"components/HeaderComponent.html":{}}}],["contains",{"_index":317,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/HeaderComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["content",{"_index":742,"title":{},"body":{"components/ChooseavatarComponent.html":{},"injectables/MutationObserverService.html":{}}}],["continue",{"_index":1363,"title":{},"body":{"components/RegisterComponent.html":{}}}],["continues",{"_index":1373,"title":{},"body":{"components/RegisterComponent.html":{}}}],["control",{"_index":824,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["control.value",{"_index":890,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["controlname",{"_index":835,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["controls",{"_index":819,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/ShowProfileComponent.html":{}}}],["converts",{"_index":82,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["corner",{"_index":1030,"title":{},"body":{"components/HeaderComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["corresponding",{"_index":1380,"title":{},"body":{"components/RegisterComponent.html":{},"injectables/UserService.html":{}}}],["cover",{"_index":717,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["coverage",{"_index":2171,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["created",{"_index":1914,"title":{},"body":{"injectables/ThreadService.html":{}}}],["createnewchannel",{"_index":68,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["createnewchannel.reset",{"_index":137,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["creates",{"_index":78,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["createthreadmessage",{"_index":1890,"title":{},"body":{"injectables/ThreadService.html":{}}}],["createthreadmessage(obj",{"_index":1911,"title":{},"body":{"injectables/ThreadService.html":{}}}],["createuserinfo",{"_index":2033,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserprofile",{"_index":2037,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserwithemailandpassword",{"_index":615,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["createuserwithemailandpassword(auth",{"_index":649,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["creatorid",{"_index":306,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["css",{"_index":1153,"title":{},"body":{"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{}}}],["ctrl/ngx",{"_index":2261,"title":{},"body":{"dependencies.html":{}}}],["current",{"_index":916,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"components/MainsectionComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["currentchildcount",{"_index":1321,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["currently",{"_index":1288,"title":{},"body":{"injectables/MutationObserverService.html":{},"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["currentuser",{"_index":2034,"title":{},"body":{"injectables/UserService.html":{}}}],["cursor",{"_index":729,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["da",{"_index":465,"title":{},"body":{"components/AppComponent.html":{},"miscellaneous/variables.html":{}}}],["dabubble",{"_index":666,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ImprintComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"index.html":{}}}],["data",{"_index":59,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["data.emoji",{"_index":1993,"title":{},"body":{"injectables/ThreadService.html":{}}}],["data.message",{"_index":1994,"title":{},"body":{"injectables/ThreadService.html":{}}}],["data.timestamp",{"_index":1991,"title":{},"body":{"injectables/ThreadService.html":{}}}],["database",{"_index":2083,"title":{},"body":{"injectables/UserService.html":{}}}],["dataset",{"_index":954,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"injectables/ThreadService.html":{}}}],["dataset.data()['channelid",{"_index":955,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["dataset.data()['timestamp",{"_index":1992,"title":{},"body":{"injectables/ThreadService.html":{}}}],["dataset.id",{"_index":958,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"injectables/ThreadService.html":{}}}],["datasubject",{"_index":1879,"title":{},"body":{"injectables/ThreadService.html":{}}}],["date.now",{"_index":1268,"title":{},"body":{"classes/MessageData.html":{}}}],["datei",{"_index":675,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["datenschutz",{"_index":679,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["datenschutzerklarung",{"_index":1465,"title":{},"body":{"components/RegisterComponent.html":{}}}],["datenschutzerklärungzu",{"_index":1464,"title":{},"body":{"components/RegisterComponent.html":{}}}],["decorators",{"_index":289,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{}}}],["default",{"_index":86,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":47,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["dein",{"_index":1453,"title":{},"body":{"components/RegisterComponent.html":{}}}],["deinem",{"_index":152,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/RegisterComponent.html":{}}}],["deinen",{"_index":667,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["deiner",{"_index":1451,"title":{},"body":{"components/RegisterComponent.html":{}}}],["delay",{"_index":555,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/MainsectionComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["delay(ms",{"_index":566,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["deletedoc",{"_index":931,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["deletedoc(doc(this.firestore",{"_index":956,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["dependencies",{"_index":2250,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependency",{"_index":1371,"title":{},"body":{"components/RegisterComponent.html":{}}}],["depending",{"_index":1598,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["der",{"_index":669,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["description",{"_index":67,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["desktop",{"_index":988,"title":{},"body":{"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{}}}],["destroyed",{"_index":1147,"title":{},"body":{"components/MainsectionComponent.html":{},"injectables/StateService.html":{}}}],["determine",{"_index":1031,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["determines",{"_index":2019,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["dev",{"_index":2281,"title":{},"body":{"index.html":{}}}],["development",{"_index":2276,"title":{},"body":{"index.html":{}}}],["device",{"_index":1610,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["devices",{"_index":1853,"title":{},"body":{"injectables/StateService.html":{}}}],["devspace",{"_index":1056,"title":{},"body":{"components/HeaderComponent.html":{},"components/SidebarComponent.html":{}}}],["dflex($ai",{"_index":738,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["dflex($jc",{"_index":697,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["dialog",{"_index":34,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["dialog'},{'name",{"_index":185,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["dialog.component",{"_index":929,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["dialog.component.html",{"_index":353,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["dialog.component.scss",{"_index":354,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["dialog.component.ts",{"_index":352,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/UserMenuDialogComponent.html":{},"coverage.html":{}}}],["dialog.component.ts:18",{"_index":426,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["dialog.component.ts:19",{"_index":372,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["dialog.component.ts:20",{"_index":374,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["dialog.component.ts:21",{"_index":368,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["dialog.component.ts:22",{"_index":370,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["dialog.component.ts:23",{"_index":367,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["dialog.component.ts:24",{"_index":409,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["dialog.component.ts:25",{"_index":427,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["dialog.component.ts:26",{"_index":373,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["dialog.component.ts:27",{"_index":371,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["dialog.component.ts:28",{"_index":411,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["dialog.component.ts:29",{"_index":364,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["dialog.component.ts:32",{"_index":2011,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["dialog.component.ts:33",{"_index":417,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["dialog.component.ts:36",{"_index":908,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["dialog.component.ts:38",{"_index":421,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["dialog.component.ts:39",{"_index":362,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["dialog.component.ts:46",{"_index":919,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["dialog.component.ts:47",{"_index":422,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["dialog.component.ts:48",{"_index":2018,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["dialog.component.ts:56",{"_index":361,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["dialog.component.ts:58",{"_index":418,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["dialog.component.ts:59",{"_index":2010,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["dialog.component.ts:61",{"_index":359,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["dialog.component.ts:70",{"_index":360,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["dialog.component.ts:72",{"_index":914,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["dialog.component.ts:78",{"_index":366,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["dialog.component.ts:83",{"_index":925,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["dialog.component.ts:91",{"_index":917,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["dialog/add",{"_index":351,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/UserMenuDialogComponent.html":{},"coverage.html":{}}}],["dialog/edit",{"_index":899,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"coverage.html":{}}}],["dialog/user",{"_index":1022,"title":{},"body":{"components/HeaderComponent.html":{},"components/UserMenuDialogComponent.html":{},"coverage.html":{}}}],["dialogref",{"_index":46,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["dialogref.componentinstance.otheruser",{"_index":445,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["dialogref.componentinstance.profileeditable",{"_index":446,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["dialogrefadduser",{"_index":2009,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["die",{"_index":1443,"title":{},"body":{"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["dienen",{"_index":151,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["diesem",{"_index":1429,"title":{},"body":{"components/RegisterComponent.html":{}}}],["dieser",{"_index":166,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{}}}],["different",{"_index":1727,"title":{},"body":{"components/SidebarComponent.html":{}}}],["direct",{"_index":1705,"title":{},"body":{"components/SidebarComponent.html":{},"injectables/SidebarService.html":{}}}],["direction",{"_index":754,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["directive",{"_index":180,"title":{"directives/OutsideclickDirective.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{},"overview.html":{}}}],["directives",{"_index":225,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":2288,"title":{},"body":{"index.html":{}}}],["directmessages",{"_index":1844,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["directory",{"_index":2292,"title":{},"body":{"index.html":{}}}],["direktnachrichten",{"_index":1766,"title":{},"body":{"components/SidebarComponent.html":{}}}],["disconnect",{"_index":1280,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["disconnects",{"_index":1285,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["display",{"_index":1121,"title":{},"body":{"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{}}}],["displayheadlinemobile",{"_index":1101,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["displays",{"_index":573,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/HeaderComponent.html":{}}}],["dist",{"_index":2291,"title":{},"body":{"index.html":{}}}],["div",{"_index":414,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{}}}],["dm",{"_index":1706,"title":{},"body":{"components/SidebarComponent.html":{}}}],["dm.id",{"_index":1768,"title":{},"body":{"components/SidebarComponent.html":{}}}],["dm.name",{"_index":1770,"title":{},"body":{"components/SidebarComponent.html":{}}}],["dmuserid",{"_index":2146,"title":{},"body":{"injectables/UserService.html":{}}}],["doc",{"_index":378,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["doc(this.firestore",{"_index":1836,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["docref",{"_index":1835,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["docsnap",{"_index":1838,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["docsnap.data",{"_index":1840,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["docsnap.data()!['isloggedin",{"_index":2157,"title":{},"body":{"injectables/UserService.html":{}}}],["document",{"_index":1785,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["document.getelementbyid('messagecontainer')!.scrollto",{"_index":1046,"title":{},"body":{"components/HeaderComponent.html":{}}}],["document.getelementbyid('singlemessage",{"_index":1043,"title":{},"body":{"components/HeaderComponent.html":{}}}],["document.queryselector('input[type=\"file",{"_index":643,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["document:click",{"_index":1333,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["documentation",{"_index":2172,"title":{},"body":{"coverage.html":{}}}],["documentdata",{"_index":1808,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["dom",{"_index":6,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["domchanges",{"_index":1277,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["don't",{"_index":841,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["dots",{"_index":759,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["du",{"_index":457,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SidebarComponent.html":{}}}],["duration",{"_index":576,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{}}}],["dynamic",{"_index":2260,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":1075,"title":{},"body":{"components/ImprintComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{}}}],["e2e",{"_index":2299,"title":{},"body":{"index.html":{}}}],["e6d79",{"_index":2326,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e6d79.appspot.com",{"_index":2330,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e6d79.firebaseapp.com",{"_index":2334,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e6e6e6",{"_index":733,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["each",{"_index":1729,"title":{},"body":{"components/SidebarComponent.html":{}}}],["early",{"_index":1306,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["ease",{"_index":634,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["edit",{"_index":197,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["editable",{"_index":2021,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["editchanneldialogcomponent",{"_index":196,"title":{"components/EditChannelDialogComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["editchanneldialogopenmobile",{"_index":1847,"title":{},"body":{"injectables/StateService.html":{}}}],["editchannelname",{"_index":900,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["editdescription",{"_index":901,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["edited",{"_index":913,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["editmode",{"_index":1572,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["editprofilepic",{"_index":1573,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["egatth4xds0ztubhnysr",{"_index":1837,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["eigenes",{"_index":672,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["ein",{"_index":1436,"title":{},"body":{"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["eine",{"_index":1459,"title":{},"body":{"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["einen",{"_index":174,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["eingeben",{"_index":1455,"title":{},"body":{"components/RegisterComponent.html":{},"components/VerifyComponent.html":{}}}],["element",{"_index":179,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["element's",{"_index":1294,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["element.id",{"_index":1651,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["element.index",{"_index":1054,"title":{},"body":{"components/HeaderComponent.html":{}}}],["element.nativeelement",{"_index":1304,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["element.nativeelement.children.length",{"_index":1317,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["element.nativeelement.scrollheight",{"_index":1315,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["element.nativeelement.scrolltop",{"_index":1314,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["element['id",{"_index":323,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["element['message",{"_index":1052,"title":{},"body":{"components/HeaderComponent.html":{}}}],["element['name",{"_index":316,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["element['profilepicture",{"_index":328,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["elementref",{"_index":423,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{}}}],["email",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{},"components/ImprintComponent.html":{},"classes/MessageData.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"injectables/UserService.html":{}}}],["emailexists",{"_index":1422,"title":{},"body":{"components/RegisterComponent.html":{},"injectables/UserService.html":{}}}],["emailquery",{"_index":2114,"title":{},"body":{"injectables/UserService.html":{}}}],["emailsnapshot",{"_index":2119,"title":{},"body":{"injectables/UserService.html":{}}}],["emailsnapshot.empty",{"_index":2123,"title":{},"body":{"injectables/UserService.html":{}}}],["emit",{"_index":1867,"title":{},"body":{"injectables/StateService.html":{}}}],["emitting",{"_index":1930,"title":{},"body":{"injectables/ThreadService.html":{}}}],["emoji",{"_index":1247,"title":{},"body":{"classes/MessageData.html":{},"injectables/ThreadService.html":{},"dependencies.html":{}}}],["emojiservice",{"_index":2232,"title":{},"body":{"coverage.html":{}}}],["end",{"_index":698,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{},"index.html":{}}}],["entwicklerteam",{"_index":344,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["environment.api_key",{"_index":2332,"title":{},"body":{"miscellaneous/variables.html":{}}}],["erfolgreich",{"_index":681,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["erforderlich",{"_index":165,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["error",{"_index":135,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{}}}],["error(\"ein",{"_index":1425,"title":{},"body":{"components/RegisterComponent.html":{}}}],["error('titel",{"_index":131,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["error.code",{"_index":1505,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["error.message",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["errorcode",{"_index":1379,"title":{},"body":{"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["errormessage",{"_index":1357,"title":{},"body":{"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["erstellen",{"_index":149,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/RegisterComponent.html":{}}}],["erstellt",{"_index":682,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["event",{"_index":591,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/HeaderComponent.html":{},"directives/OutsideclickDirective.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{}}}],["event.target",{"_index":1339,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["eventemitter",{"_index":1337,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["events",{"_index":1530,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["example",{"_index":2078,"title":{},"body":{"injectables/UserService.html":{}}}],["execute",{"_index":1302,"title":{},"body":{"injectables/MutationObserverService.html":{},"index.html":{}}}],["executes",{"_index":1145,"title":{},"body":{"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{}}}],["executing",{"_index":1129,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["existiert",{"_index":171,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{}}}],["existing",{"_index":265,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["exists",{"_index":250,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/RegisterComponent.html":{},"injectables/UserService.html":{}}}],["export",{"_index":111,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["extra",{"_index":1693,"title":{},"body":{"components/SidebarComponent.html":{}}}],["false",{"_index":88,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{}}}],["falsy",{"_index":1305,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["family",{"_index":1484,"title":{},"body":{"components/RegisterComponent.html":{}}}],["fehler",{"_index":1438,"title":{},"body":{"components/RegisterComponent.html":{}}}],["ffnen",{"_index":1125,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["field",{"_index":270,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/UserService.html":{}}}],["fields",{"_index":81,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ConfirmpasswordComponent.html":{}}}],["fieldvalue",{"_index":1807,"title":{},"body":{"injectables/SidebarService.html":{}}}],["file",{"_index":8,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["filedata",{"_index":1880,"title":{},"body":{"injectables/ThreadService.html":{}}}],["fileinput",{"_index":642,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["fileinput.click",{"_index":644,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["filelist",{"_index":640,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["files",{"_index":1609,"title":{},"body":{"components/ShowProfileComponent.html":{},"index.html":{}}}],["filters",{"_index":281,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["finally",{"_index":827,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["firebase",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{},"components/RegisterComponent.html":{}}}],["firebase/auth",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{}}}],["firebaseappfactory",{"_index":300,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["firebaseerror",{"_index":1400,"title":{},"body":{"components/RegisterComponent.html":{}}}],["firestore",{"_index":356,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["first",{"_index":836,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"injectables/ThreadService.html":{},"index.html":{}}}],["firstfocus",{"_index":1358,"title":{},"body":{"components/RegisterComponent.html":{}}}],["fit",{"_index":716,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["flag",{"_index":910,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"injectables/MutationObserverService.html":{},"components/VerifyComponent.html":{}}}],["flex",{"_index":722,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/SidebarComponent.html":{}}}],["focus",{"_index":304,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/RegisterComponent.html":{}}}],["focuses",{"_index":248,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["focusonuserinput",{"_index":240,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["font",{"_index":690,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["form",{"_index":63,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/UserService.html":{}}}],["format",{"_index":84,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["formcontrol",{"_index":860,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/VerifyComponent.html":{}}}],["formcontrol(false",{"_index":1408,"title":{},"body":{"components/RegisterComponent.html":{}}}],["formcontrol(this.userservice.userinfo.email",{"_index":1639,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["formcontrol(this.userservice.userinfo.name",{"_index":1638,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["formgroup",{"_index":854,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["formgroup.get(controlname",{"_index":885,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["formgroup.get(matchingcontrolname",{"_index":887,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["formsmodule",{"_index":22,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["forogt",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{}}}],["function",{"_index":57,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"injectables/AuthService.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["further",{"_index":2306,"title":{},"body":{"index.html":{}}}],["gap",{"_index":739,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["geben",{"_index":1506,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["generate",{"_index":2287,"title":{},"body":{"index.html":{}}}],["generated",{"_index":2272,"title":{},"body":{"index.html":{}}}],["gesendet",{"_index":1514,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["getauth",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{},"components/UserMenuDialogComponent.html":{},"miscellaneous/variables.html":{}}}],["getauth().signout",{"_index":2025,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["getdmstatus",{"_index":404,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{}}}],["getdmstatus(index",{"_index":1697,"title":{},"body":{"components/SidebarComponent.html":{}}}],["getdmstatus(isloggedin",{"_index":1782,"title":{},"body":{"injectables/SidebarService.html":{}}}],["getdmstatus(userisloggedin",{"_index":410,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["getdoc",{"_index":1804,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["getdoc(doc(this.firestore",{"_index":2111,"title":{},"body":{"injectables/UserService.html":{}}}],["getdoc(docref",{"_index":1839,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["getdocs",{"_index":932,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["getdocs(namequery",{"_index":2122,"title":{},"body":{"injectables/UserService.html":{}}}],["getdocs(query(this.refchannels",{"_index":1832,"title":{},"body":{"injectables/SidebarService.html":{}}}],["getdocs(query(this.refthreadmessages",{"_index":1990,"title":{},"body":{"injectables/ThreadService.html":{}}}],["getdocs(query(this.userservice.refuserchannels",{"_index":952,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["geteditchanneldialogopenmobile",{"_index":1849,"title":{},"body":{"injectables/StateService.html":{}}}],["getfirebaseerrormessage",{"_index":1364,"title":{},"body":{"components/RegisterComponent.html":{}}}],["getfirebaseerrormessage(errorcode",{"_index":1377,"title":{},"body":{"components/RegisterComponent.html":{}}}],["getfirestore",{"_index":2338,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getmenu",{"_index":241,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["getonlinestatusprofile",{"_index":2038,"title":{},"body":{"injectables/UserService.html":{}}}],["getonlinestatusprofile(id",{"_index":2059,"title":{},"body":{"injectables/UserService.html":{}}}],["getotheruserdata",{"_index":405,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["getotheruserdata(user",{"_index":416,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["gets",{"_index":2091,"title":{},"body":{"injectables/UserService.html":{}}}],["getstatustext",{"_index":1581,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["getstorage",{"_index":2340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getting",{"_index":2269,"title":{"index.html":{}},"body":{}}],["gettoggletext",{"_index":1102,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["getusersfromchannel",{"_index":242,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"injectables/SidebarService.html":{}}}],["getuserstatus",{"_index":974,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{}}}],["getuserstatus(type",{"_index":1596,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["given",{"_index":812,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/UserService.html":{}}}],["go",{"_index":2309,"title":{},"body":{"index.html":{}}}],["goback",{"_index":975,"title":{},"body":{"components/HeaderComponent.html":{}}}],["gotochannel",{"_index":1685,"title":{},"body":{"components/SidebarComponent.html":{}}}],["gotodirektmessage",{"_index":1686,"title":{},"body":{"components/SidebarComponent.html":{}}}],["gotodirektmessage(dm",{"_index":1703,"title":{},"body":{"components/SidebarComponent.html":{}}}],["gotoprivatemessage",{"_index":1687,"title":{},"body":{"components/SidebarComponent.html":{}}}],["green",{"_index":736,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["group:nth",{"_index":1467,"title":{},"body":{"components/RegisterComponent.html":{}}}],["gültige",{"_index":1460,"title":{},"body":{"components/RegisterComponent.html":{}}}],["h1",{"_index":781,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["h3",{"_index":689,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["handleclosemobile",{"_index":1694,"title":{},"body":{"components/SidebarComponent.html":{}}}],["handled",{"_index":1384,"title":{},"body":{"components/RegisterComponent.html":{}}}],["handleregistrationerror",{"_index":1365,"title":{},"body":{"components/RegisterComponent.html":{}}}],["handleregistrationerror(error",{"_index":1381,"title":{},"body":{"components/RegisterComponent.html":{}}}],["handles",{"_index":590,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"injectables/ThreadService.html":{}}}],["handleuserregistration",{"_index":1366,"title":{},"body":{"components/RegisterComponent.html":{}}}],["handleuserregistration(email",{"_index":1385,"title":{},"body":{"components/RegisterComponent.html":{}}}],["hanldeclosemobile",{"_index":1103,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["hast",{"_index":1452,"title":{},"body":{"components/RegisterComponent.html":{}}}],["hausnummer",{"_index":1070,"title":{},"body":{"components/ImprintComponent.html":{}}}],["header",{"_index":967,"title":{},"body":{"components/HeaderComponent.html":{}}}],["header'},{'name",{"_index":199,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["header.component.html",{"_index":968,"title":{},"body":{"components/HeaderComponent.html":{}}}],["header.component.scss",{"_index":969,"title":{},"body":{"components/HeaderComponent.html":{}}}],["headercomponent",{"_index":198,"title":{"components/HeaderComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["headline",{"_index":987,"title":{},"body":{"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{}}}],["headlinedesktop",{"_index":970,"title":{},"body":{"components/HeaderComponent.html":{}}}],["headlinemobile",{"_index":971,"title":{},"body":{"components/HeaderComponent.html":{}}}],["height",{"_index":714,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["help",{"_index":2307,"title":{},"body":{"index.html":{}}}],["hide",{"_index":1133,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["hides",{"_index":989,"title":{},"body":{"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{}}}],["hidesidenav",{"_index":1104,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["hidethread",{"_index":1105,"title":{},"body":{"components/MainsectionComponent.html":{},"injectables/ThreadService.html":{}}}],["hidethreadsubject",{"_index":1881,"title":{},"body":{"injectables/ThreadService.html":{}}}],["hidethreadsubscription",{"_index":1087,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["hiding",{"_index":1117,"title":{},"body":{"components/MainsectionComponent.html":{},"injectables/ThreadService.html":{}}}],["hinzfügen",{"_index":399,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["hinzufügen",{"_index":340,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/SidebarComponent.html":{}}}],["hochladen",{"_index":676,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["home",{"_index":578,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["hostlistener",{"_index":1346,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["hostlistener('document:click",{"_index":1345,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["hostlisteners",{"_index":1332,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["hover",{"_index":731,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["hoverlogout",{"_index":2006,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["hoverprofile",{"_index":2007,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["html",{"_index":178,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["htmlelement",{"_index":1344,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["htmlinputelement",{"_index":588,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["http://localhost:4200",{"_index":2282,"title":{},"body":{"index.html":{}}}],["ich",{"_index":1462,"title":{},"body":{"components/RegisterComponent.html":{}}}],["icon",{"_index":400,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["id",{"_index":385,"title":{},"body":{"components/AddUserDialogComponent.html":{},"classes/MessageData.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":2062,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["identify",{"_index":1935,"title":{},"body":{"injectables/ThreadService.html":{}}}],["ids",{"_index":1797,"title":{},"body":{"injectables/SidebarService.html":{}}}],["ihnen",{"_index":1510,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["ihr",{"_index":1512,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["ihre",{"_index":1507,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["image",{"_index":1475,"title":{},"body":{"components/RegisterComponent.html":{}}}],["img",{"_index":327,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"injectables/UserService.html":{}}}],["implements",{"_index":543,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/SidebarComponent.html":{},"index.html":{}}}],["import",{"_index":98,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["important",{"_index":1486,"title":{},"body":{"components/RegisterComponent.html":{}}}],["imports",{"_index":20,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["impressum",{"_index":678,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ImprintComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["imprint",{"_index":1064,"title":{},"body":{"components/ImprintComponent.html":{}}}],["imprint'},{'name",{"_index":201,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["imprint.component.html",{"_index":1065,"title":{},"body":{"components/ImprintComponent.html":{}}}],["imprint.component.scss",{"_index":1066,"title":{},"body":{"components/ImprintComponent.html":{}}}],["imprintcomponent",{"_index":200,"title":{"components/ImprintComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["inaktiv",{"_index":1595,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["include",{"_index":696,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["includes",{"_index":1934,"title":{},"body":{"injectables/ThreadService.html":{}}}],["incoming",{"_index":2069,"title":{},"body":{"injectables/UserService.html":{}}}],["index",{"_index":29,"title":{"index.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"miscellaneous/variables.html":{}}}],["indicate",{"_index":911,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["indicates",{"_index":1299,"title":{},"body":{"injectables/MutationObserverService.html":{},"injectables/SidebarService.html":{}}}],["indicating",{"_index":1868,"title":{},"body":{"injectables/StateService.html":{},"injectables/UserService.html":{}}}],["indicator",{"_index":983,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{}}}],["infinite",{"_index":764,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["information",{"_index":284,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{}}}],["inhalt",{"_index":164,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["initialchildcount",{"_index":1278,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["initialization",{"_index":586,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["initializeapp",{"_index":2324,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initialized",{"_index":1138,"title":{},"body":{"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{}}}],["initializes",{"_index":581,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/MainsectionComponent.html":{}}}],["initialreferenceelementposition",{"_index":401,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["inject",{"_index":100,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["inject(authservice",{"_index":850,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/VerifyComponent.html":{}}}],["inject(changedetectorref",{"_index":1164,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["inject(channelservice",{"_index":89,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{}}}],["inject(firestore",{"_index":369,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["inject(resizelistenerservice",{"_index":1173,"title":{},"body":{"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{}}}],["inject(sidebarservice",{"_index":96,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{}}}],["inject(stateservice",{"_index":430,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["inject(storageservice",{"_index":1951,"title":{},"body":{"injectables/ThreadService.html":{}}}],["inject(threadservice",{"_index":1182,"title":{},"body":{"components/MainsectionComponent.html":{},"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["inject(userservice",{"_index":295,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{}}}],["injectable",{"_index":469,"title":{"injectables/AuthService.html":{},"injectables/MutationObserverService.html":{},"injectables/ResizeListenerService.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/MutationObserverService.html":{},"injectables/ResizeListenerService.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MutationObserverService.html":{},"injectables/ResizeListenerService.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["input",{"_index":80,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["inputs",{"_index":35,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{}}}],["instance",{"_index":811,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["instanceof",{"_index":1434,"title":{},"body":{"components/RegisterComponent.html":{}}}],["interface",{"_index":538,"title":{"interfaces/ChannelInfo.html":{},"interfaces/UserInfo.html":{}},"body":{"interfaces/ChannelInfo.html":{},"interfaces/UserInfo.html":{},"coverage.html":{}}}],["interfaces",{"_index":539,"title":{},"body":{"interfaces/ChannelInfo.html":{},"interfaces/UserInfo.html":{},"overview.html":{}}}],["interfaces/userinfo",{"_index":2107,"title":{},"body":{"injectables/UserService.html":{}}}],["isactive",{"_index":1882,"title":{},"body":{"injectables/ThreadService.html":{}}}],["isdisabled",{"_index":803,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["iseditmessagespanclicked",{"_index":1348,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["isformsubmitted",{"_index":1359,"title":{},"body":{"components/RegisterComponent.html":{}}}],["isloggedin",{"_index":1700,"title":{},"body":{"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"injectables/UserService.html":{}}}],["issubscribed",{"_index":1883,"title":{},"body":{"injectables/ThreadService.html":{}}}],["ist",{"_index":167,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{}}}],["isthread",{"_index":1291,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["isthread=false",{"_index":1313,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["items",{"_index":1490,"title":{},"body":{"components/RegisterComponent.html":{}}}],["jc",{"_index":750,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["json",{"_index":83,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["justify",{"_index":788,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["karma",{"_index":2298,"title":{},"body":{"index.html":{}}}],["kevin.mueller@fenrirdev.de",{"_index":1504,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["key",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{},"components/ConfirmpasswordComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["key1",{"_index":879,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["key2",{"_index":880,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["keyform",{"_index":804,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/VerifyComponent.html":{}}}],["keyframes",{"_index":770,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["kommunikation",{"_index":155,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["kontakt",{"_index":1074,"title":{},"body":{"components/ImprintComponent.html":{}}}],["konto",{"_index":680,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["kurz",{"_index":169,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["können",{"_index":1513,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["land",{"_index":1073,"title":{},"body":{"components/ImprintComponent.html":{}}}],["landscape",{"_index":779,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["lastreply",{"_index":1970,"title":{},"body":{"injectables/ThreadService.html":{}}}],["leaks",{"_index":1862,"title":{},"body":{"injectables/StateService.html":{}}}],["leavechannel",{"_index":905,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["left",{"_index":438,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/MainsectionComponent.html":{},"injectables/SidebarService.html":{}}}],["legend",{"_index":177,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["leute",{"_index":339,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["lgscreen",{"_index":1517,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["list",{"_index":260,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"components/HeaderComponent.html":{}}}],["liste",{"_index":670,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["listener",{"_index":1903,"title":{},"body":{"injectables/ThreadService.html":{}}}],["listener.service",{"_index":1195,"title":{},"body":{"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{}}}],["listener.service.ts",{"_index":1516,"title":{},"body":{"injectables/ResizeListenerService.html":{},"coverage.html":{}}}],["listener.service.ts:12",{"_index":1544,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["listener.service.ts:14",{"_index":1548,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["listener.service.ts:16",{"_index":1546,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["listener.service.ts:18",{"_index":1549,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["listener.service.ts:20",{"_index":1528,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["listener.service.ts:34",{"_index":1531,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["listener.service.ts:44",{"_index":1543,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["listener.service.ts:57",{"_index":1537,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["listener.service.ts:66",{"_index":1540,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["listener.service.ts:9",{"_index":1547,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["listening",{"_index":2016,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["listens",{"_index":1529,"title":{},"body":{"injectables/ResizeListenerService.html":{},"injectables/UserService.html":{}}}],["literal",{"_index":288,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/SidebarComponent.html":{}}}],["loading",{"_index":574,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["loadingscreen",{"_index":556,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["log",{"_index":2030,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["logged",{"_index":1594,"title":{},"body":{"components/ShowProfileComponent.html":{},"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["loggedin",{"_index":439,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{}}}],["login",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{}}}],["login'},{'name",{"_index":203,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["login.component.scss",{"_index":684,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["logincomponent",{"_index":202,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["logout",{"_index":2008,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["logs",{"_index":2012,"title":{},"body":{"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{}}}],["mail",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{},"components/ImprintComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{}}}],["mail).then",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{}}}],["main",{"_index":685,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["mainsection",{"_index":1082,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["mainsection'},{'name",{"_index":205,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["mainsection.component",{"_index":1736,"title":{},"body":{"components/SidebarComponent.html":{}}}],["mainsection.component.html",{"_index":1083,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["mainsection.component.scss",{"_index":1084,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["mainsection/channel/add",{"_index":2023,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["mainsection/mainsection.component",{"_index":1024,"title":{},"body":{"components/HeaderComponent.html":{}}}],["mainsection/sidebar/sidebar.component",{"_index":1025,"title":{},"body":{"components/HeaderComponent.html":{}}}],["mainsectioncomponent",{"_index":204,"title":{"components/MainsectionComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["make",{"_index":1139,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["manipulate",{"_index":922,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["margin",{"_index":699,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{}}}],["marketing",{"_index":161,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["mart",{"_index":2262,"title":{},"body":{"dependencies.html":{}}}],["matbuttonmodule",{"_index":232,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["match",{"_index":840,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["matching",{"_index":230,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["matchingcontrol",{"_index":886,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["matchingcontrol.errors",{"_index":888,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["matchingcontrol.errors['mustmatch",{"_index":889,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["matchingcontrol.seterrors",{"_index":892,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["matchingcontrol.seterrors(null",{"_index":893,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["matchingcontrol.value",{"_index":891,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["matchingcontrolname",{"_index":829,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["matdialog",{"_index":45,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["matdialogactions",{"_index":1018,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["matdialogclose",{"_index":1019,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["matdialogcontent",{"_index":1021,"title":{},"body":{"components/HeaderComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["matdialogmodule",{"_index":21,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["matdialogref",{"_index":1017,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["matdialogtitle",{"_index":1020,"title":{},"body":{"components/HeaderComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["matmenumodule",{"_index":231,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["matmenutrigger",{"_index":292,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["max",{"_index":741,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["mdscreen",{"_index":1518,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["means",{"_index":278,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["media",{"_index":777,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["memory",{"_index":1861,"title":{},"body":{"injectables/StateService.html":{}}}],["men",{"_index":1244,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["menu",{"_index":222,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["menuopened",{"_index":233,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["menus",{"_index":1728,"title":{},"body":{"components/SidebarComponent.html":{}}}],["menustates",{"_index":1678,"title":{},"body":{"components/SidebarComponent.html":{}}}],["message",{"_index":444,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"classes/MessageData.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/SidebarComponent.html":{},"injectables/ThreadService.html":{}}}],["message'},{'name",{"_index":207,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["message.message).substring(0,15",{"_index":1061,"title":{},"body":{"components/HeaderComponent.html":{}}}],["message.name",{"_index":1059,"title":{},"body":{"components/HeaderComponent.html":{}}}],["message.tolocalelowercase().indexof(this.searchmsg.msg.tolocalelowercase",{"_index":1053,"title":{},"body":{"components/HeaderComponent.html":{}}}],["messagecomponent",{"_index":206,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["messagedata",{"_index":1245,"title":{"classes/MessageData.html":{}},"body":{"classes/MessageData.html":{},"coverage.html":{}}}],["messagelist",{"_index":972,"title":{},"body":{"components/HeaderComponent.html":{}}}],["messagelist.length",{"_index":1057,"title":{},"body":{"components/HeaderComponent.html":{}}}],["messages",{"_index":1001,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{}}}],["messages'},{'name",{"_index":191,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["messages.component.ts",{"_index":2194,"title":{},"body":{"coverage.html":{}}}],["messages/channel",{"_index":2193,"title":{},"body":{"coverage.html":{}}}],["messages/message/message.component.ts",{"_index":2197,"title":{},"body":{"coverage.html":{}}}],["messagestimestamp",{"_index":1884,"title":{},"body":{"injectables/ThreadService.html":{}}}],["messagingsenderid",{"_index":2335,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":13,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["method",{"_index":254,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/HeaderComponent.html":{},"injectables/MutationObserverService.html":{},"components/SidebarComponent.html":{},"injectables/ThreadService.html":{}}}],["methods",{"_index":38,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["milliseconds",{"_index":571,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/MainsectionComponent.html":{}}}],["min",{"_index":398,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["mindestens",{"_index":1456,"title":{},"body":{"components/RegisterComponent.html":{}}}],["miscellaneous",{"_index":2316,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["mit",{"_index":1427,"title":{},"body":{"components/RegisterComponent.html":{}}}],["mitglieder",{"_index":342,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{}}}],["mobile",{"_index":990,"title":{},"body":{"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{}}}],["models/userdata.class",{"_index":1810,"title":{},"body":{"injectables/SidebarService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{}}}],["modules",{"_index":2311,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":2308,"title":{},"body":{"index.html":{}}}],["mouseevent",{"_index":1342,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["moz",{"_index":1473,"title":{},"body":{"components/RegisterComponent.html":{}}}],["ms",{"_index":570,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["msg",{"_index":1011,"title":{},"body":{"components/HeaderComponent.html":{}}}],["msgelement",{"_index":1042,"title":{},"body":{"components/HeaderComponent.html":{}}}],["msgelement!.offsettop",{"_index":1045,"title":{},"body":{"components/HeaderComponent.html":{}}}],["msgid",{"_index":1248,"title":{},"body":{"classes/MessageData.html":{}}}],["mustmatch",{"_index":807,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["mustmatch(controlname",{"_index":828,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["mutation",{"_index":1286,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["mutationobserver",{"_index":1279,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["mutationobserver((mutations",{"_index":1319,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["mutationobserverservice",{"_index":1275,"title":{"injectables/MutationObserverService.html":{}},"body":{"injectables/MutationObserverService.html":{},"coverage.html":{}}}],["mutations.foreach(mutation",{"_index":1320,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["nachname",{"_index":1068,"title":{},"body":{"components/ImprintComponent.html":{},"components/RegisterComponent.html":{}}}],["nachricht",{"_index":1060,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{}}}],["nachrichten",{"_index":1058,"title":{},"body":{"components/HeaderComponent.html":{}}}],["name",{"_index":51,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"index.html":{}}}],["name.tolocalelowercase().indexof(this.adduser.name.tolocalelowercase",{"_index":384,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["name.tolocalelowercase().indexof(this.inputs.specificuser.tolocalelowercase",{"_index":318,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["named",{"_index":272,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["nameexists",{"_index":1423,"title":{},"body":{"components/RegisterComponent.html":{},"injectables/UserService.html":{}}}],["nameinput",{"_index":1360,"title":{},"body":{"components/RegisterComponent.html":{}}}],["namen",{"_index":1430,"title":{},"body":{"components/RegisterComponent.html":{}}}],["namequery",{"_index":2117,"title":{},"body":{"injectables/UserService.html":{}}}],["namesnapshot",{"_index":2120,"title":{},"body":{"injectables/UserService.html":{}}}],["namesnapshot.empty",{"_index":2124,"title":{},"body":{"injectables/UserService.html":{}}}],["nativeelement",{"_index":303,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["navigate",{"_index":1707,"title":{},"body":{"components/SidebarComponent.html":{},"index.html":{}}}],["navigates",{"_index":577,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{},"components/SidebarComponent.html":{}}}],["navigation",{"_index":814,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{}}}],["ndern",{"_index":896,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["necessary",{"_index":1143,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["need",{"_index":2303,"title":{},"body":{"index.html":{}}}],["neues",{"_index":1454,"title":{},"body":{"components/RegisterComponent.html":{}}}],["new",{"_index":10,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"coverage.html":{},"index.html":{}}}],["newchannel",{"_index":36,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["newchannelvalues",{"_index":902,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["newdescription",{"_index":915,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["newmessage",{"_index":1688,"title":{},"body":{"components/SidebarComponent.html":{}}}],["newprofilepicture",{"_index":1582,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["newuseravatar",{"_index":2039,"title":{},"body":{"injectables/UserService.html":{}}}],["newuseravatar(url",{"_index":2063,"title":{},"body":{"injectables/UserService.html":{}}}],["ng",{"_index":2279,"title":{},"body":{"index.html":{}}}],["ngafterviewinit",{"_index":1106,"title":{},"body":{"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{}}}],["ngform",{"_index":55,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"injectables/UserService.html":{}}}],["ngform.value",{"_index":2140,"title":{},"body":{"injectables/UserService.html":{}}}],["ngondestroy",{"_index":1107,"title":{},"body":{"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{}}}],["ngoninit",{"_index":557,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{}}}],["ngzone",{"_index":1527,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["none",{"_index":1041,"title":{},"body":{"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/SidebarComponent.html":{}}}],["null",{"_index":839,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/UserService.html":{}}}],["number",{"_index":437,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"components/HeaderComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"components/SidebarComponent.html":{}}}],["obj",{"_index":125,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"classes/ChannelData.html":{},"components/EditChannelDialogComponent.html":{},"classes/MessageData.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"injectables/UserService.html":{}}}],["obj.collection",{"_index":532,"title":{},"body":{"classes/ChannelData.html":{}}}],["obj.description",{"_index":534,"title":{},"body":{"classes/ChannelData.html":{}}}],["obj.displayname",{"_index":2153,"title":{},"body":{"injectables/UserService.html":{}}}],["obj.email",{"_index":1270,"title":{},"body":{"classes/MessageData.html":{},"classes/UserData.html":{},"injectables/UserService.html":{}}}],["obj.emoji",{"_index":1272,"title":{},"body":{"classes/MessageData.html":{}}}],["obj.id",{"_index":386,"title":{},"body":{"components/AddUserDialogComponent.html":{},"classes/MessageData.html":{},"classes/UserData.html":{}}}],["obj.message",{"_index":1266,"title":{},"body":{"classes/MessageData.html":{}}}],["obj.msgid",{"_index":1274,"title":{},"body":{"classes/MessageData.html":{}}}],["obj.name",{"_index":1262,"title":{},"body":{"classes/MessageData.html":{},"classes/UserData.html":{},"injectables/UserService.html":{}}}],["obj.photourl",{"_index":2155,"title":{},"body":{"injectables/UserService.html":{}}}],["obj.profilepicture",{"_index":1264,"title":{},"body":{"classes/MessageData.html":{},"classes/UserData.html":{}}}],["obj.timestamp",{"_index":1971,"title":{},"body":{"injectables/ThreadService.html":{}}}],["obj.title",{"_index":127,"title":{},"body":{"components/AddNewChannelComponent.html":{},"classes/ChannelData.html":{},"components/EditChannelDialogComponent.html":{}}}],["obj.uid",{"_index":322,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"injectables/UserService.html":{}}}],["obj.users",{"_index":537,"title":{},"body":{"classes/ChannelData.html":{}}}],["object",{"_index":79,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/UserService.html":{}}}],["objectdata",{"_index":2092,"title":{},"body":{"injectables/UserService.html":{}}}],["observable",{"_index":1309,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["observe",{"_index":1281,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["observe(element",{"_index":1290,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["observed",{"_index":1301,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["observer",{"_index":1287,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["observes",{"_index":1293,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["oder",{"_index":170,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["offline",{"_index":415,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{}}}],["onclick",{"_index":1329,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["onclick(event",{"_index":1341,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["ondestroy",{"_index":1081,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["ongoing",{"_index":1910,"title":{},"body":{"injectables/ThreadService.html":{}}}],["onimageselected",{"_index":1583,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["onimageselected(input",{"_index":1603,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["oninit",{"_index":544,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/SidebarComponent.html":{}}}],["oninput",{"_index":1367,"title":{},"body":{"components/RegisterComponent.html":{}}}],["online",{"_index":413,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["onresize",{"_index":1108,"title":{},"body":{"components/MainsectionComponent.html":{},"injectables/ResizeListenerService.html":{}}}],["onsnapshot",{"_index":1806,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["onsnapshot(doc(this.refuserprofile",{"_index":2125,"title":{},"body":{"injectables/UserService.html":{}}}],["onsnapshot(query(this.refchannels",{"_index":1812,"title":{},"body":{"injectables/SidebarService.html":{}}}],["onsnapshot(query(this.refthreadmessages",{"_index":1957,"title":{},"body":{"injectables/ThreadService.html":{}}}],["onsnapshot(query(this.refuserchannels",{"_index":2131,"title":{},"body":{"injectables/UserService.html":{}}}],["onsnapshot(query(this.refuserdirectmsgs",{"_index":1823,"title":{},"body":{"injectables/SidebarService.html":{}}}],["onsnapshot(query(this.refuserprofile",{"_index":2135,"title":{},"body":{"injectables/UserService.html":{}}}],["onsnapshot(query(this.userservice.refuserchannels",{"_index":1818,"title":{},"body":{"injectables/SidebarService.html":{}}}],["onsnapshot(query(this.userservice.refuserprofile",{"_index":1827,"title":{},"body":{"injectables/SidebarService.html":{}}}],["onsubmit",{"_index":40,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{}}}],["onsubmit(createnewchannel",{"_index":54,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["oobcode",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["opacity",{"_index":627,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["open",{"_index":604,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["opendialog",{"_index":41,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["opendialogadduser",{"_index":406,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"injectables/StateService.html":{}}}],["opendialoguserinfo",{"_index":407,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["opened",{"_index":1869,"title":{},"body":{"injectables/StateService.html":{}}}],["openmenu",{"_index":253,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/HeaderComponent.html":{}}}],["opens",{"_index":72,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["operation",{"_index":1151,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["optional",{"_index":53,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["order",{"_index":1857,"title":{},"body":{"injectables/StateService.html":{}}}],["orientation",{"_index":778,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["originmessage",{"_index":1885,"title":{},"body":{"injectables/ThreadService.html":{}}}],["otheruser",{"_index":1574,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["otheruserid",{"_index":1575,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["otheruserinfo",{"_index":1576,"title":{},"body":{"components/ShowProfileComponent.html":{},"injectables/UserService.html":{}}}],["otherwise",{"_index":264,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/MainsectionComponent.html":{}}}],["out",{"_index":607,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"index.html":{}}}],["output",{"_index":1347,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["outputs",{"_index":1330,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["outsideclick",{"_index":1331,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["outsideclickdirective",{"_index":226,"title":{"directives/OutsideclickDirective.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["over",{"_index":420,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["overlay",{"_index":1161,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["overlayelement",{"_index":1088,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["overview",{"_index":2310,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["package",{"_index":2249,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["padding",{"_index":686,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["page",{"_index":579,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ResetpasswordComponent.html":{},"index.html":{}}}],["panelclass",{"_index":116,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["param",{"_index":120,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{}}}],["parameter",{"_index":69,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"injectables/MutationObserverService.html":{},"components/ShowProfileComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["parameters",{"_index":49,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["params",{"_index":805,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["passed",{"_index":1907,"title":{},"body":{"injectables/ThreadService.html":{}}}],["password",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{},"components/ConfirmpasswordComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["passwort",{"_index":894,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{},"components/VerifyComponent.html":{}}}],["path",{"_index":2095,"title":{},"body":{"injectables/UserService.html":{}}}],["picture",{"_index":1602,"title":{},"body":{"components/ShowProfileComponent.html":{},"injectables/UserService.html":{}}}],["picturepath",{"_index":2097,"title":{},"body":{"injectables/UserService.html":{}}}],["platform",{"_index":2300,"title":{},"body":{"index.html":{}}}],["pointer",{"_index":730,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["populates",{"_index":283,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["popup",{"_index":847,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["popupdisplay",{"_index":808,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["popupstate",{"_index":551,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["position",{"_index":718,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{}}}],["postleitzahl",{"_index":1071,"title":{},"body":{"components/ImprintComponent.html":{}}}],["preparedatanewuser",{"_index":2040,"title":{},"body":{"injectables/UserService.html":{}}}],["preparedatanewuser(obj",{"_index":2067,"title":{},"body":{"injectables/UserService.html":{}}}],["preparedatanewusergoogle",{"_index":2041,"title":{},"body":{"injectables/UserService.html":{}}}],["preparedatanewusergoogle(obj",{"_index":2070,"title":{},"body":{"injectables/UserService.html":{}}}],["preparenewchanneldata",{"_index":42,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["prepares",{"_index":58,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["present",{"_index":1913,"title":{},"body":{"injectables/ThreadService.html":{}}}],["prevent",{"_index":1860,"title":{},"body":{"injectables/StateService.html":{}}}],["privacycheck",{"_index":1407,"title":{},"body":{"components/RegisterComponent.html":{}}}],["privacypolicy'},{'name",{"_index":209,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["privacypolicycomponent",{"_index":208,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["private",{"_index":114,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ChooseavatarComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{}}}],["process",{"_index":1375,"title":{},"body":{"components/RegisterComponent.html":{}}}],["profil",{"_index":1666,"title":{},"body":{"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["profile",{"_index":443,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{}}}],["profile'},{'name",{"_index":216,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["profile.component",{"_index":435,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["profile.component.html",{"_index":1570,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.scss",{"_index":1571,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts",{"_index":1569,"title":{},"body":{"components/ShowProfileComponent.html":{},"coverage.html":{}}}],["profile.component.ts:105",{"_index":1597,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:124",{"_index":1592,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:137",{"_index":1587,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:143",{"_index":1613,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:163",{"_index":1611,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:180",{"_index":1614,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:187",{"_index":1589,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:27",{"_index":1630,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:28",{"_index":1632,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:29",{"_index":1619,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:30",{"_index":1629,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:31",{"_index":1624,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:32",{"_index":1628,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:33",{"_index":1618,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:34",{"_index":1631,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:35",{"_index":1625,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:36",{"_index":1627,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:37",{"_index":1621,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:38",{"_index":1622,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:39",{"_index":1626,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:40",{"_index":1586,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:44",{"_index":1620,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:45",{"_index":1617,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:62",{"_index":1612,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:70",{"_index":1615,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:82",{"_index":1604,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile.component.ts:94",{"_index":1599,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["profile/show",{"_index":434,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{},"coverage.html":{}}}],["profileeditable",{"_index":1577,"title":{},"body":{"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["profilepicture",{"_index":1249,"title":{},"body":{"classes/MessageData.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"injectables/UserService.html":{}}}],["project",{"_index":2271,"title":{},"body":{"index.html":{}}}],["projectid",{"_index":2325,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise",{"_index":568,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{},"injectables/UserService.html":{}}}],["promise(resolve",{"_index":659,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["promise.all([getdocs(emailquery",{"_index":2121,"title":{},"body":{"injectables/UserService.html":{}}}],["properties",{"_index":30,"title":{"properties.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"properties.html":{}}}],["property",{"_index":600,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{}}}],["provideanimations",{"_index":2322,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provideauth",{"_index":2341,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":601,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["providedin",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MutationObserverService.html":{},"injectables/ResizeListenerService.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["providefirebaseapp",{"_index":2323,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providefirestore",{"_index":2337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providerouter(routes",{"_index":2320,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":2319,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providestorage",{"_index":2339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prvoided",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{}}}],["public",{"_index":33,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"classes/ChannelData.html":{},"components/HeaderComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["purple1",{"_index":746,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["pushes",{"_index":273,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"injectables/SidebarService.html":{}}}],["pushtoselection",{"_index":243,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["pushtoselection(user",{"_index":266,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["px",{"_index":1551,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["query",{"_index":933,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["query(collection(this.firestore",{"_index":2115,"title":{},"body":{"injectables/UserService.html":{}}}],["querysnapshot",{"_index":951,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["querysnapshot.foreach",{"_index":1820,"title":{},"body":{"injectables/SidebarService.html":{}}}],["querysnapshot.foreach((doc",{"_index":2137,"title":{},"body":{"injectables/UserService.html":{}}}],["querysnapshot.foreach((userdm",{"_index":1825,"title":{},"body":{"injectables/SidebarService.html":{}}}],["querysnapshot.foreach(async",{"_index":953,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"injectables/ThreadService.html":{}}}],["querysnapshot.foreach(channel",{"_index":1814,"title":{},"body":{"injectables/SidebarService.html":{}}}],["querysnapshot.foreach(element",{"_index":2133,"title":{},"body":{"injectables/UserService.html":{}}}],["radius",{"_index":118,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"components/HeaderComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["reactiveformsmodule",{"_index":800,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/VerifyComponent.html":{}}}],["read",{"_index":425,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{}}}],["rearranges",{"_index":1794,"title":{},"body":{"injectables/SidebarService.html":{}}}],["received",{"_index":1383,"title":{},"body":{"components/RegisterComponent.html":{}}}],["refchannels",{"_index":1774,"title":{},"body":{"injectables/SidebarService.html":{}}}],["refcontainerposition",{"_index":408,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["reference",{"_index":1297,"title":{},"body":{"injectables/MutationObserverService.html":{},"injectables/SidebarService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["referenced",{"_index":2077,"title":{},"body":{"injectables/UserService.html":{}}}],["referenceelement",{"_index":449,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["referenceelement.getboundingclientrect().right",{"_index":453,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["referenceelement.getboundingclientrect().top",{"_index":452,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["reffile",{"_index":558,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["reffile(input",{"_index":587,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["refthreadmessages",{"_index":1891,"title":{},"body":{"injectables/ThreadService.html":{}}}],["refupdatefilepath",{"_index":1892,"title":{},"body":{"injectables/ThreadService.html":{}}}],["refupdatefilepath(id",{"_index":1917,"title":{},"body":{"injectables/ThreadService.html":{}}}],["refupdatethread",{"_index":1893,"title":{},"body":{"injectables/ThreadService.html":{}}}],["refuserchannels",{"_index":2042,"title":{},"body":{"injectables/UserService.html":{}}}],["refuserdirectmsgs",{"_index":1775,"title":{},"body":{"injectables/SidebarService.html":{}}}],["refuserprofile",{"_index":2043,"title":{},"body":{"injectables/UserService.html":{}}}],["register",{"_index":1354,"title":{},"body":{"components/RegisterComponent.html":{},"injectables/ResizeListenerService.html":{},"injectables/UserService.html":{}}}],["register'},{'name",{"_index":211,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["register.component.html",{"_index":1356,"title":{},"body":{"components/RegisterComponent.html":{}}}],["register.component.scss",{"_index":1355,"title":{},"body":{"components/RegisterComponent.html":{}}}],["register/register.component",{"_index":616,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["registercomponent",{"_index":210,"title":{"components/RegisterComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["registered",{"_index":1534,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["registerform",{"_index":1361,"title":{},"body":{"components/RegisterComponent.html":{}}}],["registerresizecallback",{"_index":1523,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["registerresizecallback(callback",{"_index":1536,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["registers",{"_index":595,"title":{},"body":{"components/ChooseavatarComponent.html":{},"injectables/StateService.html":{}}}],["registeruser",{"_index":559,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["registration",{"_index":1374,"title":{},"body":{"components/RegisterComponent.html":{}}}],["registrierung",{"_index":1449,"title":{},"body":{"components/RegisterComponent.html":{}}}],["related",{"_index":1710,"title":{},"body":{"components/SidebarComponent.html":{},"injectables/ThreadService.html":{}}}],["relative",{"_index":760,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["reload",{"_index":2284,"title":{},"body":{"index.html":{}}}],["removechanneluser",{"_index":1776,"title":{},"body":{"injectables/SidebarService.html":{}}}],["removes",{"_index":276,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["removeuserfromselection",{"_index":244,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["removeuserfromselection(user",{"_index":274,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["repeat",{"_index":1478,"title":{},"body":{"components/RegisterComponent.html":{}}}],["repeatedkey",{"_index":818,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["repliescount",{"_index":1968,"title":{},"body":{"injectables/ThreadService.html":{}}}],["represent",{"_index":1605,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["representing",{"_index":1726,"title":{},"body":{"components/SidebarComponent.html":{}}}],["represents",{"_index":999,"title":{},"body":{"components/HeaderComponent.html":{},"components/SidebarComponent.html":{},"injectables/UserService.html":{}}}],["reset",{"_index":928,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["resetpassword",{"_index":1493,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["resetpassword'},{'name",{"_index":213,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["resetpassword.component.html",{"_index":1494,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["resetpassword.component.scss",{"_index":1495,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["resetpasswordcomponent",{"_index":212,"title":{"components/ResetpasswordComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["resets",{"_index":62,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/SidebarComponent.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{}}}],["resize",{"_index":1150,"title":{},"body":{"components/MainsectionComponent.html":{},"injectables/ResizeListenerService.html":{},"injectables/StateService.html":{}}}],["resizecallbacks",{"_index":1519,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["resizelistenerservice",{"_index":1089,"title":{"injectables/ResizeListenerService.html":{}},"body":{"components/MainsectionComponent.html":{},"injectables/ResizeListenerService.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{},"coverage.html":{}}}],["resolves",{"_index":569,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{},"injectables/UserService.html":{}}}],["rest",{"_index":1303,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["restart",{"_index":1905,"title":{},"body":{"injectables/ThreadService.html":{}}}],["restartlistener",{"_index":1894,"title":{},"body":{"injectables/ThreadService.html":{}}}],["restartlistener(data",{"_index":1920,"title":{},"body":{"injectables/ThreadService.html":{}}}],["restarts",{"_index":1902,"title":{},"body":{"injectables/ThreadService.html":{}}}],["results",{"_index":229,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":2085,"title":{},"body":{"injectables/UserService.html":{}}}],["retrieveallusers",{"_index":2044,"title":{},"body":{"injectables/UserService.html":{}}}],["retrievechannels",{"_index":1777,"title":{},"body":{"injectables/SidebarService.html":{}}}],["retrievecurrentchannels",{"_index":1778,"title":{},"body":{"injectables/SidebarService.html":{}}}],["retrievecurrentdirectmsgs",{"_index":1779,"title":{},"body":{"injectables/SidebarService.html":{}}}],["retrieved",{"_index":826,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["retrievedmuserdata",{"_index":1780,"title":{},"body":{"injectables/SidebarService.html":{}}}],["retrieveotheruserprofile",{"_index":2045,"title":{},"body":{"injectables/UserService.html":{}}}],["retrieveotheruserprofile(id",{"_index":2080,"title":{},"body":{"injectables/UserService.html":{}}}],["retrieves",{"_index":257,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/UserService.html":{}}}],["retrieveuserchannels",{"_index":2046,"title":{},"body":{"injectables/UserService.html":{}}}],["retrieveuserprofile",{"_index":2047,"title":{},"body":{"injectables/UserService.html":{}}}],["retrieving",{"_index":823,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["return",{"_index":139,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"classes/ChannelData.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["returned",{"_index":1032,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["returning",{"_index":2075,"title":{},"body":{"injectables/UserService.html":{}}}],["returns",{"_index":70,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["right",{"_index":1029,"title":{},"body":{"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["root",{"_index":459,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ConfirmpasswordComponent.html":{},"injectables/MutationObserverService.html":{},"injectables/ResizeListenerService.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["root'},{'name",{"_index":188,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["rotate",{"_index":630,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/MainsectionComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["rotate(180deg",{"_index":865,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["rotateindicator",{"_index":1109,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["rotates",{"_index":1142,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["rotatetoggle",{"_index":1090,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["route",{"_index":849,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["router",{"_index":564,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/UserService.html":{}}}],["routerlink",{"_index":546,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ImprintComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["routeroutlet",{"_index":460,"title":{},"body":{"components/AppComponent.html":{}}}],["row",{"_index":1470,"title":{},"body":{"components/RegisterComponent.html":{}}}],["run",{"_index":2278,"title":{},"body":{"index.html":{}}}],["running",{"_index":2293,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1196,"title":{},"body":{"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"dependencies.html":{}}}],["same",{"_index":834,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/RegisterComponent.html":{}}}],["sans",{"_index":1485,"title":{},"body":{"components/RegisterComponent.html":{}}}],["saveeditchannelstatus",{"_index":906,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["saveeditchannelstatus(channelname",{"_index":918,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["saveeditdescriptionstatus",{"_index":907,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["saveeditdescriptionstatus(changeddescription",{"_index":924,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["scaffolding",{"_index":2286,"title":{},"body":{"index.html":{}}}],["scale",{"_index":734,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["scale(0.8",{"_index":774,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["scale(1",{"_index":771,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["scale(1.1",{"_index":773,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["scale(1.2",{"_index":776,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["scaleanimationblub",{"_index":769,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["scaleanimationdots",{"_index":765,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["scaleanimationimg",{"_index":762,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["schließen",{"_index":1124,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["schon",{"_index":132,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["screen",{"_index":575,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"injectables/ResizeListenerService.html":{},"components/SidebarComponent.html":{}}}],["scroll",{"_index":998,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/MutationObserverService.html":{}}}],["scrolls",{"_index":995,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/MutationObserverService.html":{}}}],["scrolltomessage",{"_index":976,"title":{},"body":{"components/HeaderComponent.html":{}}}],["scrolltomessage(index",{"_index":993,"title":{},"body":{"components/HeaderComponent.html":{}}}],["search",{"_index":1002,"title":{},"body":{"components/HeaderComponent.html":{}}}],["searchmessage",{"_index":977,"title":{},"body":{"components/HeaderComponent.html":{}}}],["searchmsg",{"_index":973,"title":{},"body":{"components/HeaderComponent.html":{}}}],["searchuser",{"_index":245,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["second",{"_index":837,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/RegisterComponent.html":{}}}],["section",{"_index":1711,"title":{},"body":{"components/SidebarComponent.html":{}}}],["sein",{"_index":160,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["select",{"_index":1608,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["selectavatar",{"_index":560,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["selectavatar(avatar",{"_index":596,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["selected",{"_index":263,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["selectedavatar",{"_index":552,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["selecteduser",{"_index":234,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["selection",{"_index":593,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["selector",{"_index":14,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["selects",{"_index":598,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["sendemail",{"_index":1496,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["sendemailverification",{"_index":614,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["sendemailverification(auth.currentuser",{"_index":657,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["senden",{"_index":1509,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["sendmessage",{"_index":1584,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["sendpasswordresetemail",{"_index":1501,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["sendpasswordresetemail(auth",{"_index":1503,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["sends",{"_index":1499,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["serve",{"_index":2280,"title":{},"body":{"index.html":{}}}],["server",{"_index":2277,"title":{},"body":{"index.html":{}}}],["service",{"_index":61,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/RegisterComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{}}}],["service.service",{"_index":432,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["service.service.ts",{"_index":1846,"title":{},"body":{"injectables/StateService.html":{},"coverage.html":{}}}],["service.service.ts:10",{"_index":1873,"title":{},"body":{"injectables/StateService.html":{}}}],["service.service.ts:11",{"_index":1871,"title":{},"body":{"injectables/StateService.html":{}}}],["service.service.ts:12",{"_index":1852,"title":{},"body":{"injectables/StateService.html":{}}}],["service.service.ts:25",{"_index":1864,"title":{},"body":{"injectables/StateService.html":{}}}],["service.service.ts:33",{"_index":1854,"title":{},"body":{"injectables/StateService.html":{}}}],["service.service.ts:40",{"_index":1865,"title":{},"body":{"injectables/StateService.html":{}}}],["service.service.ts:48",{"_index":1855,"title":{},"body":{"injectables/StateService.html":{}}}],["service.service.ts:9",{"_index":1872,"title":{},"body":{"injectables/StateService.html":{}}}],["services/auth.service",{"_index":1633,"title":{},"body":{"components/ShowProfileComponent.html":{},"components/VerifyComponent.html":{}}}],["services/channel.service",{"_index":1027,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["services/sidebar.service",{"_index":1026,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{}}}],["services/storage.service",{"_index":1636,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["services/thread.service",{"_index":1635,"title":{},"body":{"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["services/user.service",{"_index":1023,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["session",{"_index":2013,"title":{},"body":{"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{}}}],["sessionstorage",{"_index":2074,"title":{},"body":{"injectables/UserService.html":{}}}],["sessionstorage.getitem(\"uid",{"_index":1843,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["sessionstorage.getitem('uid",{"_index":307,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"injectables/UserService.html":{}}}],["sessionstorage.removeitem('uid",{"_index":2024,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["set",{"_index":1298,"title":{},"body":{"injectables/MutationObserverService.html":{},"injectables/StateService.html":{}}}],["setdata",{"_index":520,"title":{},"body":{"classes/ChannelData.html":{}}}],["setdata(collection",{"_index":528,"title":{},"body":{"classes/ChannelData.html":{}}}],["setdoc",{"_index":1805,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["setdoc(doc(this.firestore",{"_index":2143,"title":{},"body":{"injectables/UserService.html":{}}}],["seteditchanneldialogopenmobile",{"_index":1850,"title":{},"body":{"injectables/StateService.html":{}}}],["seteditchanneldialogopenmobile(state",{"_index":1863,"title":{},"body":{"injectables/StateService.html":{}}}],["sets",{"_index":60,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/VerifyComponent.html":{}}}],["settimeout",{"_index":883,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/SidebarService.html":{},"components/UserMenuDialogComponent.html":{}}}],["settimeout(resolve",{"_index":660,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["setting",{"_index":582,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["shadow",{"_index":119,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["shared/components/header/header.component",{"_index":1193,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["shared/components/show",{"_index":433,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["shared/interfaces/channelinfo",{"_index":105,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["shared/models/channels.class",{"_index":107,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["shared/services/auth.service",{"_index":864,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["shared/services/channel.service",{"_index":104,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/SidebarComponent.html":{}}}],["shared/services/resize",{"_index":1194,"title":{},"body":{"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{}}}],["shared/services/sidebar.service",{"_index":109,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/SidebarComponent.html":{}}}],["shared/services/state",{"_index":431,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["shared/services/storage.service",{"_index":613,"title":{},"body":{"components/ChooseavatarComponent.html":{},"injectables/ThreadService.html":{}}}],["shared/services/thread.service",{"_index":1197,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["shared/services/user.service",{"_index":297,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/SidebarComponent.html":{}}}],["short",{"_index":848,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["show",{"_index":215,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["showaddusersubject",{"_index":1848,"title":{},"body":{"injectables/StateService.html":{}}}],["showing",{"_index":1118,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["showloading",{"_index":553,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["showpassword",{"_index":1362,"title":{},"body":{"components/RegisterComponent.html":{}}}],["showprofile",{"_index":2020,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["showprofilecomponent",{"_index":214,"title":{"components/ShowProfileComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["shows",{"_index":985,"title":{},"body":{"components/HeaderComponent.html":{}}}],["shows/hides",{"_index":1154,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["showsidenav",{"_index":1110,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["showthread",{"_index":1111,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["showuser",{"_index":2029,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["side",{"_index":986,"title":{},"body":{"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{}}}],["sidebar",{"_index":1135,"title":{},"body":{"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{}}}],["sidebar'},{'name",{"_index":218,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["sidebar.component.html",{"_index":1673,"title":{},"body":{"components/SidebarComponent.html":{}}}],["sidebar.component.scss",{"_index":1674,"title":{},"body":{"components/SidebarComponent.html":{}}}],["sidebar/sidebar.component",{"_index":1190,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["sidebarcomponent",{"_index":217,"title":{"components/SidebarComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["sidebarelement",{"_index":1091,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["sidebarservice",{"_index":37,"title":{"injectables/SidebarService.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"coverage.html":{}}}],["sidebarservice.channels",{"_index":1764,"title":{},"body":{"components/SidebarComponent.html":{}}}],["sidebarservice.userdmdata",{"_index":1767,"title":{},"body":{"components/SidebarComponent.html":{}}}],["sidebarservice:sidebarservice",{"_index":934,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["sidenav",{"_index":1122,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["sidenav/thread",{"_index":1162,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["sidenavopen",{"_index":1092,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["sidesstatus",{"_index":1112,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["sie",{"_index":158,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["signinwithemailandpassword",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithemailandpassword(auth",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{}}}],["signs",{"_index":2014,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["size",{"_index":691,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/SidebarComponent.html":{}}}],["sizes",{"_index":1532,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["small",{"_index":1692,"title":{},"body":{"components/SidebarComponent.html":{}}}],["smooth",{"_index":1048,"title":{},"body":{"components/HeaderComponent.html":{}}}],["smscreen",{"_index":1520,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["snapshot",{"_index":1792,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["solid",{"_index":727,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["sollten",{"_index":157,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"index.html":{}}}],["space",{"_index":719,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["span",{"_index":701,"title":{},"body":{"components/ChooseavatarComponent.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{}}}],["specific",{"_index":249,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/HeaderComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{}}}],["specificuser",{"_index":235,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["specificuserinput",{"_index":236,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["specified",{"_index":277,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ResetpasswordComponent.html":{},"components/SidebarComponent.html":{},"injectables/UserService.html":{}}}],["speichern",{"_index":962,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"components/ShowProfileComponent.html":{}}}],["spinner",{"_index":748,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src",{"_index":1940,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/.../app.config.ts",{"_index":2317,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app.component.ts",{"_index":458,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:15",{"_index":467,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:16",{"_index":464,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:17",{"_index":463,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":2175,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/imprint/imprint.component.ts",{"_index":1063,"title":{},"body":{"components/ImprintComponent.html":{},"coverage.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts",{"_index":542,"title":{},"body":{"components/ChooseavatarComponent.html":{},"coverage.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:107",{"_index":567,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:114",{"_index":572,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:37",{"_index":610,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:38",{"_index":608,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:39",{"_index":611,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:40",{"_index":612,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:41",{"_index":606,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:42",{"_index":565,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:50",{"_index":580,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:58",{"_index":597,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:67",{"_index":602,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:77",{"_index":589,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/chooseavatar/chooseavatar.component.ts:88",{"_index":594,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts",{"_index":798,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"coverage.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts:105",{"_index":830,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts:36",{"_index":851,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts:37",{"_index":858,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts:38",{"_index":857,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts:39",{"_index":852,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts:40",{"_index":855,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts:41",{"_index":853,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts:42",{"_index":810,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts:59",{"_index":842,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts:73",{"_index":821,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts:82",{"_index":815,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["src/app/login/confirmpassword/confirmpassword.component.ts:91",{"_index":846,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["src/app/login/login.component.ts",{"_index":2182,"title":{},"body":{"coverage.html":{}}}],["src/app/login/register/register.component.ts",{"_index":1353,"title":{},"body":{"components/RegisterComponent.html":{},"coverage.html":{}}}],["src/app/login/register/register.component.ts:105",{"_index":1382,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:120",{"_index":1378,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:17",{"_index":1394,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:18",{"_index":1398,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:19",{"_index":1393,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:20",{"_index":1395,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:21",{"_index":1399,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:22",{"_index":1396,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:23",{"_index":1369,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:43",{"_index":1389,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:52",{"_index":1391,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:60",{"_index":1392,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:68",{"_index":1372,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/register/register.component.ts:88",{"_index":1386,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/login/resetpassword/resetpassword.component.ts",{"_index":1492,"title":{},"body":{"components/ResetpasswordComponent.html":{},"coverage.html":{}}}],["src/app/login/resetpassword/resetpassword.component.ts:35",{"_index":1500,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["src/app/login/resetpassword/resetpassword.component.ts:36",{"_index":1497,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["src/app/login/resetpassword/resetpassword.component.ts:43",{"_index":1498,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["src/app/mainsection/channel/add",{"_index":350,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"coverage.html":{}}}],["src/app/mainsection/channel/channel",{"_index":2192,"title":{},"body":{"coverage.html":{}}}],["src/app/mainsection/channel/channel.component.ts",{"_index":2200,"title":{},"body":{"coverage.html":{}}}],["src/app/mainsection/channel/edit",{"_index":898,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"coverage.html":{}}}],["src/app/mainsection/mainsection.component.ts",{"_index":1079,"title":{},"body":{"components/MainsectionComponent.html":{},"coverage.html":{}}}],["src/app/mainsection/mainsection.component.ts:111",{"_index":1152,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:126",{"_index":1158,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:146",{"_index":1156,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:165",{"_index":1132,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:175",{"_index":1136,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:185",{"_index":1120,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:200",{"_index":1115,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:21",{"_index":1189,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:213",{"_index":1126,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:22",{"_index":1174,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:224",{"_index":1123,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:23",{"_index":1183,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:231",{"_index":1144,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:24",{"_index":1170,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:25",{"_index":1165,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:26",{"_index":1175,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:27",{"_index":1178,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:28",{"_index":1181,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:29",{"_index":1186,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:30",{"_index":1187,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:31",{"_index":1188,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:32",{"_index":1185,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:33",{"_index":1177,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:34",{"_index":1180,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:35",{"_index":1167,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:36",{"_index":1172,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:37",{"_index":1114,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:47",{"_index":1148,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:58",{"_index":1149,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:71",{"_index":1137,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:86",{"_index":1159,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/mainsection.component.ts:97",{"_index":1160,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["src/app/mainsection/sidebar/add",{"_index":9,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"coverage.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts",{"_index":1672,"title":{},"body":{"components/SidebarComponent.html":{},"coverage.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:106",{"_index":1725,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:115",{"_index":1717,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:124",{"_index":1701,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:137",{"_index":1698,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:146",{"_index":1709,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:159",{"_index":1695,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:165",{"_index":1712,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:32",{"_index":1735,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:33",{"_index":1731,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:34",{"_index":1723,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:35",{"_index":1730,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:36",{"_index":1720,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:37",{"_index":1722,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:38",{"_index":1721,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:39",{"_index":1732,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:40",{"_index":1733,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:41",{"_index":1734,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:42",{"_index":1690,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:44",{"_index":1724,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:51",{"_index":1713,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:58",{"_index":1714,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:65",{"_index":1702,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:76",{"_index":1708,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:86",{"_index":1704,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/sidebar/sidebar.component.ts:95",{"_index":1691,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/mainsection/thread/thread.component.ts",{"_index":2213,"title":{},"body":{"coverage.html":{}}}],["src/app/outsideclick.directive.ts",{"_index":1328,"title":{},"body":{"directives/OutsideclickDirective.html":{},"coverage.html":{}}}],["src/app/outsideclick.directive.ts:13",{"_index":1340,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["src/app/outsideclick.directive.ts:8",{"_index":1335,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["src/app/privacypolicy/privacypolicy.component.ts",{"_index":2215,"title":{},"body":{"coverage.html":{}}}],["src/app/shared/components/header/header.component.ts",{"_index":966,"title":{},"body":{"components/HeaderComponent.html":{},"coverage.html":{}}}],["src/app/shared/components/header/header.component.ts:29",{"_index":1014,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:30",{"_index":1016,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:31",{"_index":1013,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:32",{"_index":1004,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:33",{"_index":1015,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:34",{"_index":1010,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:35",{"_index":1012,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:38",{"_index":1009,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:39",{"_index":978,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:41",{"_index":1005,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:47",{"_index":991,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:58",{"_index":981,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:67",{"_index":984,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:80",{"_index":994,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:91",{"_index":979,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/header.component.ts:99",{"_index":1000,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/components/header/user",{"_index":2005,"title":{},"body":{"components/UserMenuDialogComponent.html":{},"coverage.html":{}}}],["src/app/shared/components/show",{"_index":1568,"title":{},"body":{"components/ShowProfileComponent.html":{},"coverage.html":{}}}],["src/app/shared/components/verify/verify.component.ts",{"_index":2158,"title":{},"body":{"components/VerifyComponent.html":{},"coverage.html":{}}}],["src/app/shared/components/verify/verify.component.ts:15",{"_index":2167,"title":{},"body":{"components/VerifyComponent.html":{}}}],["src/app/shared/components/verify/verify.component.ts:16",{"_index":2168,"title":{},"body":{"components/VerifyComponent.html":{}}}],["src/app/shared/components/verify/verify.component.ts:17",{"_index":2163,"title":{},"body":{"components/VerifyComponent.html":{}}}],["src/app/shared/components/verify/verify.component.ts:29",{"_index":2164,"title":{},"body":{"components/VerifyComponent.html":{}}}],["src/app/shared/interfaces/channelinfo.ts",{"_index":540,"title":{},"body":{"interfaces/ChannelInfo.html":{},"coverage.html":{}}}],["src/app/shared/interfaces/userinfo.ts",{"_index":2004,"title":{},"body":{"interfaces/UserInfo.html":{},"coverage.html":{}}}],["src/app/shared/models/channels.class.ts",{"_index":519,"title":{},"body":{"classes/ChannelData.html":{},"coverage.html":{}}}],["src/app/shared/models/channels.class.ts:14",{"_index":529,"title":{},"body":{"classes/ChannelData.html":{}}}],["src/app/shared/models/channels.class.ts:2",{"_index":525,"title":{},"body":{"classes/ChannelData.html":{}}}],["src/app/shared/models/channels.class.ts:21",{"_index":530,"title":{},"body":{"classes/ChannelData.html":{}}}],["src/app/shared/models/channels.class.ts:3",{"_index":526,"title":{},"body":{"classes/ChannelData.html":{}}}],["src/app/shared/models/channels.class.ts:4",{"_index":527,"title":{},"body":{"classes/ChannelData.html":{}}}],["src/app/shared/models/channels.class.ts:5",{"_index":523,"title":{},"body":{"classes/ChannelData.html":{}}}],["src/app/shared/models/message.class.ts",{"_index":1246,"title":{},"body":{"classes/MessageData.html":{},"coverage.html":{}}}],["src/app/shared/models/message.class.ts:2",{"_index":1253,"title":{},"body":{"classes/MessageData.html":{}}}],["src/app/shared/models/message.class.ts:22",{"_index":1259,"title":{},"body":{"classes/MessageData.html":{}}}],["src/app/shared/models/message.class.ts:3",{"_index":1255,"title":{},"body":{"classes/MessageData.html":{}}}],["src/app/shared/models/message.class.ts:4",{"_index":1256,"title":{},"body":{"classes/MessageData.html":{}}}],["src/app/shared/models/message.class.ts:5",{"_index":1257,"title":{},"body":{"classes/MessageData.html":{}}}],["src/app/shared/models/message.class.ts:6",{"_index":1254,"title":{},"body":{"classes/MessageData.html":{}}}],["src/app/shared/models/message.class.ts:7",{"_index":1258,"title":{},"body":{"classes/MessageData.html":{}}}],["src/app/shared/models/message.class.ts:8",{"_index":1252,"title":{},"body":{"classes/MessageData.html":{}}}],["src/app/shared/models/message.class.ts:9",{"_index":1251,"title":{},"body":{"classes/MessageData.html":{}}}],["src/app/shared/models/userdata.class.ts",{"_index":1996,"title":{},"body":{"classes/UserData.html":{},"coverage.html":{}}}],["src/app/shared/models/userdata.class.ts:2",{"_index":1998,"title":{},"body":{"classes/UserData.html":{}}}],["src/app/shared/models/userdata.class.ts:3",{"_index":1999,"title":{},"body":{"classes/UserData.html":{}}}],["src/app/shared/models/userdata.class.ts:4",{"_index":2000,"title":{},"body":{"classes/UserData.html":{}}}],["src/app/shared/models/userdata.class.ts:5",{"_index":2001,"title":{},"body":{"classes/UserData.html":{}}}],["src/app/shared/models/userdata.class.ts:6",{"_index":1997,"title":{},"body":{"classes/UserData.html":{}}}],["src/app/shared/services/auth.service.ts",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/app/shared/services/auth.service.ts:11",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/shared/services/auth.service.ts:12",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/shared/services/auth.service.ts:20",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/shared/services/auth.service.ts:34",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/shared/services/auth.service.ts:47",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/shared/services/channel.service.ts",{"_index":2229,"title":{},"body":{"coverage.html":{}}}],["src/app/shared/services/emoji.service.ts",{"_index":2231,"title":{},"body":{"coverage.html":{}}}],["src/app/shared/services/mutation.observer.service.ts",{"_index":1276,"title":{},"body":{"injectables/MutationObserverService.html":{},"coverage.html":{}}}],["src/app/shared/services/mutation.observer.service.ts:10",{"_index":1308,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["src/app/shared/services/mutation.observer.service.ts:11",{"_index":1311,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["src/app/shared/services/mutation.observer.service.ts:12",{"_index":1282,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["src/app/shared/services/mutation.observer.service.ts:28",{"_index":1292,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["src/app/shared/services/mutation.observer.service.ts:60",{"_index":1283,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["src/app/shared/services/mutation.observer.service.ts:9",{"_index":1312,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["src/app/shared/services/resize",{"_index":1515,"title":{},"body":{"injectables/ResizeListenerService.html":{},"coverage.html":{}}}],["src/app/shared/services/sidebar.service.ts",{"_index":1771,"title":{},"body":{"injectables/SidebarService.html":{},"coverage.html":{}}}],["src/app/shared/services/sidebar.service.ts:10",{"_index":1801,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:107",{"_index":1788,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:11",{"_index":1803,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:12",{"_index":1799,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:122",{"_index":1786,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:13",{"_index":1798,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:130",{"_index":1784,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:139",{"_index":1787,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:14",{"_index":1800,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:15",{"_index":1802,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:16",{"_index":1781,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:24",{"_index":1790,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:43",{"_index":1793,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:62",{"_index":1795,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:77",{"_index":1796,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/sidebar.service.ts:99",{"_index":1783,"title":{},"body":{"injectables/SidebarService.html":{}}}],["src/app/shared/services/state",{"_index":1845,"title":{},"body":{"injectables/StateService.html":{},"coverage.html":{}}}],["src/app/shared/services/storage.service.ts",{"_index":2241,"title":{},"body":{"coverage.html":{}}}],["src/app/shared/services/thread.service.ts",{"_index":1878,"title":{},"body":{"injectables/ThreadService.html":{},"coverage.html":{}}}],["src/app/shared/services/thread.service.ts:106",{"_index":1927,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:12",{"_index":1936,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:121",{"_index":1921,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:13",{"_index":1954,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:134",{"_index":1933,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:14",{"_index":1941,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:146",{"_index":1916,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:15",{"_index":1952,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:150",{"_index":1919,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:159",{"_index":1929,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:16",{"_index":1949,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:17",{"_index":1945,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:18",{"_index":1939,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:19",{"_index":1938,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:20",{"_index":1944,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:21",{"_index":1943,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:22",{"_index":1946,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:23",{"_index":1953,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:24",{"_index":1947,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:25",{"_index":1948,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:26",{"_index":1950,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:27",{"_index":1899,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:37",{"_index":1901,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:46",{"_index":1926,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:70",{"_index":1912,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:90",{"_index":1918,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/thread.service.ts:98",{"_index":1908,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/shared/services/user.service.ts",{"_index":2031,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/app/shared/services/user.service.ts:109",{"_index":2086,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:12",{"_index":2103,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:123",{"_index":2079,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:13",{"_index":2102,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:137",{"_index":2090,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:14",{"_index":2106,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:15",{"_index":2104,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:153",{"_index":2094,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:16",{"_index":2105,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:162",{"_index":2058,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:17",{"_index":2100,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:176",{"_index":2076,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:18",{"_index":2101,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:186",{"_index":2072,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:195",{"_index":2068,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:206",{"_index":2071,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:218",{"_index":2064,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:229",{"_index":2060,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:25",{"_index":2052,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:37",{"_index":2054,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:49",{"_index":2057,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:64",{"_index":2088,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:78",{"_index":2081,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:88",{"_index":2098,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/shared/services/user.service.ts:98",{"_index":2099,"title":{},"body":{"injectables/UserService.html":{}}}],["stadt",{"_index":1072,"title":{},"body":{"components/ImprintComponent.html":{}}}],["standalone",{"_index":18,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["start",{"_index":702,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["started",{"_index":2270,"title":{"index.html":{}},"body":{}}],["starting",{"_index":1924,"title":{},"body":{"injectables/ThreadService.html":{}}}],["startlistenerchannel",{"_index":1895,"title":{},"body":{"injectables/ThreadService.html":{}}}],["startmutationobserver",{"_index":1886,"title":{},"body":{"injectables/ThreadService.html":{}}}],["starts",{"_index":1791,"title":{},"body":{"injectables/SidebarService.html":{},"injectables/ThreadService.html":{}}}],["state",{"_index":617,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/MainsectionComponent.html":{},"components/ResetpasswordComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{}}}],["state('closed",{"_index":1739,"title":{},"body":{"components/SidebarComponent.html":{}}}],["state('in",{"_index":624,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["state('open",{"_index":1740,"title":{},"body":{"components/SidebarComponent.html":{}}}],["state('out",{"_index":628,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["stateeditchanneldialogopenmobile",{"_index":402,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["statements",{"_index":2173,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":1141,"title":{},"body":{"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{}}}],["stateservice",{"_index":403,"title":{"injectables/StateService.html":{}},"body":{"components/AddUserToChannelDialogComponent.html":{},"injectables/StateService.html":{},"coverage.html":{}}}],["static",{"_index":1007,"title":{},"body":{"components/HeaderComponent.html":{}}}],["status",{"_index":982,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["stimme",{"_index":1463,"title":{},"body":{"components/RegisterComponent.html":{}}}],["stoplistener",{"_index":1896,"title":{},"body":{"injectables/ThreadService.html":{}}}],["stopping",{"_index":1923,"title":{},"body":{"injectables/ThreadService.html":{}}}],["stops",{"_index":1922,"title":{},"body":{"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{}}}],["storage",{"_index":1601,"title":{},"body":{"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{}}}],["storagebucket",{"_index":2329,"title":{},"body":{"miscellaneous/variables.html":{}}}],["storageservice",{"_index":563,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/ThreadService.html":{},"coverage.html":{}}}],["stored",{"_index":2073,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["stores",{"_index":2087,"title":{},"body":{"injectables/UserService.html":{}}}],["straße",{"_index":1069,"title":{},"body":{"components/ImprintComponent.html":{}}}],["string",{"_index":309,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["style",{"_index":618,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{},"components/SidebarComponent.html":{}}}],["styles",{"_index":541,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{},"components/SidebarComponent.html":{}}}],["styles.scss",{"_index":683,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["styleurl",{"_index":27,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["styleurls",{"_index":547,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["subject",{"_index":1307,"title":{},"body":{"injectables/MutationObserverService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{}}}],["submitkey",{"_index":2161,"title":{},"body":{"components/VerifyComponent.html":{}}}],["submitted",{"_index":65,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["submituser",{"_index":357,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["submituser(addeduser",{"_index":363,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["subscribe",{"_index":448,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["subscribeon",{"_index":2022,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["subscribes",{"_index":992,"title":{},"body":{"components/HeaderComponent.html":{}}}],["subscription",{"_index":1169,"title":{},"body":{"components/MainsectionComponent.html":{},"injectables/ThreadService.html":{}}}],["subtree",{"_index":1325,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["such",{"_index":1606,"title":{},"body":{"components/ShowProfileComponent.html":{},"injectables/ThreadService.html":{}}}],["switch",{"_index":1440,"title":{},"body":{"components/RegisterComponent.html":{}}}],["table",{"_index":2248,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2247,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":271,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/ThreadService.html":{}}}],["targetelement",{"_index":1343,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["targetelement.classlist.contains('edit",{"_index":1349,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["team",{"_index":153,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["telefon",{"_index":1077,"title":{},"body":{"components/ImprintComponent.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["templateurl",{"_index":25,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["term",{"_index":1003,"title":{},"body":{"components/HeaderComponent.html":{}}}],["test",{"_index":2296,"title":{},"body":{"index.html":{}}}],["testing",{"_index":2304,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2295,"title":{},"body":{"index.html":{}}}],["text",{"_index":705,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/MainsectionComponent.html":{},"components/ShowProfileComponent.html":{}}}],["themenbezogen",{"_index":159,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["then(async",{"_index":652,"title":{},"body":{"components/ChooseavatarComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["this._elementref.nativeelement.contains(targetelement",{"_index":1351,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["this.activechanneltitle",{"_index":1752,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.activedirectchannel",{"_index":1755,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.activeprivatechannel",{"_index":1753,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.adduser.name",{"_index":387,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["this.adduser.nativeelement",{"_index":450,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["this.allusers",{"_index":2136,"title":{},"body":{"injectables/UserService.html":{}}}],["this.allusers.push(doc.data",{"_index":2138,"title":{},"body":{"injectables/UserService.html":{}}}],["this.authservice.confirmnewpassword(this.code",{"_index":877,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["this.authservice.updateusermail(this.updateuserform.controls['email'].value",{"_index":1661,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.authservice.verified",{"_index":1660,"title":{},"body":{"components/ShowProfileComponent.html":{},"components/VerifyComponent.html":{}}}],["this.authservice.verifychange(this.keyform.controls['key'].value",{"_index":2169,"title":{},"body":{"components/VerifyComponent.html":{}}}],["this.avatars",{"_index":1640,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.changedetector.detectchanges",{"_index":1218,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.channelnameexists",{"_index":138,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["this.channels",{"_index":1813,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.channels.length",{"_index":1821,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.channels.push(channel.data",{"_index":1816,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.channelservice.channelmsg",{"_index":1761,"title":{},"body":{"components/SidebarComponent.html":{},"injectables/SidebarService.html":{}}}],["this.channelservice.channelmsgdata.collection",{"_index":393,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/ThreadService.html":{}}}],["this.channelservice.channelmsgdata.description",{"_index":945,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["this.channelservice.channelmsgdata.title",{"_index":937,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"components/SidebarComponent.html":{}}}],["this.channelservice.choosechanneltype(true",{"_index":1654,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.channelservice.createnewchannel(this.channelservice.newchannel",{"_index":312,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["this.channelservice.currentchannelusers",{"_index":1833,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.channelservice.currentchannelusers.some(checkuid",{"_index":388,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["this.channelservice.messages",{"_index":1762,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.channelservice.messages.foreach((element",{"_index":1051,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.channelservice.newchannel",{"_index":141,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["this.channelservice.newchannel?.users.push(creatorid",{"_index":308,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["this.channelservice.newchannel?.users.push(user",{"_index":338,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["this.channelservice.newchannel?.users.push(user.uid",{"_index":311,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["this.channelservice.privatemsg",{"_index":1760,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.channelservice.refreshchanneldata",{"_index":1817,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.channelservice.resetmessagetype",{"_index":959,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["this.channelservice.stoplistener",{"_index":2026,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["this.channelservice.updatechanneldescription(this.newchannelvalues.newdescription",{"_index":947,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["this.channelservice.updatechanneltitle(this.newchannelvalues.name",{"_index":942,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["this.channelservice.updateuserdm(this.userservice.otheruserinfo",{"_index":1649,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.channelusers.push(element",{"_index":1842,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.checkmobilesmallscreen",{"_index":1751,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.clearactivestyle",{"_index":1749,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.clearfiledata",{"_index":1983,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.closedialog",{"_index":1658,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.closesides",{"_index":1238,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.code",{"_index":868,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["this.collection",{"_index":531,"title":{},"body":{"classes/ChannelData.html":{}}}],["this.compareformcontrol",{"_index":874,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["this.createuserinfo",{"_index":2145,"title":{},"body":{"injectables/UserService.html":{}}}],["this.createuserinfo.email",{"_index":2151,"title":{},"body":{"injectables/UserService.html":{}}}],["this.createuserinfo.id",{"_index":2144,"title":{},"body":{"injectables/UserService.html":{}}}],["this.createuserinfo.isloggedin",{"_index":2152,"title":{},"body":{"injectables/UserService.html":{}}}],["this.createuserinfo.name",{"_index":2150,"title":{},"body":{"injectables/UserService.html":{}}}],["this.createuserinfo.profilepicture",{"_index":2154,"title":{},"body":{"injectables/UserService.html":{}}}],["this.currentuser",{"_index":2128,"title":{},"body":{"injectables/UserService.html":{}}}],["this.datasubject.asobservable",{"_index":1937,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.datasubject.next(data",{"_index":1904,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.delay(1000",{"_index":664,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["this.delay(2500",{"_index":662,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["this.description",{"_index":533,"title":{},"body":{"classes/ChannelData.html":{}}}],["this.dialog.closeall",{"_index":1665,"title":{},"body":{"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["this.dialog.open(addnewchannelcomponent",{"_index":1750,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.dialog.open(addnewusertochannelcomponent",{"_index":115,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["this.dialog.open(showprofilecomponent",{"_index":442,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["this.dialog.open(usermenudialogcomponent",{"_index":1028,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.dialog.open(verifycomponent",{"_index":1659,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.dialogref.close",{"_index":143,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["this.displayheadlinemobile",{"_index":1211,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.domchanges.asobservable",{"_index":1310,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["this.domchanges.next([mutation",{"_index":1322,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["this.editchanneldialogopenmobile",{"_index":1875,"title":{},"body":{"injectables/StateService.html":{}}}],["this.editchannelname",{"_index":938,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["this.editdescription",{"_index":946,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["this.editmode",{"_index":1663,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.editprofilepic",{"_index":1664,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.email",{"_index":1269,"title":{},"body":{"classes/MessageData.html":{},"classes/UserData.html":{}}}],["this.emoji",{"_index":1271,"title":{},"body":{"classes/MessageData.html":{}}}],["this.errormessage",{"_index":1412,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.filedata",{"_index":1982,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.filedata.name",{"_index":1976,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.filedata.src",{"_index":1974,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.filedata.type",{"_index":1978,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.fileinput.nativeelement.click",{"_index":1642,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.firstfocus",{"_index":1411,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.getfirebaseerrormessage(error.code",{"_index":1435,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.getusersfromchannel",{"_index":313,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["this.handleregistrationerror(error",{"_index":1419,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.handleuserregistration(email",{"_index":1418,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.headercomponent.headlinedesktop.nativeelement.style.display",{"_index":1237,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.headercomponent.headlinemobile.nativeelement.style.display",{"_index":1236,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.headlinedesktop.nativeelement.style.display",{"_index":1038,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.headlinemobile.nativeelement.style.display",{"_index":1040,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.hidesidenav",{"_index":1215,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.hidethread",{"_index":1208,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.hidethreadsubject.asobservable",{"_index":1942,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.hidethreadsubject.next",{"_index":1995,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.hidethreadsubscription",{"_index":1206,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.hidethreadsubscription.unsubscribe",{"_index":1241,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.id",{"_index":1260,"title":{},"body":{"classes/MessageData.html":{},"classes/UserData.html":{}}}],["this.initialchildcount",{"_index":1316,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["this.initialreferenceelementposition",{"_index":451,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["this.inputs.channelname",{"_index":128,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["this.inputs.description",{"_index":147,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["this.inputs.specificuser",{"_index":324,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["this.isdisabled",{"_index":882,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["this.isformsubmitted",{"_index":1414,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.isloggedin",{"_index":2002,"title":{},"body":{"classes/UserData.html":{}}}],["this.issubscribed",{"_index":1955,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.key",{"_index":875,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["this.keyform",{"_index":871,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/VerifyComponent.html":{}}}],["this.keyform.controls['key'].value",{"_index":876,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["this.keyform.controls['repeatedkey'].value",{"_index":881,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["this.keyform.controls['repeatedkey'].valuechanges",{"_index":873,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["this.lgscreen",{"_index":1555,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["this.loadingscreen",{"_index":648,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["this.mainsectioncomponent.hanldeclosemobile",{"_index":1757,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.mainsectioncomponent.rotatetoggle",{"_index":1037,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.mainsectioncomponent.showsidenav",{"_index":1034,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.mainsectioncomponent.toggleelement.nativeelement.classlist.remove('rotate",{"_index":1035,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.mdscreen",{"_index":1559,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["this.menustates[menu",{"_index":1758,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.message",{"_index":1265,"title":{},"body":{"classes/MessageData.html":{}}}],["this.messagelist",{"_index":1050,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.messagelist.push(element",{"_index":1055,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.messages",{"_index":1958,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.messages.length",{"_index":1969,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.messages.sort((a",{"_index":1962,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.messages.unshift(doc.data",{"_index":1960,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.messagestimestamp",{"_index":1959,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.msgid",{"_index":1273,"title":{},"body":{"classes/MessageData.html":{}}}],["this.mustmatch('key",{"_index":872,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["this.mutationobserver",{"_index":1318,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["this.mutationobserver.disconnect",{"_index":1327,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["this.mutationobserver.observe(element.nativeelement",{"_index":1323,"title":{},"body":{"injectables/MutationObserverService.html":{}}}],["this.name",{"_index":1261,"title":{},"body":{"classes/MessageData.html":{},"classes/UserData.html":{}}}],["this.nameinput.nativeelement.focus",{"_index":1410,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.newchannel",{"_index":142,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["this.newchannelvalues.name",{"_index":936,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["this.newchannelvalues.name.length",{"_index":939,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["this.newchannelvalues.newdescription",{"_index":944,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["this.onresize",{"_index":1209,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.opendialog",{"_index":144,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ShowProfileComponent.html":{}}}],["this.opendialoguserinfo",{"_index":441,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["this.originmessage.msgid",{"_index":1984,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.otheruser",{"_index":1645,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.otheruserinfo",{"_index":2129,"title":{},"body":{"injectables/UserService.html":{}}}],["this.otheruserinfo.isloggedin",{"_index":2156,"title":{},"body":{"injectables/UserService.html":{}}}],["this.outsideclick.emit(event",{"_index":1352,"title":{},"body":{"directives/OutsideclickDirective.html":{}}}],["this.overlayelement",{"_index":1222,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.overlayelement.nativeelement",{"_index":1223,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.overlayelement.nativeelement.style.display",{"_index":1224,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.params",{"_index":866,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["this.params.get('oobcode",{"_index":869,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["this.popupdisplay",{"_index":878,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["this.popupstate",{"_index":663,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["this.preparenewchanneldata",{"_index":140,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["this.profilepicture",{"_index":1263,"title":{},"body":{"classes/MessageData.html":{},"classes/UserData.html":{}}}],["this.registerform",{"_index":1402,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.registerform.controls['email'].value",{"_index":1416,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.registerform.controls['name'].value",{"_index":1417,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.registerform.controls['password'].value",{"_index":1432,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.registerform.valid",{"_index":1415,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.removechanneluser",{"_index":1822,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.resizecallbacks",{"_index":1565,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["this.resizecallbacks.filter(cb",{"_index":1566,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["this.resizecallbacks.foreach(callback",{"_index":1553,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["this.resizecallbacks.push(callback",{"_index":1564,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["this.resizelistenerservice.lgscreen",{"_index":1219,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.resizelistenerservice.mdscreen",{"_index":1214,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.resizelistenerservice.registerresizecallback(this.geteditchanneldialogopenmobile.bind(this",{"_index":1874,"title":{},"body":{"injectables/StateService.html":{}}}],["this.resizelistenerservice.registerresizecallback(this.onresize.bind(this",{"_index":1198,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.resizelistenerservice.smscreen",{"_index":1235,"title":{},"body":{"components/MainsectionComponent.html":{},"components/SidebarComponent.html":{}}}],["this.resizelistenerservice.unregisterresizecallback(this.geteditchanneldialogopenmobile.bind(this",{"_index":1877,"title":{},"body":{"injectables/StateService.html":{}}}],["this.resizelistenerservice.unregisterresizecallback(this.onresize.bind(this",{"_index":1242,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.resizelistenerservice.xmdscreen",{"_index":1228,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.resizelistenerservice.xsmscreen",{"_index":1756,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.restartlistener(data",{"_index":1906,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.rotatetoggle",{"_index":1216,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.router.navigate",{"_index":665,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/UserService.html":{}}}],["this.router.navigate(['/register/chooseavatar",{"_index":1433,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.router.url",{"_index":2108,"title":{},"body":{"injectables/UserService.html":{}}}],["this.router.url.includes('confirmpassword",{"_index":2109,"title":{},"body":{"injectables/UserService.html":{}}}],["this.searchmsg.msg",{"_index":1049,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.selectedavatar",{"_index":638,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["this.selecteduser.foreach(async",{"_index":390,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["this.selecteduser.foreach(user",{"_index":310,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["this.selecteduser.indexof(user",{"_index":332,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["this.selecteduser.push(user",{"_index":331,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["this.selecteduser.some(checkuid",{"_index":325,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["this.selecteduser.splice(contains",{"_index":333,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["this.showaddusersubject.asobservable",{"_index":1870,"title":{},"body":{"injectables/StateService.html":{}}}],["this.showaddusersubject.next",{"_index":1876,"title":{},"body":{"injectables/StateService.html":{}}}],["this.showloading",{"_index":661,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["this.showpassword",{"_index":1413,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.showsidenav",{"_index":1226,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.sidebarelement.nativeelement.classlist.add('hide",{"_index":1232,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.sidebarelement.nativeelement.classlist.add('margin",{"_index":1213,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.sidebarelement.nativeelement.classlist.remove('hide",{"_index":1230,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.sidebarelement.nativeelement.classlist.remove('margin",{"_index":1231,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.sidebarservice.channels.foreach",{"_index":122,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["this.sidebarservice.channels.some(checktitle",{"_index":129,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["this.sidebarservice.channelusers.foreach(user",{"_index":337,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["this.sidebarservice.getusersfromchannel",{"_index":336,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["this.sidebarservice.retrievechannels",{"_index":1742,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.sidebarservice.retrievecurrentchannels",{"_index":1744,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.sidebarservice.retrievecurrentdirectmsgs",{"_index":1746,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.sidebarservice.retrievedmuserdata",{"_index":1748,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.sidebarservice.userdmdata",{"_index":1763,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.sidebarservice.userdmdata.foreach(element",{"_index":1650,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.sidebarservice.userdmdata.push(this.userservice.otheruserinfo",{"_index":1653,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.sidebarservice.userdmdata[index].isloggedin",{"_index":1759,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.sidenavopen",{"_index":1220,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.sidesstatus",{"_index":1212,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.smscreen",{"_index":1563,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["this.specificuser",{"_index":305,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["this.specificuserinput?.nativeelement.focus",{"_index":334,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["this.startlistenerchannel",{"_index":1989,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.stateservice.geteditchanneldialogopenmobile",{"_index":429,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["this.stateservice.triggeradduser",{"_index":454,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["this.stoplistener",{"_index":1988,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.storageservice.abortuploadforthread",{"_index":1985,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.storageservice.avatars",{"_index":605,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["this.storageservice.downloadurlthread",{"_index":1975,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.storageservice.filenametextareathread",{"_index":1977,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.storageservice.files",{"_index":639,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["this.storageservice.files?.item(0",{"_index":646,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["this.storageservice.filestextareathread",{"_index":1972,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.storageservice.filestextareathread.length",{"_index":1973,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.storageservice.onfileselected(input",{"_index":645,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["this.storageservice.uploadedfiletypethread",{"_index":1979,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.storageservice.uploadfile(this.userservice.createuserinfo.id",{"_index":656,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["this.storageservice.uploadfile(this.userservice.currentuser",{"_index":1643,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.threadbarelement.nativeelement.classlist.add('hide",{"_index":1234,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.threadbarelement.nativeelement.classlist.add('margin",{"_index":1227,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.threadbarelement.nativeelement.classlist.remove('hide",{"_index":1229,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.threadbarelement.nativeelement.classlist.remove('margin",{"_index":1233,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.threadopen",{"_index":1221,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.threadservice.hidethread$.subscribe",{"_index":1207,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.threadservice.isactive",{"_index":1657,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.threadservice.stoplistener",{"_index":1655,"title":{},"body":{"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["this.threadservice.triggerhidethread",{"_index":1656,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.timestamp",{"_index":1267,"title":{},"body":{"classes/MessageData.html":{}}}],["this.title",{"_index":535,"title":{},"body":{"classes/ChannelData.html":{}}}],["this.toggleelement.nativeelement.classlist.add('rotate",{"_index":1217,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.toggleelement.nativeelement.classlist.remove('rotate",{"_index":1225,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.trigger.openmenu",{"_index":329,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["this.unsub",{"_index":1956,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.unsubchannels",{"_index":1741,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.unsubcurrentchannels",{"_index":1743,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.unsubprofile",{"_index":1199,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.unsubuserchannels",{"_index":1201,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.unsubuserdmdata",{"_index":1747,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.unsubuserdmids",{"_index":1745,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.unsubuserlist",{"_index":1203,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.updatechannelusers",{"_index":382,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["this.updateoverlaydisplay",{"_index":1210,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.updatescreensize",{"_index":1552,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["this.updateuserform",{"_index":1637,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.updateuserform.valid",{"_index":1647,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.userchannels",{"_index":2132,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userchannels.unshift(element.data()['channelid",{"_index":2134,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userdmdata",{"_index":1828,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.userdmdata.push(data",{"_index":1831,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.userdmids",{"_index":1824,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.userdmids.includes(userdm.id",{"_index":1829,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.userdmids.push(userdm.data()['dmuserid",{"_index":1826,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.userinfo",{"_index":2126,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userlist",{"_index":314,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["this.userlist.push",{"_index":326,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["this.username",{"_index":636,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["this.users",{"_index":536,"title":{},"body":{"classes/ChannelData.html":{}}}],["this.userservice.allusers.foreach(element",{"_index":315,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["this.userservice.checkregistereduser(email",{"_index":1424,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.userservice.createuserinfo.email",{"_index":650,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["this.userservice.createuserinfo.id",{"_index":654,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["this.userservice.createuserinfo.name",{"_index":637,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["this.userservice.createuserinfo.profilepicture",{"_index":641,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["this.userservice.createuserprofile",{"_index":658,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["this.userservice.currentuser",{"_index":957,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["this.userservice.key",{"_index":651,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["this.userservice.otheruserinfo",{"_index":440,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/ShowProfileComponent.html":{}}}],["this.userservice.otheruserinfo.id",{"_index":1652,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.userservice.otheruserinfo.isloggedin",{"_index":1646,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.userservice.preparedatanewuser(this.registerform.value",{"_index":1431,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.userservice.retrieveallusers",{"_index":1204,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.userservice.retrieveuserchannels",{"_index":1202,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.userservice.retrieveuserprofile",{"_index":1200,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.userservice.updateuserprofile(this.updateuserform",{"_index":1662,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.userservice.updateuserprofilepicture(this.userservice.createuserinfo.profilepicture",{"_index":1644,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.userservice.userchannels.includes(channel.id",{"_index":1815,"title":{},"body":{"injectables/SidebarService.html":{}}}],["this.userservice.userinfo",{"_index":2027,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["this.userservice.userinfo.email",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.userinfo.isloggedin",{"_index":1033,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{}}}],["this.userservice.userinfo.name",{"_index":1754,"title":{},"body":{"components/SidebarComponent.html":{}}}],["this.userservice.userinfo.profilepicture",{"_index":1641,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["this.userservice.userloggedin",{"_index":1205,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["this.userservice.userloggedout",{"_index":1240,"title":{},"body":{"components/MainsectionComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["this.xmdscreen",{"_index":1557,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["this.xsmscreen",{"_index":1561,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["thread",{"_index":1119,"title":{},"body":{"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"injectables/ThreadService.html":{}}}],["thread'},{'name",{"_index":220,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["thread/thread.component",{"_index":1192,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["threadbarelement",{"_index":1093,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["threadcomponent",{"_index":219,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["threadopen",{"_index":1094,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["threads",{"_index":2017,"title":{},"body":{"components/UserMenuDialogComponent.html":{}}}],["threadservice",{"_index":1095,"title":{"injectables/ThreadService.html":{}},"body":{"components/MainsectionComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"coverage.html":{}}}],["through",{"_index":1931,"title":{},"body":{"injectables/ThreadService.html":{}}}],["throw",{"_index":130,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{}}}],["throws",{"_index":1420,"title":{},"body":{"components/RegisterComponent.html":{}}}],["timeout",{"_index":1390,"title":{},"body":{"components/RegisterComponent.html":{}}}],["timestamp",{"_index":1250,"title":{},"body":{"classes/MessageData.html":{},"injectables/ThreadService.html":{}}}],["title",{"_index":126,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AppComponent.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/SidebarComponent.html":{}}}],["titles",{"_index":1696,"title":{},"body":{"components/SidebarComponent.html":{}}}],["toggle",{"_index":1036,"title":{},"body":{"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{}}}],["togglechangeprofilepic",{"_index":1585,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["toggled",{"_index":1719,"title":{},"body":{"components/SidebarComponent.html":{}}}],["toggleelement",{"_index":1096,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["togglemenu",{"_index":1689,"title":{},"body":{"components/SidebarComponent.html":{}}}],["togglemenu(menu",{"_index":1716,"title":{},"body":{"components/SidebarComponent.html":{}}}],["togglepasswordvisibility",{"_index":1368,"title":{},"body":{"components/RegisterComponent.html":{}}}],["toggles",{"_index":1116,"title":{},"body":{"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{}}}],["tojson",{"_index":521,"title":{},"body":{"classes/ChannelData.html":{},"classes/MessageData.html":{}}}],["top",{"_index":436,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"components/HeaderComponent.html":{},"components/RegisterComponent.html":{}}}],["toppos",{"_index":1044,"title":{},"body":{"components/HeaderComponent.html":{}}}],["track",{"_index":346,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{}}}],["transform",{"_index":625,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["transition",{"_index":619,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["transition('in",{"_index":635,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["transition('out",{"_index":632,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["translatex(0",{"_index":626,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["translatex(100",{"_index":629,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["transparent",{"_index":728,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["tree",{"_index":7,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["trigger",{"_index":237,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ResetpasswordComponent.html":{},"components/SidebarComponent.html":{}}}],["trigger('openclose",{"_index":1738,"title":{},"body":{"components/SidebarComponent.html":{}}}],["trigger('slideinout",{"_index":623,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}],["triggeradduser",{"_index":1851,"title":{},"body":{"injectables/StateService.html":{}}}],["triggered",{"_index":592,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["triggerfileinput",{"_index":561,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["triggerhidethread",{"_index":1897,"title":{},"body":{"injectables/ThreadService.html":{}}}],["triggering",{"_index":980,"title":{},"body":{"components/HeaderComponent.html":{}}}],["triggers",{"_index":603,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{}}}],["true",{"_index":19,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{}}}],["try",{"_index":121,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{}}}],["tslib",{"_index":2265,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":833,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"injectables/UserService.html":{}}}],["type",{"_index":52,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"classes/MessageData.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"classes/UserData.html":{},"interfaces/UserInfo.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":1284,"title":{},"body":{"injectables/MutationObserverService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["uid",{"_index":321,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"injectables/UserService.html":{}}}],["und",{"_index":1450,"title":{},"body":{"components/RegisterComponent.html":{}}}],["unerwarteter",{"_index":1437,"title":{},"body":{"components/RegisterComponent.html":{}}}],["ungültige",{"_index":1447,"title":{},"body":{"components/RegisterComponent.html":{}}}],["unique",{"_index":2061,"title":{},"body":{"injectables/UserService.html":{}}}],["unit",{"_index":2294,"title":{},"body":{"index.html":{}}}],["unregister",{"_index":1541,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["unregistered",{"_index":1542,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["unregisterresizecallback",{"_index":1524,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["unregisterresizecallback(callback",{"_index":1539,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["unregisters",{"_index":1856,"title":{},"body":{"injectables/StateService.html":{}}}],["unsub",{"_index":1887,"title":{},"body":{"injectables/ThreadService.html":{}}}],["unsubchannels",{"_index":1679,"title":{},"body":{"components/SidebarComponent.html":{}}}],["unsubcurrentchannels",{"_index":1680,"title":{},"body":{"components/SidebarComponent.html":{}}}],["unsubprofile",{"_index":1097,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["unsubscribe",{"_index":1737,"title":{},"body":{"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["unsubscribed",{"_index":1987,"title":{},"body":{"injectables/ThreadService.html":{}}}],["unsubscribes",{"_index":1928,"title":{},"body":{"injectables/ThreadService.html":{}}}],["unsubuserchannels",{"_index":1098,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["unsubuserdmdata",{"_index":1681,"title":{},"body":{"components/SidebarComponent.html":{}}}],["unsubuserdmids",{"_index":1682,"title":{},"body":{"components/SidebarComponent.html":{}}}],["unsubuserlist",{"_index":1099,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["up",{"_index":1859,"title":{},"body":{"injectables/StateService.html":{},"injectables/ThreadService.html":{}}}],["update",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ResizeListenerService.html":{},"injectables/ThreadService.html":{}}}],["updatechannelmessage",{"_index":1898,"title":{},"body":{"injectables/ThreadService.html":{}}}],["updatechannelmessage(data",{"_index":1932,"title":{},"body":{"injectables/ThreadService.html":{}}}],["updatechannelusers",{"_index":358,"title":{},"body":{"components/AddUserDialogComponent.html":{}}}],["updated",{"_index":2096,"title":{},"body":{"injectables/UserService.html":{}}}],["updatedoc",{"_index":379,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["updatedoc(doc(this.firestore",{"_index":392,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["updatedoc(doc(this.refuserprofile",{"_index":2130,"title":{},"body":{"injectables/UserService.html":{}}}],["updatedoc(this.refupdatefilepath(docref.id",{"_index":1980,"title":{},"body":{"injectables/ThreadService.html":{}}}],["updatedoc(this.refupdatethread",{"_index":1967,"title":{},"body":{"injectables/ThreadService.html":{}}}],["updateemail",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateemail(auth.currentuser",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateoverlaydisplay",{"_index":1113,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["updatepassword",{"_index":859,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["updates",{"_index":909,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"components/MainsectionComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["updatescreensize",{"_index":1525,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["updateuserform",{"_index":1578,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["updateusermail",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateusermail(mail",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserprofile",{"_index":2048,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserprofile(ngform",{"_index":2089,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserprofilepicture",{"_index":2049,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserprofilepicture(picturepath",{"_index":2093,"title":{},"body":{"injectables/UserService.html":{}}}],["updating",{"_index":926,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"injectables/ThreadService.html":{}}}],["upload",{"_index":737,"title":{},"body":{"components/ChooseavatarComponent.html":{},"injectables/ThreadService.html":{}}}],["uploaded",{"_index":2066,"title":{},"body":{"injectables/UserService.html":{}}}],["uploadedfile",{"_index":1981,"title":{},"body":{"injectables/ThreadService.html":{}}}],["uploads",{"_index":1600,"title":{},"body":{"components/ShowProfileComponent.html":{},"injectables/ThreadService.html":{}}}],["url",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{},"components/ShowProfileComponent.html":{},"injectables/UserService.html":{}}}],["url(/assets/img/login/checkbox.png",{"_index":1476,"title":{},"body":{"components/RegisterComponent.html":{}}}],["url(/assets/img/login/checkbox_checked.png",{"_index":1481,"title":{},"body":{"components/RegisterComponent.html":{}}}],["url(/assets/img/login/checkbox_checked_hover.png",{"_index":1483,"title":{},"body":{"components/RegisterComponent.html":{}}}],["url(/assets/img/login/checkbox_hover.png",{"_index":1479,"title":{},"body":{"components/RegisterComponent.html":{}}}],["url.createobjecturl(this.storageservice.fileurl",{"_index":647,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{}}}],["urlsearchparams",{"_index":856,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["urlsearchparams(window.location.search",{"_index":867,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["use",{"_index":813,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/RegisterComponent.html":{},"index.html":{}}}],["used",{"_index":920,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"injectables/MutationObserverService.html":{},"components/ShowProfileComponent.html":{},"injectables/ThreadService.html":{}}}],["user",{"_index":74,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["user's",{"_index":583,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["user.name",{"_index":456,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["user.service",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{}}}],["user.uid",{"_index":330,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["user.user",{"_index":347,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["userchannels",{"_index":396,"title":{},"body":{"components/AddUserDialogComponent.html":{},"components/EditChannelDialogComponent.html":{},"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["usercredential",{"_index":653,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["usercredential.user.uid",{"_index":655,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["userdata",{"_index":1809,"title":{"classes/UserData.html":{}},"body":{"injectables/SidebarService.html":{},"classes/UserData.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userdata(user.data",{"_index":2127,"title":{},"body":{"injectables/UserService.html":{}}}],["userdm.data",{"_index":1830,"title":{},"body":{"injectables/SidebarService.html":{}}}],["userdmdata",{"_index":1699,"title":{},"body":{"components/SidebarComponent.html":{},"injectables/SidebarService.html":{}}}],["userdmids",{"_index":1773,"title":{},"body":{"injectables/SidebarService.html":{}}}],["userdoc",{"_index":2110,"title":{},"body":{"injectables/UserService.html":{}}}],["userdoc.exists",{"_index":2113,"title":{},"body":{"injectables/UserService.html":{}}}],["userexists",{"_index":2112,"title":{},"body":{"injectables/UserService.html":{}}}],["userid",{"_index":2055,"title":{},"body":{"injectables/UserService.html":{}}}],["userinfo",{"_index":2003,"title":{"interfaces/UserInfo.html":{}},"body":{"interfaces/UserInfo.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userisloggedin",{"_index":412,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["userlist",{"_index":238,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["userlist.length",{"_index":348,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{}}}],["userloggedin",{"_index":2050,"title":{},"body":{"injectables/UserService.html":{}}}],["userloggedout",{"_index":2051,"title":{},"body":{"injectables/UserService.html":{}}}],["usermenudialogcomponent",{"_index":221,"title":{"components/UserMenuDialogComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["username",{"_index":554,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["userprofiledata",{"_index":2139,"title":{},"body":{"injectables/UserService.html":{}}}],["userprofiledata.email",{"_index":2142,"title":{},"body":{"injectables/UserService.html":{}}}],["userprofiledata.name",{"_index":2141,"title":{},"body":{"injectables/UserService.html":{}}}],["users",{"_index":258,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"classes/ChannelData.html":{},"interfaces/ChannelInfo.html":{},"components/EditChannelDialogComponent.html":{},"components/ShowProfileComponent.html":{},"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["userservice",{"_index":239,"title":{"injectables/UserService.html":{}},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userservice.otheruserinfo.email",{"_index":1668,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["userservice.otheruserinfo.name",{"_index":1667,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["userservice.userinfo.email",{"_index":1669,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["userservice.userinfo.id",{"_index":1769,"title":{},"body":{"components/SidebarComponent.html":{}}}],["userservice.userinfo.name",{"_index":1062,"title":{},"body":{"components/HeaderComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{}}}],["using",{"_index":75,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ConfirmpasswordComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["valid",{"_index":1588,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["validates",{"_index":843,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["validationerrors",{"_index":863,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["validator",{"_index":831,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["validatorfn",{"_index":838,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["validators",{"_index":861,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{}}}],["validators.email",{"_index":1405,"title":{},"body":{"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{}}}],["validators.minlength(5",{"_index":1404,"title":{},"body":{"components/RegisterComponent.html":{}}}],["validators.minlength(8",{"_index":1406,"title":{},"body":{"components/RegisterComponent.html":{}}}],["validators.required",{"_index":1403,"title":{},"body":{"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{}}}],["validators.requiredtrue",{"_index":1409,"title":{},"body":{"components/RegisterComponent.html":{}}}],["value",{"_index":87,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/SidebarService.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyComponent.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":817,"title":{},"body":{"components/ConfirmpasswordComponent.html":{}}}],["var",{"_index":181,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["variable",{"_index":1155,"title":{},"body":{"components/MainsectionComponent.html":{},"coverage.html":{}}}],["variables",{"_index":1550,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/ResizeListenerService.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":1130,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["verification",{"_index":2166,"title":{},"body":{"components/VerifyComponent.html":{}}}],["verified",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{},"components/ShowProfileComponent.html":{}}}],["verifies",{"_index":2165,"title":{},"body":{"components/VerifyComponent.html":{}}}],["verify",{"_index":224,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{}}}],["verify.component.html",{"_index":2159,"title":{},"body":{"components/VerifyComponent.html":{}}}],["verify.component.scss",{"_index":2160,"title":{},"body":{"components/VerifyComponent.html":{}}}],["verify/verify.component",{"_index":1634,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["verifychange",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifychange(key",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifycomponent",{"_index":223,"title":{"components/VerifyComponent.html":{}},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/AppComponent.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ResetpasswordComponent.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"components/UserMenuDialogComponent.html":{},"components/VerifyComponent.html":{},"coverage.html":{}}}],["verlassen",{"_index":965,"title":{},"body":{"components/EditChannelDialogComponent.html":{}}}],["version",{"_index":2274,"title":{},"body":{"index.html":{},"properties.html":{}}}],["verwenden",{"_index":674,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["verwendet",{"_index":1445,"title":{},"body":{"components/RegisterComponent.html":{}}}],["via",{"_index":2297,"title":{},"body":{"index.html":{}}}],["view",{"_index":1128,"title":{},"body":{"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{}}}],["viewchild",{"_index":296,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{},"components/ShowProfileComponent.html":{}}}],["viewchild(\"specificuserinput",{"_index":302,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["viewchild('adduser",{"_index":424,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["viewchild('channel",{"_index":1166,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["viewchild('fileinput",{"_index":1623,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["viewchild('headlinedesktop",{"_index":1006,"title":{},"body":{"components/HeaderComponent.html":{}}}],["viewchild('headlinemobile",{"_index":1008,"title":{},"body":{"components/HeaderComponent.html":{}}}],["viewchild('icon",{"_index":428,"title":{},"body":{"components/AddUserToChannelDialogComponent.html":{}}}],["viewchild('nameinput",{"_index":1397,"title":{},"body":{"components/RegisterComponent.html":{}}}],["viewchild('overlay",{"_index":1171,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["viewchild('sidebar",{"_index":1176,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["viewchild('specificuserinput",{"_index":290,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{}}}],["viewchild('threadbar",{"_index":1179,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["viewchild('toggle",{"_index":1184,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["viewchild(headercomponent",{"_index":1168,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["viewchild(matmenutrigger",{"_index":293,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["visibility",{"_index":1157,"title":{},"body":{"components/MainsectionComponent.html":{},"components/RegisterComponent.html":{}}}],["void",{"_index":76,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/AddNewUserToChannelComponent.html":{},"components/AddUserDialogComponent.html":{},"components/AddUserToChannelDialogComponent.html":{},"classes/ChannelData.html":{},"components/ChooseavatarComponent.html":{},"components/ConfirmpasswordComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MainsectionComponent.html":{},"injectables/MutationObserverService.html":{},"directives/OutsideclickDirective.html":{},"components/RegisterComponent.html":{},"injectables/ResizeListenerService.html":{},"components/ShowProfileComponent.html":{},"components/SidebarComponent.html":{},"injectables/StateService.html":{},"injectables/ThreadService.html":{},"components/UserMenuDialogComponent.html":{},"injectables/UserService.html":{}}}],["vollständiger",{"_index":1670,"title":{},"body":{"components/ShowProfileComponent.html":{}}}],["von",{"_index":343,"title":{},"body":{"components/AddNewUserToChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["vorhanden",{"_index":133,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["vorname",{"_index":1067,"title":{},"body":{"components/ImprintComponent.html":{}}}],["want",{"_index":997,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/UserService.html":{}}}],["webkit",{"_index":1472,"title":{},"body":{"components/RegisterComponent.html":{}}}],["weight",{"_index":693,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["weiter",{"_index":677,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{}}}],["where(\"email",{"_index":2116,"title":{},"body":{"injectables/UserService.html":{}}}],["where(\"name",{"_index":2118,"title":{},"body":{"injectables/UserService.html":{}}}],["whether",{"_index":1300,"title":{},"body":{"injectables/MutationObserverService.html":{},"components/ShowProfileComponent.html":{},"injectables/SidebarService.html":{},"injectables/UserService.html":{}}}],["white",{"_index":745,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["whose",{"_index":2084,"title":{},"body":{"injectables/UserService.html":{}}}],["width",{"_index":712,"title":{},"body":{"components/ChooseavatarComponent.html":{},"components/RegisterComponent.html":{},"injectables/ResizeListenerService.html":{}}}],["window",{"_index":73,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ShowProfileComponent.html":{},"components/VerifyComponent.html":{}}}],["window.innerwidth",{"_index":1554,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["windows",{"_index":1591,"title":{},"body":{"components/ShowProfileComponent.html":{},"components/UserMenuDialogComponent.html":{}}}],["wir",{"_index":1508,"title":{},"body":{"components/ResetpasswordComponent.html":{}}}],["wird",{"_index":1444,"title":{},"body":{"components/RegisterComponent.html":{}}}],["within",{"_index":923,"title":{},"body":{"components/EditChannelDialogComponent.html":{},"components/SidebarComponent.html":{},"injectables/UserService.html":{}}}],["withviewtransitions",{"_index":2321,"title":{},"body":{"miscellaneous/variables.html":{}}}],["workspace",{"_index":1243,"title":{},"body":{"components/MainsectionComponent.html":{}}}],["wrap",{"_index":723,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["wähle",{"_index":173,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/ChooseavatarComponent.html":{},"components/EditChannelDialogComponent.html":{}}}],["wählen",{"_index":671,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["xmdscreen",{"_index":1521,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["xsmscreen",{"_index":1522,"title":{},"body":{"injectables/ResizeListenerService.html":{}}}],["yes",{"_index":524,"title":{},"body":{"classes/ChannelData.html":{},"classes/MessageData.html":{},"classes/UserData.html":{}}}],["z",{"_index":751,"title":{},"body":{"components/ChooseavatarComponent.html":{}}}],["zeichen",{"_index":1458,"title":{},"body":{"components/RegisterComponent.html":{}}}],["zone.js",{"_index":2267,"title":{},"body":{"dependencies.html":{}}}],["zu",{"_index":168,"title":{},"body":{"components/AddNewChannelComponent.html":{},"components/EditChannelDialogComponent.html":{},"components/RegisterComponent.html":{}}}],["zum",{"_index":162,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["zur",{"_index":154,"title":{},"body":{"components/AddNewChannelComponent.html":{}}}],["zurücksetzen",{"_index":895,"title":{},"body":{"components/ConfirmpasswordComponent.html":{},"components/ResetpasswordComponent.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AddNewChannelComponent.html":{"url":"components/AddNewChannelComponent.html","title":"component - AddNewChannelComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AddNewChannelComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mainsection/sidebar/add-new-channel/add-new-channel.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-add-new-channel\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatDialogModule\n                            FormsModule\n                            CommonModule\n                                AddNewUserToChannelComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./add-new-channel.component.html\n            \n\n\n\n            \n                styleUrl\n                ./add-new-channel.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelNameExists\n                            \n                            \n                                channelService\n                            \n                            \n                                    Public\n                                dialog\n                            \n                            \n                                inputs\n                            \n                            \n                                newChannel\n                            \n                            \n                                sidebarService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onSubmit\n                            \n                            \n                                openDialog\n                            \n                            \n                                prepareNewChannelData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialog: MatDialog, dialogRef: DialogRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/mainsection/sidebar/add-new-channel/add-new-channel.component.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                    DialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onSubmit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onSubmit(createNewChannel: NgForm)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/add-new-channel/add-new-channel.component.ts:47\n                        \n                    \n\n\n            \n                \n                        The onSubmit function prepares new channel data, sets it in the channel service, and resets the\nform.\nThe function onSubmit is called when a form is submitted, and it resets the form\nafterwards.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createNewChannel\n                                            \n                                                        NgForm\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \ncreateNewChannel is a parameter of type NgForm.\nThe function onSubmit is called when a form is submitted, and it resets the form\nafterwards.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openDialog\n                        \n                    \n                \n            \n            \n                \nopenDialog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/add-new-channel/add-new-channel.component.ts:36\n                        \n                    \n\n\n            \n                \n                        The openDialog function opens a dialog window to add new user to a channel using the\nAddNewUserToChannelComponent.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prepareNewChannelData\n                        \n                    \n                \n            \n            \n                \nprepareNewChannelData()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/add-new-channel/add-new-channel.component.ts:72\n                        \n                    \n\n\n            \n                \n                        The function prepareNewChannelData creates a new channel object with data from input fields and\nconverts it to JSON format.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelNameExists\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-channel/add-new-channel.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelService\n\n                    \n                \n                \n                    \n                        Default value : inject(ChannelService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-channel/add-new-channel.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatDialog\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-channel/add-new-channel.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inputs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    'channelName': '',\n    'description': ''\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-channel/add-new-channel.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newChannel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelInfo\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-channel/add-new-channel.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sidebarService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SidebarService\n\n                    \n                \n                \n                    \n                        Default value : inject(SidebarService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-channel/add-new-channel.component.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, inject, input } from '@angular/core';\nimport { FormsModule, NgForm } from '@angular/forms';\nimport { MatDialogModule, MatDialog } from '@angular/material/dialog';\nimport { ChannelService } from '../../../shared/services/channel.service';\nimport { ChannelInfo } from '../../../shared/interfaces/channelinfo';\nimport { ChannelData } from '../../../shared/models/channels.class';\nimport { AddNewUserToChannelComponent } from '../add-new-user-to-channel/add-new-user-to-channel.component';\nimport { SidebarService } from '../../../shared/services/sidebar.service';\nimport { DialogRef } from '@angular/cdk/dialog';\n\n@Component({\n  selector: 'app-add-new-channel',\n  standalone: true,\n  imports: [MatDialogModule, FormsModule, CommonModule, AddNewUserToChannelComponent],\n  templateUrl: './add-new-channel.component.html',\n  styleUrl: './add-new-channel.component.scss'\n})\n\nexport class AddNewChannelComponent {\n  channelService: ChannelService = inject(ChannelService);\n  sidebarService: SidebarService = inject(SidebarService);\n  newChannel!: ChannelInfo;\n  inputs = {\n    'channelName': '',\n    'description': ''\n  }\n  channelNameExists: boolean = false;\n\n  constructor(public dialog: MatDialog, private dialogRef: DialogRef) { }\n\n  /**\n   * The `openDialog` function opens a dialog window to add new user to a channel using the\n   * `AddNewUserToChannelComponent`.\n   */\n  openDialog() {\n    this.dialog.open(AddNewUserToChannelComponent, { panelClass: ['add-user', 'box-radius', 'box-shadow'] });\n  }\n\n  /**\n   * The onSubmit function prepares new channel data, sets it in the channel service, and resets the\n   * form.\n   * @param {NgForm} createNewChannel - `createNewChannel` is a parameter of type `NgForm`.\n   * The function `onSubmit` is called when a form is submitted, and it resets the form\n   * afterwards.\n   */\n  async onSubmit(createNewChannel: NgForm) {\n    try {\n      this.sidebarService.channels.forEach(() => {\n        const checkTitle = (obj: { title: any; }) => obj.title === this.inputs.channelName;\n        if (this.sidebarService.channels.some(checkTitle)) {\n          throw new Error('Titel schon vorhanden !')\n        }\n      });\n    } catch (error) {\n      console.error(error);\n      createNewChannel.reset();\n      this.channelNameExists = true;\n      return\n    }\n    this.prepareNewChannelData();\n    this.channelService.newChannel = this.newChannel;\n    createNewChannel.reset();\n    this.dialogRef.close();\n    this.openDialog();\n  }\n\n  /**\n   * The function `prepareNewChannelData` creates a new channel object with data from input fields and\n   * converts it to JSON format.\n   */\n  prepareNewChannelData() {\n    let channelDummy = new ChannelData('');\n    channelDummy.setData(this.inputs.channelName, this.inputs.description, this.inputs.channelName);\n    this.newChannel = channelDummy.toJson();\n  }\n}\n\n    \n\n    \n        \n    \n    \n    \n        Channel erstellen\n    \n    \n        Channels dienen deinem Team zur Kommunikation. Am besten sollten sie themenbezogen sein \n            #marketing zum Beispiel.\n    \n    \n        \n             Channel-Name\n            \n        \n        \n            Inhalt erforderlich !\n        \n        \n            Dieser Channelname ist zu kurz oder existiert schon, bitte wähle einen anderen !\n        \n        \n             Beschreibung (optional)\n            \n        \n        \n            \n                Erstellen\n            \n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    Channel erstellen                Channels dienen deinem Team zur Kommunikation. Am besten sollten sie themenbezogen sein             #marketing zum Beispiel.                             Channel-Name                                        Inhalt erforderlich !                            Dieser Channelname ist zu kurz oder existiert schon, bitte wähle einen anderen !                             Beschreibung (optional)                                                        Erstellen                        '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'AddNewChannelComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AddNewUserToChannelComponent.html":{"url":"components/AddNewUserToChannelComponent.html","title":"component - AddNewUserToChannelComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AddNewUserToChannelComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-add-new-user-to-channel\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatDialogModule\n                            MatMenuModule\n                            MatButtonModule\n                            FormsModule\n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./add-new-user-to-channel.component.html\n            \n\n\n\n            \n                styleUrl\n                ./add-new-user-to-channel.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelService\n                            \n                            \n                                inputs\n                            \n                            \n                                menuOpened\n                            \n                            \n                                selectedUser\n                            \n                            \n                                sidebarService\n                            \n                            \n                                specificUser\n                            \n                            \n                                    \n                                    Optional\n                                specificUserInput\n                            \n                            \n                                    \n                                trigger\n                            \n                            \n                                userList\n                            \n                            \n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                focusOnUserInput\n                            \n                            \n                                getMenu\n                            \n                            \n                                    Async\n                                getUsersFromChannel\n                            \n                            \n                                onSubmit\n                            \n                            \n                                pushToSelection\n                            \n                            \n                                removeUserFromSelection\n                            \n                            \n                                searchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:31\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        focusOnUserInput\n                        \n                    \n                \n            \n            \n                \nfocusOnUserInput()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:104\n                        \n                    \n\n\n            \n                \n                        The function focusOnUserInput focuses on a specific user input element if it exists.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMenu\n                        \n                    \n                \n            \n            \n                \ngetMenu()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:74\n                        \n                    \n\n\n            \n                \n                        The getMenu function opens the menu by calling the openMenu method on the trigger object.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUsersFromChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsersFromChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:112\n                        \n                    \n\n\n            \n                \n                        The function getUsersFromChannel asynchronously retrieves users from a channel and adds them to a\nuser list.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmit\n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:41\n                        \n                    \n\n\n            \n                \n                        The onSubmit function checks if a specific user is selected and adds them to a new channel,\notherwise it retrieves users from an existing channel.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushToSelection\n                        \n                    \n                \n            \n            \n                \npushToSelection(user: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:83\n                        \n                    \n\n\n            \n                \n                        The function pushToSelection adds a user object to the selectedUser array, clears the userList\narray, and resets the specificUser input field.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \ntakes an object as a parameter named user and pushes it into selectedUser.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeUserFromSelection\n                        \n                    \n                \n            \n            \n                \nremoveUserFromSelection(user: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:96\n                        \n                    \n\n\n            \n                \n                        The function removeUserFromSelection removes a specified user from the selectedUser array.\nwhich means it can accept any data type as its value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user parameter in the removeUserFromSelection function is of type any,\nwhich means it can accept any data type as its value.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchUser\n                        \n                    \n                \n            \n            \n                \nsearchUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:59\n                        \n                    \n\n\n            \n                \n                        The searchUser function filters a list of users based on a specific user input and populates a new\nlist with matching users' information.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelService\n\n                    \n                \n                \n                    \n                        Default value : inject(ChannelService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inputs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    specificUser: ''\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        menuOpened\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sidebarService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SidebarService\n\n                    \n                \n                \n                    \n                        Default value : inject(SidebarService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        specificUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        specificUserInput\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('specificUserInput')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        trigger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatMenuTrigger\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild(MatMenuTrigger)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Default value : inject(UserService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, ViewChild, inject, viewChild } from '@angular/core';\nimport { FormsModule, NgForm } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { ChannelService } from '../../../shared/services/channel.service';\nimport { UserService } from '../../../shared/services/user.service';\nimport { MatMenuModule, MatMenuTrigger } from '@angular/material/menu';\nimport { MatButtonModule } from '@angular/material/button';\nimport { firebaseAppFactory } from '@angular/fire/app/app.module';\nimport { SidebarService } from '../../../shared/services/sidebar.service';\n\n@Component({\n  selector: 'app-add-new-user-to-channel',\n  standalone: true,\n  imports: [MatDialogModule, MatMenuModule, MatButtonModule, FormsModule, CommonModule],\n  templateUrl: './add-new-user-to-channel.component.html',\n  styleUrl: './add-new-user-to-channel.component.scss',\n})\nexport class AddNewUserToChannelComponent {\n  @ViewChild(\"specificUserInput\") specificUserInput?: { nativeElement: { focus: () => void; }; }\n  @ViewChild(MatMenuTrigger) trigger!: MatMenuTrigger;\n  channelService: ChannelService = inject(ChannelService);\n  sidebarService: SidebarService = inject(SidebarService);\n  userService: UserService = inject(UserService);\n  menuOpened: boolean = false;\n  specificUser: boolean;\n  userList: any[] = [];\n  selectedUser: any[] = [];\n  inputs = {\n    specificUser: ''\n  }\n\n  constructor() {\n    this.specificUser = false;\n  }\n\n  /**\n   * The onSubmit function checks if a specific user is selected and adds them to a new channel,\n   * otherwise it retrieves users from an existing channel.\n   */\n  onSubmit() {\n    const creatorId = sessionStorage.getItem('uid')\n    this.channelService.newChannel?.users.push(creatorId as string)\n    if (this.specificUser == true) {\n      this.selectedUser.forEach(user => {\n        this.channelService.newChannel?.users.push(user.uid)\n      });\n      this.channelService.createNewChannel(this.channelService.newChannel!);\n    } else {\n      this.getUsersFromChannel();\n      this.channelService.createNewChannel(this.channelService.newChannel!);\n    }\n  }\n\n  /**\n   * The `searchUser` function filters a list of users based on a specific user input and populates a new\n   * list with matching users' information.\n   */\n  searchUser() {\n    this.userList = [];\n    this.userService.allUsers.forEach(element => {\n      const name: string = element['name'];\n      const contains: boolean = name.toLocaleLowerCase().indexOf(this.inputs.specificUser.toLocaleLowerCase()) != -1;\n      const checkUid = (obj: { uid: any; }) => obj.uid === element['id'];\n      if (contains && this.inputs.specificUser != '' && !this.selectedUser.some(checkUid)) {\n        this.userList.push({ user: name, uid: element['id'], img: element['profilePicture'] });\n      }\n    });\n  }\n\n  /**\n   * The `getMenu` function opens the menu by calling the `openMenu` method on the `trigger` object.\n   */\n  getMenu() {\n    this.trigger.openMenu();\n  }\n\n  /**\n   * The function `pushToSelection` adds a user object to the selectedUser array, clears the userList\n   * array, and resets the specificUser input field.\n   * @param {object} user - takes an `object` as a parameter named `user` and pushes it into `selectedUser`.\n   */\n  pushToSelection(user: any) {\n    const checkUid = (obj: { uid: any; }) => obj.uid === user.uid;\n    if (!this.selectedUser.some(checkUid))\n      this.selectedUser.push(user);\n    this.userList = [];\n    this.inputs.specificUser = ''\n  }\n\n  /**\n   * The function `removeUserFromSelection` removes a specified user from the `selectedUser` array.\n   * @param {any} user - The `user` parameter in the `removeUserFromSelection` function is of type `any`,\n   * which means it can accept any data type as its value.\n   */\n  removeUserFromSelection(user: any) {\n    const contains = this.selectedUser.indexOf(user);\n    this.selectedUser.splice(contains, 1);\n  }\n\n  /**\n   * The function `focusOnUserInput` focuses on a specific user input element if it exists.\n   */\n  focusOnUserInput() {\n    this.specificUserInput?.nativeElement.focus();\n  }\n\n  /**\n   * The function `getUsersFromChannel` asynchronously retrieves users from a channel and adds them to a\n   * user list.\n   */\n  async getUsersFromChannel() {\n    this.userList = [];\n    await this.sidebarService.getUsersFromChannel();\n    this.sidebarService.channelUsers.forEach(user => {\n      this.channelService.newChannel?.users.push(user);\n    });\n  }\n}\n\n    \n\n    \n        \n    \n    \n    \n    \n        Leute hinzufügen\n    \n    \n        \n            \n            Alle Mitglieder von EntwicklerTeam hinzufügen\n        \n        \n            \n            Bestimmte Leute hinzufügen\n        \n        \n            \n                @for (user of selectedUser; track $index) {\n                \n                    \n                    {{user.user}}\n                    \n                \n                }\n                \n            \n        \n        \n            \n                Erstellen\n            \n        \n        \n            @if (userList.length != 0) {\n            \n                @for (user of userList; track $index) {\n                \n                    \n                    {{user.user}}\n                \n                }\n            \n            }\n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        Leute hinzufügen                                        Alle Mitglieder von EntwicklerTeam hinzufügen                                        Bestimmte Leute hinzufügen                                            @for (user of selectedUser; track $index) {                                                        {{user.user}}                                                    }                                                                        Erstellen                                        @if (userList.length != 0) {                            @for (user of userList; track $index) {                                                        {{user.user}}                                }                        }            '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'AddNewUserToChannelComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AddUserDialogComponent.html":{"url":"components/AddUserDialogComponent.html","title":"component - AddUserDialogComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AddUserDialogComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-add-user-dialog\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatDialogModule\n                            MatMenuModule\n                            CommonModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./add-user-dialog.component.html\n            \n\n\n\n            \n                styleUrl\n                ./add-user-dialog.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                addUser\n                            \n                            \n                                channelService\n                            \n                            \n                                firestore\n                            \n                            \n                                selectedUser\n                            \n                            \n                                    \n                                trigger\n                            \n                            \n                                userList\n                            \n                            \n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getMenu\n                            \n                            \n                                pushToSelection\n                            \n                            \n                                removeUserFromSelection\n                            \n                            \n                                searchUser\n                            \n                            \n                                    Async\n                                submitUser\n                            \n                            \n                                    Async\n                                updateChannelUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getMenu\n                        \n                    \n                \n            \n            \n                \ngetMenu()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:61\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushToSelection\n                        \n                    \n                \n            \n            \n                \npushToSelection(user: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:70\n                        \n                    \n\n\n            \n                \n                        The function pushToSelection adds a user object to the selectedUser array, clears the userList\narray, and resets the specificUser input field.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \ntakes an object as a parameter named user and pushes it into selectedUser.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeUserFromSelection\n                        \n                    \n                \n            \n            \n                \nremoveUserFromSelection(user: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:56\n                        \n                    \n\n\n            \n                \n                        The function removeUserFromSelection removes a specified user from the selectedUser array.\nwhich means it can accept any data type as its value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user parameter in the removeUserFromSelection function is of type any,\nwhich means it can accept any data type as its value.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchUser\n                        \n                    \n                \n            \n            \n                \nsearchUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:39\n                        \n                    \n\n\n            \n                \n                        The searchUser function filters a list of users based on a specific user input and populates a new\nlist with matching users' information.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        submitUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    submitUser(addedUser: NgForm)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                addedUser\n                                            \n                                                        NgForm\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateChannelUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateChannelUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:78\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        addUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    name: ''\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelService\n\n                    \n                \n                \n                    \n                        Default value : inject(ChannelService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firestore\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Firestore\n\n                    \n                \n                \n                    \n                        Default value : inject(Firestore)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        trigger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatMenuTrigger\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild(MatMenuTrigger)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Default value : inject(UserService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, ViewChild, inject } from '@angular/core';\nimport { FormsModule, NgForm } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { UserService } from '../../../shared/services/user.service';\nimport { MatMenuModule, MatMenuTrigger } from '@angular/material/menu';\nimport { Firestore, addDoc, arrayUnion, collection, doc, updateDoc } from '@angular/fire/firestore';\nimport { ChannelService } from '../../../shared/services/channel.service';\n\n@Component({\n  selector: 'app-add-user-dialog',\n  standalone: true,\n  imports: [MatDialogModule, MatMenuModule, CommonModule, FormsModule],\n  templateUrl: './add-user-dialog.component.html',\n  styleUrl: './add-user-dialog.component.scss',\n})\n\nexport class AddUserDialogComponent {\n  @ViewChild(MatMenuTrigger) trigger!: MatMenuTrigger;\n  userService: UserService = inject(UserService);\n  channelService: ChannelService = inject(ChannelService);\n  firestore: Firestore = inject(Firestore);\n  addUser = {\n    name: ''\n  }\n  userList: any[] = [];\n  selectedUser: any[] = [];\n\n  async submitUser(addedUser: NgForm) {\n    console.log(addedUser.name);\n    await this.updateChannelUsers();\n    addedUser.reset();\n  }\n\n  /**\n  * The `searchUser` function filters a list of users based on a specific user input and populates a new\n  * list with matching users' information.\n  */\n  searchUser() {\n    this.userList = [];\n    this.userService.allUsers.forEach(element => {\n      const name: string = element['name'];\n      const contains: boolean = name.toLocaleLowerCase().indexOf(this.addUser.name.toLocaleLowerCase()) != -1;\n      const checkUid = (obj: { id: any; }) => obj.id === element['id'];\n      if (contains && this.addUser.name != '' && !this.channelService.currentChannelUsers.some(checkUid)) {\n        this.userList.push({ user: name, uid: element['id'], img: element['profilePicture'] });\n      }\n    });\n  }\n\n  /**\n  * The function `removeUserFromSelection` removes a specified user from the `selectedUser` array.\n  * @param {any} user - The `user` parameter in the `removeUserFromSelection` function is of type `any`,\n  * which means it can accept any data type as its value.\n  */\n  removeUserFromSelection(user: any) {\n    const contains = this.selectedUser.indexOf(user);\n    this.selectedUser.splice(contains, 1);\n  }\n\n  getMenu() {\n    this.trigger.openMenu();\n  }\n\n  /**\n  * The function `pushToSelection` adds a user object to the selectedUser array, clears the userList\n  * array, and resets the specificUser input field.\n  * @param {object} user - takes an `object` as a parameter named `user` and pushes it into `selectedUser`.\n  */\n  pushToSelection(user: any) {\n    const checkUid = (obj: { uid: any; }) => obj.uid === user.uid;\n    if (!this.selectedUser.some(checkUid))\n      this.selectedUser.push(user);\n    this.userList = [];\n    this.addUser.name = ''\n  }\n\n  async updateChannelUsers() {\n    console.log(this.selectedUser);\n    this.selectedUser.forEach(async user => {\n      console.log(user);\n      await updateDoc(doc(this.firestore, \"Channels\", this.channelService.channelMsgData.collection), {\n        users: arrayUnion(user.uid)\n      });\n      await addDoc(collection(this.firestore, 'user', user.uid, 'userchannels'), { channelid: this.channelService.channelMsgData.collection });\n    });\n  }\n}\n\n    \n\n    \n        \n    \n    \n    \n        Leute hinzufügen\n    \n    \n        \n        Entwicklerteam\n    \n    \n        @for (user of selectedUser; track $index) {\n        \n            \n            {{user.user}}\n            \n        \n        }\n        \n    \n    \n        Min. 1 User erforderlich !\n    \n    \n        \n            Hinzfügen\n        \n    \n    \n        @if (userList.length != 0) {\n        \n            @for (user of userList; track $index) {\n            \n                \n                {{user.user}}\n            \n            }\n        \n        }\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    Leute hinzufügen                        Entwicklerteam                @for (user of selectedUser; track $index) {                                {{user.user}}                            }                        Min. 1 User erforderlich !                            Hinzfügen                        @if (userList.length != 0) {                    @for (user of userList; track $index) {                                            {{user.user}}                        }                }    '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'AddUserDialogComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AddUserToChannelDialogComponent.html":{"url":"components/AddUserToChannelDialogComponent.html","title":"component - AddUserToChannelDialogComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AddUserToChannelDialogComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-add-user-to-channel-dialog\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatDialogModule\n                            CommonModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./add-user-to-channel-dialog.component.html\n            \n\n\n\n            \n                styleUrl\n                ./add-user-to-channel-dialog.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addUser\n                            \n                            \n                                channelService\n                            \n                            \n                                    Public\n                                dialog\n                            \n                            \n                                    \n                                icon\n                            \n                            \n                                initialReferenceElementPosition\n                            \n                            \n                                stateEditChannelDialogOpenMobile\n                            \n                            \n                                stateService\n                            \n                            \n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getDmStatus\n                            \n                            \n                                    Async\n                                getOtherUserData\n                            \n                            \n                                openDialogAddUser\n                            \n                            \n                                    Async\n                                openDialogUserInfo\n                            \n                            \n                                refContainerPosition\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialog: MatDialog)\n                    \n                \n                        \n                            \n                                Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getDmStatus\n                        \n                    \n                \n            \n            \n                \ngetDmStatus(userIsLoggedIn: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userIsLoggedIn\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     \"online-div\" | \"offline-div\"\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOtherUserData\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOtherUserData(user: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openDialogAddUser\n                        \n                    \n                \n            \n            \n                \nopenDialogAddUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:58\n                        \n                    \n\n\n            \n                \n                        Opens dialog for adding user to channel over stateService\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        openDialogUserInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    openDialogUserInfo()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:38\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refContainerPosition\n                        \n                    \n                \n            \n            \n                \nrefContainerPosition()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('addUser', {read: ElementRef})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelService\n\n                    \n                \n                \n                    \n                        Default value : inject(ChannelService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatDialog\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('icon', {read: ElementRef})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initialReferenceElementPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stateEditChannelDialogOpenMobile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : this.stateService.getEditChannelDialogOpenMobile()\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stateService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StateService\n\n                    \n                \n                \n                    \n                        Default value : inject(StateService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Default value : inject(UserService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, ElementRef, ViewChild, inject } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { ChannelService } from '../../../shared/services/channel.service';\nimport { UserService } from '../../../shared/services/user.service';\nimport { StateService } from '../../../shared/services/state-service.service';\nimport { ShowProfileComponent } from '../../../shared/components/show-profile/show-profile.component';\n\n@Component({\n  selector: 'app-add-user-to-channel-dialog',\n  standalone: true,\n  imports: [MatDialogModule, CommonModule, FormsModule],\n  templateUrl: './add-user-to-channel-dialog.component.html',\n  styleUrl: './add-user-to-channel-dialog.component.scss'\n})\nexport class AddUserToChannelDialogComponent {\n  @ViewChild('addUser', { read: ElementRef }) addUser!: ElementRef;\n  @ViewChild('icon', { read: ElementRef }) icon!: ElementRef;\n  channelService: ChannelService = inject(ChannelService);\n  userService: UserService = inject(UserService);\n  stateService: StateService = inject(StateService);\n  initialReferenceElementPosition!: { top: number; left: number };\n  stateEditChannelDialogOpenMobile: boolean = this.stateService.getEditChannelDialogOpenMobile();\n  constructor(public dialog: MatDialog) {\n  }\n\n  getDmStatus(userIsLoggedIn: boolean) {\n    const loggedIn = userIsLoggedIn == true ? 'online-div' : 'offline-div';\n    return loggedIn;\n  }\n\n  async getOtherUserData(user: any) {\n    this.userService.otherUserInfo = user;\n    this.openDialogUserInfo();\n  }\n\n  async openDialogUserInfo() {\n    let dialogRef = this.dialog.open(ShowProfileComponent, { panelClass: ['show-profile-from-message', 'box-shadow', 'box-radius'] });\n    dialogRef.componentInstance.otherUser = true;\n    dialogRef.componentInstance.profileEditable = false;\n    dialogRef\n      .afterClosed()\n      .subscribe();\n  }\n\n  refContainerPosition() {\n    const referenceElement = this.addUser.nativeElement;\n    this.initialReferenceElementPosition = {\n      top: referenceElement.getBoundingClientRect().top,\n      left: referenceElement.getBoundingClientRect().right\n    };\n  }\n\n  /**\n   * Opens dialog for adding user to channel over stateService\n   */\n  openDialogAddUser() {\n    this.stateService.triggerAddUser();\n  }\n}\n\n\n    \n\n    \n        \n    \n    \n        Mitglieder\n    \n    \n         @for (user of channelService.currentChannelUsers; track $index) {\n            \n                \n                \n                \n                    {{user.name}}\n                    (Du)\n                \n            \n         }\n        \n            \n            Mitglieder hinzufügen\n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                Mitglieder                 @for (user of channelService.currentChannelUsers; track $index) {                                                                                {{user.name}}                    (Du)                                     }                                Mitglieder hinzufügen            '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'AddUserToChannelDialogComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            RouterOutlet\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n            \n                styleUrl\n                ./app.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                firestore\n                            \n                            \n                                title\n                            \n                            \n                                userService\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:17\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        firestore\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Firestore\n\n                    \n                \n                \n                    \n                        Default value : inject(Firestore)\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'da-bubble'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Default value : inject(UserService)\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterOutlet } from '@angular/router';\nimport { UserService } from './shared/services/user.service';\nimport { Firestore } from '@angular/fire/firestore';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [CommonModule, RouterOutlet],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n  title = 'da-bubble';\n  firestore: Firestore = inject(Firestore);\n  userService: UserService = inject(UserService);\n  constructor() { }\n}\n\n    \n\n    \n        \n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                firestore\n                            \n                            \n                                verified\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirmNewPassword\n                            \n                            \n                                    Async\n                                updateUserMail\n                            \n                            \n                                    Async\n                                verifyChange\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        confirmNewPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    confirmNewPassword(code: string, key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/auth.service.ts:47\n                        \n                    \n\n\n            \n                \n                        Update Password of the user who forogt his password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    string - oobCode of the url\n\n                                            \n                                        \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    string - changed password as a string\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUserMail\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserMail(mail: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/auth.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Update email of the user in firebase auth\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                mail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    string - prvoided email\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyChange\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyChange(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/auth.service.ts:20\n                        \n                    \n\n\n            \n                \n                        Function to login into firebase auth\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    string - key to login to firebase auth\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        firestore\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Firestore\n\n                    \n                \n                \n                    \n                        Default value : inject(Firestore)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/auth.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/auth.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, inject } from '@angular/core';\nimport { Firestore } from '@angular/fire/firestore';\nimport { User, getAuth, updateEmail } from \"firebase/auth\";\nimport { UserService } from './user.service';\nimport { confirmPasswordReset, signInWithEmailAndPassword } from '@angular/fire/auth';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  firestore: Firestore = inject(Firestore);\n  verified: boolean = false;\n\n  constructor(private userService: UserService) { }\n\n  /**\n   * Function to login into firebase auth\n   * @param key string - key to login to firebase auth\n   */\n  async verifyChange(key: string) {\n    const auth = getAuth();\n    console.log(this.userService.userInfo.email);\n    await signInWithEmailAndPassword(auth, this.userService.userInfo.email, key)\n      .then(() => {})\n      .catch((error) => {\n        console.error(error.code, error.message);\n      });\n  }\n\n  /**\n   * Update email of the user in firebase auth\n   * @param mail string - prvoided email\n   */\n  async updateUserMail(mail: string) {\n    const auth = getAuth();\n    updateEmail(auth.currentUser as User, mail).then(() => {})\n    .catch((error) => {\n      console.error(error);\n    });\n  }\n\n  /**\n   * Update Password of the user who forogt his password\n   * @param code string - oobCode of the url\n   * @param key string - changed password as a string\n   */\n  async confirmNewPassword(code: string, key: string) {\n    const auth = getAuth();\n    ;\n    await confirmPasswordReset(auth, code, key)\n      .then(() => {})\n      .catch((error) => {\n        console.error(error.code, '', error.message);\n      })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChannelData.html":{"url":"classes/ChannelData.html","title":"class - ChannelData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChannelData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/channels.class.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                collection\n                            \n                            \n                                description\n                            \n                            \n                                title\n                            \n                            \n                                users\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                setData\n                            \n                            \n                                    Public\n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(obj?: any)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/models/channels.class.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        obj\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        collection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/channels.class.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/channels.class.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/channels.class.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/channels.class.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setData\n                        \n                    \n                \n            \n            \n                \n                        \n                    setData(collection: string, description: string, title: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/models/channels.class.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                collection\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                description\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                title\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        toJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    toJson()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/models/channels.class.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { collection: string; description: string; title: string; users: {}; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class ChannelData {\n    collection: string;\n    description: string;\n    title: string;\n    users: string[];\n\n    constructor(obj?: any) {\n        this.collection = obj ? obj.collection : \"\";\n        this.description = obj ? obj.description : \"\";\n        this.title = obj ? obj.title : \"\";\n        this.users = obj ? obj.users : [];\n    }\n\n    public setData(collection: string, description: string, title: string) {\n        this.collection = collection;\n        this.description = description;\n        this.title = title;\n        this.users = [];\n    }\n\n    public toJson() {\n        return {\n            collection: this.collection,\n            description: this.description,\n            title: this.title,\n            users: this.users\n        };\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChannelInfo.html":{"url":"interfaces/ChannelInfo.html","title":"interface - ChannelInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChannelInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/channelinfo.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            collection\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            users\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        collection\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        collection:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        users\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        users:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ChannelInfo {\n    collection: string,\n    description: string,\n    title: string,\n    users: string[]\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChooseavatarComponent.html":{"url":"components/ChooseavatarComponent.html","title":"component - ChooseavatarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ChooseavatarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login/chooseavatar/chooseavatar.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-chooseavatar\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterLink\n                            CommonModule\n                                RegisterComponent\n                \n            \n\n            \n                styleUrls\n                ./chooseavatar.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./chooseavatar.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatars\n                            \n                            \n                                popupState\n                            \n                            \n                                selectedAvatar\n                            \n                            \n                                showLoading\n                            \n                            \n                                userName\n                            \n                            \n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delay\n                            \n                            \n                                    Async\n                                loadingScreen\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                refFile\n                            \n                            \n                                registerUser\n                            \n                            \n                                selectAvatar\n                            \n                            \n                                triggerFileInput\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(storageService: StorageService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/login/chooseavatar/chooseavatar.component.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        storageService\n                                                  \n                                                        \n                                                                        StorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delay\n                        \n                    \n                \n            \n            \n                \ndelay(ms: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/chooseavatar/chooseavatar.component.ts:107\n                        \n                    \n\n\n            \n                \n                        Creates a Promise that resolves after a specified delay.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ms\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe delay in milliseconds.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        loadingScreen\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadingScreen()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/chooseavatar/chooseavatar.component.ts:114\n                        \n                    \n\n\n            \n                \n                        Displays a loading screen for a specified duration and navigates to the home page.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/chooseavatar/chooseavatar.component.ts:50\n                        \n                    \n\n\n            \n                \n                        Initializes the component, setting the list of avatars and the user's name.\nCalled automatically by Angular on component initialization.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refFile\n                        \n                    \n                \n            \n            \n                \nrefFile(input: HTMLInputElement)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/chooseavatar/chooseavatar.component.ts:77\n                        \n                    \n\n\n            \n                \n                        Handles the event when a file is selected.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                input\n                                            \n                                                        HTMLInputElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe input element that triggered the file selection.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerUser\n                        \n                    \n                \n            \n            \n                \nregisterUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/chooseavatar/chooseavatar.component.ts:88\n                        \n                    \n\n\n            \n                \n                        Registers a new user.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectAvatar\n                        \n                    \n                \n            \n            \n                \nselectAvatar(avatar: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/chooseavatar/chooseavatar.component.ts:58\n                        \n                    \n\n\n            \n                \n                        Selects an avatar by setting the selectedAvatar property to the provided avatar.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                avatar\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe avatar to be selected.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        triggerFileInput\n                        \n                    \n                \n            \n            \n                \ntriggerFileInput()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/chooseavatar/chooseavatar.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Triggers the file input element to open the file selection dialog.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        avatars\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : this.storageService.avatars\n                    \n                \n                    \n                        \n                                Defined in src/app/login/chooseavatar/chooseavatar.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        popupState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'out'\n                    \n                \n                    \n                        \n                                Defined in src/app/login/chooseavatar/chooseavatar.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedAvatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '../../assets/img/login/default_profil_img.png'\n                    \n                \n                    \n                        \n                                Defined in src/app/login/chooseavatar/chooseavatar.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showLoading\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login/chooseavatar/chooseavatar.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/login/chooseavatar/chooseavatar.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Default value : inject(UserService)\n                    \n                \n                    \n                        \n                                Defined in src/app/login/chooseavatar/chooseavatar.component.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router, RouterLink } from '@angular/router';\nimport { StorageService } from '../../shared/services/storage.service';\nimport { UserService } from '../../shared/services/user.service';\nimport { User, sendEmailVerification, getAuth, createUserWithEmailAndPassword } from '@angular/fire/auth';\nimport { RegisterComponent } from '../register/register.component';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\n\n@Component({\n  selector: 'app-chooseavatar',\n  standalone: true,\n  imports: [RouterLink, CommonModule, RegisterComponent],\n  templateUrl: './chooseavatar.component.html',\n  styleUrls: ['./chooseavatar.component.scss'],\n  animations: [\n    trigger('slideInOut', [\n      state('in', style({\n        transform: 'translateX(0)',\n        opacity: '1'\n      })),\n      state('out', style({\n        transform: 'translateX(100%)' + 'rotate(-180deg)',\n        opacity: '0'\n      })),\n      transition('out => in', [\n        animate('0.3s ease-in-out')\n      ]),\n      transition('in => out', [\n        animate('0.3s ease-in-out')\n      ])\n    ])\n  ]\n})\n\nexport class ChooseavatarComponent implements OnInit {\n  selectedAvatar: string = '../../assets/img/login/default_profil_img.png';\n  popupState = 'out';\n  showLoading = false;\n  userName: string = '';\n  avatars: any = this.storageService.avatars;\n  userService: UserService = inject(UserService);\n\n  constructor(private storageService: StorageService, private router: Router) { }\n\n  /**\n   * Initializes the component, setting the list of avatars and the user's name.\n   * Called automatically by Angular on component initialization.\n   */\n  ngOnInit() {\n    this.userName = this.userService.createUserInfo.name;\n  }\n\n  /**\n   * Selects an avatar by setting the selectedAvatar property to the provided avatar.\n   * @param {string} avatar - The avatar to be selected.\n   */\n  selectAvatar(avatar: string) {\n    this.selectedAvatar = avatar;\n    this.storageService.files = {} as FileList;\n    this.userService.createUserInfo.profilePicture = this.selectedAvatar;\n  }\n\n  /**\n   * Triggers the file input element to open the file selection dialog.\n   */\n  triggerFileInput() {\n    const fileInput = document.querySelector('input[type=\"file\"]') as HTMLInputElement;\n    fileInput.click();\n    this.selectedAvatar;\n  }\n\n  /**\n   * Handles the event when a file is selected.\n   * @param {HTMLInputElement} input - The input element that triggered the file selection.\n   */\n  refFile(input: HTMLInputElement) {\n    this.storageService.onFileSelected(input);\n    const file = this.storageService.files?.item(0);\n    if (file) {\n      this.selectedAvatar = URL.createObjectURL(this.storageService.fileUrl);\n    }\n  }\n\n  /**\n   * Registers a new user.\n   */\n  registerUser() {\n    this.loadingScreen();\n    const auth = getAuth();\n    createUserWithEmailAndPassword(auth, this.userService.createUserInfo.email, this.userService.key)\n      .then(async (userCredential) => {\n        this.userService.createUserInfo.id = userCredential.user.uid;\n        await this.storageService.uploadFile(this.userService.createUserInfo.id);\n        /* await sendEmailVerification(auth.currentUser as User); */\n        await this.userService.createUserProfile();\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }\n\n  /**\n   * Creates a Promise that resolves after a specified delay.\n   * @param {number} ms - The delay in milliseconds.\n   */\n  delay(ms: number): Promise {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Displays a loading screen for a specified duration and navigates to the home page.\n   */\n  async loadingScreen() {\n    this.showLoading = true;\n    await this.delay(2500);\n    this.showLoading = false;\n    this.popupState = 'in';\n    await this.delay(1000);\n    this.popupState = 'out';\n    this.router.navigate(['/']);\n  }\n}\n\n    \n\n    \n        \n    \n        \n            \n            DaBubble\n        \n    \n    \n        \n        \n            Wähle deinen Avatar\n        \n        \n            \n        \n        {{userName}}\n        Aus der Liste wählen\n        \n            \n        \n        \n            eigenes Bild verwenden \n            Datei hochladen\n            \n        \n        \n            weiter\n        \n    \n    \n        Impressum\n        Datenschutz\n    \n    \n        \n            \n                \n                    \n                \n                \n                    \n                        \n                        \n                        \n                    \n                    \n                \n            \n            \n                \n                    \n                        \n                        \n                        \n                    \n                    \n                \n                \n                    \n                \n            \n        \n    \n    \n        Konto erfolgreich erstellt!\n    \n\n    \n\n    \n                \n                    ./chooseavatar.component.scss\n                \n                @import \"../../../styles.scss\";\n@import \"../login.component.scss\";\n\nmain {\n    padding: 40px 67px;\n\n    h3 {\n        font-size: 2rem;\n        font-weight: 700;\n    }\n}\n\n.login-btns {\n    @include dFlex($jc: end);\n    margin-top: 24px;\n}\n\n.title {\n    margin: 0;\n}\n\nspan {\n    @include dFlex($jc: start);\n    margin: 16px 0;\n    font-size: 1.1875rem;\n}\n\n.avatar {\n    text-align: center;\n    margin-bottom: 20px;\n    border-radius: 50%;\n    width: 168px;\n    height: 168px;\n    img {\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n        object-position: center;\n    }\n}\n\n.avatar-list {\n    @include dFlex($jc: space-between, $ai: center);\n    flex-wrap: wrap;\n    width: 100%;\n    height: 72px;\n    img {\n        height: 64px;\n        border-radius: 50%;\n        border: 4px solid transparent;\n        cursor: pointer;\n        &:hover {\n            border-color: #e6e6e6;\n            scale: 1.1;\n        }\n        &.selected {\n            border-color: $green;\n        }\n    }\n}\n\n.upload {\n    @include dFlex($ai: center);\n    width: 100%;\n    gap: 24px;\n    margin-top: 32px;\n    span {\n        width: max-content;\n    }\n    button {\n        background-color: $white;\n        color: $purple1;\n        border: 1px solid $purple1;\n        &:hover {\n            background-color: $purple1;\n            color: $white;\n        }\n    }\n}\n\n.loading-spinner {\n    position: absolute;\n    @include dFlex($ai: center, $jc: center);\n    z-index: 2;\n    width: 100%;\n    height: 100%;\n    background-color: #444df2ce;\n}\n\n.spinner {\n    @include dFlex($ai: center, $jc: center);\n    flex-direction: column;\n    gap: 10px;\n    width: 186px;\n    height: 184px;\n}\n\n.spinner-top {\n    @include dFlex($ai: end, $jc: center);\n    gap: 10px;\n}\n\n.spinner-bottom {\n    @include dFlex($ai: start);\n    gap: 10px;\n}\n\n.img-with-dots {\n    position: relative;\n    @include dFlex($ai: center, $jc: center);\n    gap: 10px;\n    img {\n        animation: scaleAnimationImg 1.4s infinite;\n    }\n}\n\n.dots {\n    position: absolute;\n    @include dFlex($ai: center, $jc: center);\n    gap: 10px;\n    z-index: 1;\n    img {\n        animation: scaleAnimationDots 1.4s infinite;\n    }\n}\n\n.blub {\n    width: 58px;\n    height: 57px;\n    img {\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n        object-position: center;\n        animation: scaleAnimationBlub 1.4s infinite;\n    }\n}\n\n@keyframes scaleAnimationDots {\n    0%,\n    100% {\n        transform: scale(1);\n    }\n    25% {\n        transform: scale(1.1);\n    }\n    50% {\n        transform: scale(0.8);\n    }\n    75% {\n        transform: scale(1.2);\n    }\n}\n\n@keyframes scaleAnimationImg {\n    0%,\n    100% {\n        transform: scale(1);\n    }\n    25% {\n        transform: scale(0.8);\n    }\n    50% {\n        transform: scale(1.1);\n    }\n    75% {\n        transform: scale(0.8);\n    }\n}\n\n@keyframes scaleAnimationBlub {\n    0%,\n    100% {\n        transform: scale(1);\n    }\n    25% {\n        transform: scale(1.1);\n    }\n    50% {\n        transform: scale(0.8);\n    }\n    75% {\n        transform: scale(1.1);\n    }\n}\n\n@media screen and (orientation: landscape) and (max-width: 1181px) {\n    main {\n        div {\n            h1 {\n                font-size: 2rem;\n            }\n        }\n    }\n\n    h3 {\n        font-size: 1.125rem;\n    }\n\n    span {\n        margin: 0 0 12px;\n    }\n\n    .avatar {\n        width: 100px;\n        height: 100px;\n    }\n\n    .login-btns {\n        margin: 0 0 8px;\n    }\n}\n\n@media screen and (max-width: 768px) {\n    .avatar {\n        width: 120px;\n        height: 120px;\n    }\n\n    .avatar-list {\n        justify-content: space-around;\n        img {\n            height: 60px;\n            width: 60px;\n        }\n    }\n\n    main {\n        h3 {\n            font-size: 1.25rem;\n        }\n    }\n\n    span {\n        font-size: 1.125rem;\n        margin: 12px 0;\n    }\n}\n\n@media screen and (max-width: 480px) {\n    .title {\n        h1 {\n            padding: 0 0 0 36px;\n        }\n    }\n\n    .login-btns {\n        margin: 16px 0;\n    }\n}\n\n@media screen and (max-width: 422px) {\n    .upload {\n        margin-top: 46px;\n        gap: 8px;\n    }\n\n    .avatar {\n        width: 100px;\n        height: 100px;\n    }\n\n    .avatar-list {\n        img {\n            height: 56px;\n        }\n    }\n\n    .login-btns {\n        margin: 12px 0 0 0;\n    }\n\n    span {\n        font-size: 1rem;\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                    DaBubble                                            Wähle deinen Avatar                                            {{userName}}        Aus der Liste wählen                                                eigenes Bild verwenden             Datei hochladen                                        weiter                        Impressum        Datenschutzonto erfolgreich erstellt!    '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChooseavatarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ConfirmpasswordComponent.html":{"url":"components/ConfirmpasswordComponent.html","title":"component - ConfirmpasswordComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ConfirmpasswordComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login/confirmpassword/confirmpassword.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-confirmpassword\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            RouterLink\n                            ReactiveFormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./confirmpassword.component.html\n            \n\n\n\n            \n                styleUrl\n                ./confirmpassword.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authService\n                            \n                            \n                                    Optional\n                                code\n                            \n                            \n                                isDisabled\n                            \n                            \n                                key\n                            \n                            \n                                keyForm\n                            \n                            \n                                params\n                            \n                            \n                                popupState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                compareFormControl\n                            \n                            \n                                    Async\n                                confirmPassword\n                            \n                            \n                                mustMatch\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                popUpDisplay\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/login/confirmpassword/confirmpassword.component.ts:42\n                            \n                        \n\n                \n                    \n                            Initializes a new instance of the class with the given Router.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Router instance to use for navigation.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        compareFormControl\n                        \n                    \n                \n            \n            \n                \ncompareFormControl()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/confirmpassword/confirmpassword.component.ts:82\n                        \n                    \n\n\n            \n                \n                        Compares the values of the 'key' and 'repeatedKey' form controls and sets the 'isDisabled' property accordingly.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        confirmPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    confirmPassword()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/confirmpassword/confirmpassword.component.ts:73\n                        \n                    \n\n\n            \n                \n                        Confirms the password by retrieving the value from the 'key' form control,\nand then calls the confirmNewPassword method of the authService with the\nretrieved value and the code value. Finally, calls the popUpDisplay method.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mustMatch\n                        \n                    \n                \n            \n            \n                \nmustMatch(controlName: string, matchingControlName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/confirmpassword/confirmpassword.component.ts:105\n                        \n                    \n\n\n            \n                \n                        Validator function to check if two form controls have the same value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                controlName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe first form control.\n\n\n                                            \n                                        \n                                        \n                                                matchingControlName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe second form control.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                A validator that returns null if values match, or an error object if they don't.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/confirmpassword/confirmpassword.component.ts:59\n                        \n                    \n\n\n            \n                \n                        Initializes the form with 'key' and 'repeatedKey' fields.\nValidates 'repeatedKey' against 'key' using the 'mustMatch' validator.\nCalls 'compareFormControl' on 'repeatedKey' value changes.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        popUpDisplay\n                        \n                    \n                \n            \n            \n                \npopUpDisplay()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/confirmpassword/confirmpassword.component.ts:91\n                        \n                    \n\n\n            \n                \n                        Displays a popup for a short duration and then navigates to the root route.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthService\n\n                    \n                \n                \n                    \n                        Default value : inject(AuthService)\n                    \n                \n                    \n                        \n                                Defined in src/app/login/confirmpassword/confirmpassword.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                    \n                        \n                                Defined in src/app/login/confirmpassword/confirmpassword.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDisabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/login/confirmpassword/confirmpassword.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                    \n                        \n                                Defined in src/app/login/confirmpassword/confirmpassword.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keyForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/login/confirmpassword/confirmpassword.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        params\n                        \n                    \n                \n            \n                \n                    \n                        Type :     URLSearchParams\n\n                    \n                \n                    \n                        \n                                Defined in src/app/login/confirmpassword/confirmpassword.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        popupState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'out'\n                    \n                \n                    \n                        \n                                Defined in src/app/login/confirmpassword/confirmpassword.component.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport { RouterLink, Router } from '@angular/router';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { confirmPasswordReset, getAuth, updatePassword } from '@angular/fire/auth';\nimport { FormGroup, FormControl, ReactiveFormsModule, Validators, ValidatorFn, AbstractControl, ValidationErrors } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { AuthService } from '../../shared/services/auth.service';\n\n@Component({\n  selector: 'app-confirmpassword',\n  standalone: true,\n  imports: [CommonModule, RouterLink, ReactiveFormsModule],\n  templateUrl: './confirmpassword.component.html',\n  styleUrl: './confirmpassword.component.scss',\n  animations: [\n    trigger('slideInOut', [\n      state('in', style({\n        transform: 'translateX(0)',\n        opacity: '1'\n      })),\n      state('out', style({\n        transform: 'translateX(100%)' + 'rotate(180deg)',\n        opacity: '0'\n      })),\n      transition('out => in', [\n        animate('0.3s ease-in-out')\n      ]),\n      transition('in => out', [\n        animate('0.3s ease-in-out')\n      ])\n    ])\n  ]\n})\n\nexport class ConfirmpasswordComponent {\n  authService: AuthService = inject(AuthService);\n  popupState = 'out';\n  params!: URLSearchParams;\n  code?: string | null;\n  keyForm!: FormGroup;\n  key!: string | null;\n  isDisabled: boolean = true;\n\n  /**\n   * Initializes a new instance of the class with the given Router.\n   * @param {Router} router - The Router instance to use for navigation.\n   */\n  constructor(private router: Router) {\n    this.params = new URLSearchParams(window.location.search);\n    this.code = this.params.get('oobCode');\n    console.log(this.code);\n  }\n\n  /**\n   * Initializes the form with 'key' and 'repeatedKey' fields.\n   * Validates 'repeatedKey' against 'key' using the 'mustMatch' validator.\n   * Calls 'compareFormControl' on 'repeatedKey' value changes.\n   */\n  ngOnInit() {\n    this.keyForm = new FormGroup({\n      key: new FormControl(''),\n      repeatedKey: new FormControl('')\n    }, { validators: this.mustMatch('key', 'repeatedKey') });\n    this.keyForm.controls['repeatedKey'].valueChanges\n      .subscribe(() => { this.compareFormControl() })\n  }\n\n  /**\n   * Confirms the password by retrieving the value from the 'key' form control,\n   * and then calls the `confirmNewPassword` method of the `authService` with the\n   * retrieved value and the `code` value. Finally, calls the `popUpDisplay` method.\n   */\n  async confirmPassword() {\n    this.key = this.keyForm.controls['key'].value;\n    await this.authService.confirmNewPassword(this.code as string, this.key as string);\n    this.popUpDisplay();\n  }\n\n  /**\n   * Compares the values of the 'key' and 'repeatedKey' form controls and sets the 'isDisabled' property accordingly.\n   */\n  compareFormControl() {\n    const key1 = this.keyForm.controls['key'].value\n    const key2 = this.keyForm.controls['repeatedKey'].value\n    key1 === key2 ? this.isDisabled = false : this.isDisabled = true\n  }\n\n  /**\n   * Displays a popup for a short duration and then navigates to the root route.\n   */\n  popUpDisplay() {\n    this.popupState = 'in';\n    setTimeout(() => {\n      this.popupState = 'out';\n      this.router.navigate(['/']);\n    }, 1000);\n  }\n\n  /**\n   * Validator function to check if two form controls have the same value.\n   * @param {string} controlName - The first form control.\n   * @param {string} matchingControlName - The second form control.\n   * @return {ValidatorFn} A validator that returns null if values match, or an error object if they don't.\n   */\n  mustMatch(controlName: string, matchingControlName: string): ValidatorFn {\n    return (formGroup: AbstractControl): ValidationErrors | null => {\n      const control = formGroup.get(controlName);\n      const matchingControl = formGroup.get(matchingControlName);\n      if (!control || !matchingControl)\n        return null;\n      if (matchingControl.errors && !matchingControl.errors['mustMatch'])\n        return null;\n      if (control.value !== matchingControl.value) {\n        matchingControl.setErrors({ mustMatch: true });\n      } else {\n        matchingControl.setErrors(null);\n      }\n      return null;\n    };\n  }\n}\n\n\n\n    \n\n    \n        \n    \n        \n            \n            DaBubble\n        \n    \n    \n        \n        \n            Passwort zurücksetzen\n        \n        \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n        \n        \n            Passwort ändern\n        \n    \n    \n        Impressum\n        Datenschutz\n    \n    \n        Anmelden\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                    DaBubble                                            Passwort zurücksetzen                                                                                                                                                                                                    Passwort ändern                        Impressum        Datenschutz                Anmelden    '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'ConfirmpasswordComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/EditChannelDialogComponent.html":{"url":"components/EditChannelDialogComponent.html","title":"component - EditChannelDialogComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  EditChannelDialogComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-edit-channel-dialog\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatDialogModule\n                            CommonModule\n                            FormsModule\n                                AddUserToChannelDialogComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./edit-channel-dialog.component.html\n            \n\n\n\n            \n                styleUrl\n                ./edit-channel-dialog.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelNameExists\n                            \n                            \n                                channelService\n                            \n                            \n                                editChannelName\n                            \n                            \n                                editDescription\n                            \n                            \n                                firestore\n                            \n                            \n                                newChannelValues\n                            \n                            \n                                sidebarService\n                            \n                            \n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeEditChannelStatus\n                            \n                            \n                                changeEditDescriptionStatus\n                            \n                            \n                                    Async\n                                leaveChannel\n                            \n                            \n                                    Async\n                                saveEditChannelStatus\n                            \n                            \n                                    Async\n                                saveEditDescriptionStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changeEditChannelStatus\n                        \n                    \n                \n            \n            \n                \nchangeEditChannelStatus()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:36\n                        \n                    \n\n\n            \n                \n                        The function changeEditChannelStatus updates the name of a channel and sets a flag to indicate\nthat the channel name is being edited.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        changeEditDescriptionStatus\n                        \n                    \n                \n            \n            \n                \nchangeEditDescriptionStatus()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:72\n                        \n                    \n\n\n            \n                \n                        The function changeEditDescriptionStatus sets the newDescription property to the current channel\ndescription and sets editDescription to true.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        leaveChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    leaveChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:91\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveEditChannelStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveEditChannelStatus(channelName: NgForm)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:46\n                        \n                    \n\n\n            \n                \n                        The function saveEditChannelStatus updates a channel title and resets the form.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                        NgForm\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThis parameter is used to access and manipulate the form data within the function.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveEditDescriptionStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveEditDescriptionStatus(changedDescription: NgForm)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:83\n                        \n                    \n\n\n            \n                \n                        The function saveEditDescriptionStatus updates a channel description and resets the form.\nafter updating the channel description.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                changedDescription\n                                            \n                                                        NgForm\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIn this function, it is being used to reset the form\nafter updating the channel description.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelNameExists\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelService\n\n                    \n                \n                \n                    \n                        Default value : inject(ChannelService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editChannelName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firestore\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Firestore\n\n                    \n                \n                \n                    \n                        Default value : inject(Firestore)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newChannelValues\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    'name': '',\n    'newDescription': ''\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sidebarService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SidebarService\n\n                    \n                \n                \n                    \n                        Default value : inject(SidebarService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Default value : inject(UserService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, inject } from '@angular/core';\nimport { FormsModule, NgForm } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { AddUserToChannelDialogComponent } from '../add-user-to-channel-dialog/add-user-to-channel-dialog.component';\nimport { ChannelService } from '../../../shared/services/channel.service';\nimport { UserService } from '../../../shared/services/user.service';\nimport { Firestore, arrayRemove, deleteDoc, doc, getDocs, query, updateDoc } from '@angular/fire/firestore';\nimport { SidebarService } from '../../../shared/services/sidebar.service';\n\n@Component({\n  selector: 'app-edit-channel-dialog',\n  standalone: true,\n  imports: [MatDialogModule, CommonModule, FormsModule, AddUserToChannelDialogComponent],\n  templateUrl: './edit-channel-dialog.component.html',\n  styleUrl: './edit-channel-dialog.component.scss'\n})\nexport class EditChannelDialogComponent {\n  channelService: ChannelService = inject(ChannelService);\n  userService: UserService = inject(UserService);\n  sidebarService:SidebarService = inject(SidebarService);\n  firestore: Firestore = inject(Firestore);\n  editChannelName: boolean = false;\n  editDescription: boolean = false;\n  channelNameExists:boolean = false;\n\n  newChannelValues = {\n    'name': '',\n    'newDescription': ''\n  }\n\n  /**\n   * The function `changeEditChannelStatus` updates the name of a channel and sets a flag to indicate\n   * that the channel name is being edited.\n   */\n  changeEditChannelStatus() {\n    this.newChannelValues.name = this.channelService.channelMsgData.title;\n    this.editChannelName = true;\n  }\n\n\n  /**\n   * The function `saveEditChannelStatus` updates a channel title and resets the form.\n   * @param {NgForm} channelName - This parameter is used to access and manipulate the form data within the function.\n   */\n  async saveEditChannelStatus(channelName: NgForm) {\n    try {\n      this.sidebarService.channels.forEach(() => {\n        const checkTitle = (obj: { title: any; }) => obj.title === this.newChannelValues.name;\n        if (this.sidebarService.channels.some(checkTitle) || this.newChannelValues.name.length == 0) {\n          throw new Error('Titel schon vorhanden !')\n        }\n      });\n    } catch (error) {\n      console.log(error);\n      channelName.reset();\n      this.channelNameExists = true;\n      return\n    }\n    this.editChannelName = false;\n    await this.channelService.updateChannelTitle(this.newChannelValues.name);\n    console.log(this.newChannelValues.name);\n    this.channelNameExists = false;\n    channelName.reset();\n  }\n\n\n  /**\n   * The function `changeEditDescriptionStatus` sets the `newDescription` property to the current channel\n   * description and sets `editDescription` to true.\n   */\n  changeEditDescriptionStatus() {\n    this.newChannelValues.newDescription = this.channelService.channelMsgData.description;\n    this.editDescription = true;\n  }\n\n\n  /**\n   * The function `saveEditDescriptionStatus` updates a channel description and resets the form.\n   * @param {NgForm} changedDescription -  In this function, it is being used to reset the form\n   * after updating the channel description.\n   */\n  async saveEditDescriptionStatus(changedDescription: NgForm) {\n    this.editDescription = false;\n    await this.channelService.updateChannelDescription(this.newChannelValues.newDescription);\n    console.log(this.newChannelValues.newDescription);\n    changedDescription.reset();\n  }\n\n\n  async leaveChannel() {\n    await updateDoc(doc(this.firestore, \"Channels\", this.channelService.channelMsgData.collection), {\n      users: arrayRemove(this.userService.currentUser)\n    });\n    const querySnapshot = await getDocs(query(this.userService.refUserChannels()));\n    querySnapshot.forEach(async (dataset) => {\n      if (dataset.data()['channelid'] === this.channelService.channelMsgData.collection ) {\n        await deleteDoc(doc(this.firestore, \"user\", this.userService.currentUser!, 'userchannels', dataset.id));\n      }\n    });\n    this.channelService.resetMessageType();\n  }\n\n}\n\n    \n\n    \n        \n    \n    \n        # {{channelService.channelMsgData.title}}\n    \n    \n        \n            Channel-Name\n            Bearbeiten\n            Speichern\n        \n        \n            \n                \n                {{channelService.channelMsgData.title}}\n                \n                    \n                \n            \n            \n                Dieser Channelname ist zu kurz oder existiert schon, bitte wähle einen anderen !\n            \n        \n\n    \n    \n        \n            Beschreibung\n            Bearbeiten\n            Speichern\n        \n        \n            {{channelService.channelMsgData.description}}\n            \n                \n            \n            \n            \n                 Erstellt von\n                \n                     {{channelService.channelMsgData.creator}}\n                \n            \n        \n    \n    \n    \n    \n    \n        \n            Channel verlassen\n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                # {{channelService.channelMsgData.title}}                            Channel-Name            Bearbeiten            Speichern                                                            {{channelService.channelMsgData.title}}                                                                                            Dieser Channelname ist zu kurz oder existiert schon, bitte wähle einen anderen !                                                Beschreibung            Bearbeiten            Speichern                            {{channelService.channelMsgData.description}}                                                                                 Erstellt von                                     {{channelService.channelMsgData.creator}}                                                                            Channel verlassen            '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'EditChannelDialogComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HeaderComponent.html":{"url":"components/HeaderComponent.html","title":"component - HeaderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HeaderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/header/header.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-header\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            MatMenuModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./header.component.html\n            \n\n\n\n            \n                styleUrl\n                ./header.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelService\n                            \n                            \n                                    Public\n                                dialog\n                            \n                            \n                                    \n                                headlineDesktop\n                            \n                            \n                                    \n                                headlineMobile\n                            \n                            \n                                messageList\n                            \n                            \n                                searchMsg\n                            \n                            \n                                sidebarService\n                            \n                            \n                                    \n                                trigger\n                            \n                            \n                                userList\n                            \n                            \n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getMenu\n                            \n                            \n                                getUserStatus\n                            \n                            \n                                goBack\n                            \n                            \n                                openDialog\n                            \n                            \n                                scrollToMessage\n                            \n                            \n                                searchMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialog: MatDialog, mainsectionComponent: MainsectionComponent)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/components/header/header.component.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mainsectionComponent\n                                                  \n                                                        \n                                                                        MainsectionComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getMenu\n                        \n                    \n                \n            \n            \n                \ngetMenu()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/header/header.component.ts:91\n                        \n                    \n\n\n            \n                \n                        The getMenu function opens the menu by triggering the openMenu method.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserStatus\n                        \n                    \n                \n            \n            \n                \ngetUserStatus()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/header/header.component.ts:58\n                        \n                    \n\n\n            \n                \n                        Function returns the class of user status for online indicator div\n\n\n                        \n                            Returns :     \"online-div\" | \"offline-div\"\n\n                        \n                            \n                                class as a string\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        goBack\n                        \n                    \n                \n            \n            \n                \ngoBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/header/header.component.ts:67\n                        \n                    \n\n\n            \n                \n                        The goBack function shows the side navigation, displays the headline on desktop, and hides the\nheadline on mobile.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openDialog\n                        \n                    \n                \n            \n            \n                \nopenDialog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/header/header.component.ts:47\n                        \n                    \n\n\n            \n                \n                        The openDialog function opens a dialog box for the UserMenuDialogComponent at a specific position\nand subscribes to the afterClosed event.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scrollToMessage\n                        \n                    \n                \n            \n            \n                \nscrollToMessage(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/header/header.component.ts:80\n                        \n                    \n\n\n            \n                \n                        The scrollToMessage function scrolls the message container to a specific message based on its index.\nwant to scroll to in the message container.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index parameter represents the index of the message you\nwant to scroll to in the message container.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchMessage\n                        \n                    \n                \n            \n            \n                \nsearchMessage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/header/header.component.ts:99\n                        \n                    \n\n\n            \n                \n                        The searchMessage function filters messages based on a search term and populates a list with\nmatching messages.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelService\n\n                    \n                \n                \n                    \n                        Default value : inject(ChannelService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/header.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatDialog\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/header.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        headlineDesktop\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('headlineDesktop', {static: true, read: ElementRef})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/header.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        headlineMobile\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('headlineMobile', {static: true, read: ElementRef})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/header.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messageList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/header.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchMsg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    msg: ''\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/header.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sidebarService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SidebarService\n\n                    \n                \n                \n                    \n                        Default value : inject(SidebarService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/header.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        trigger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatMenuTrigger\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild(MatMenuTrigger)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/header.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/header.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Default value : inject(UserService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/header.component.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject, ViewChild, ElementRef } from '@angular/core';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogTitle,\n  MatDialogContent,\n} from '@angular/material/dialog';\nimport { MatMenuModule, MatMenuTrigger } from '@angular/material/menu';\nimport { UserMenuDialogComponent } from './user-menu-dialog/user-menu-dialog.component';\nimport { UserService } from '../../services/user.service';\nimport { CommonModule } from '@angular/common';\nimport { MainsectionComponent } from '../../../mainsection/mainsection.component';\nimport { SidebarComponent } from '../../../mainsection/sidebar/sidebar.component';\nimport { SidebarService } from '../../services/sidebar.service';\nimport { ChannelService } from '../../services/channel.service';\nimport { FormsModule, NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'app-header',\n  standalone: true,\n  imports: [CommonModule, MatMenuModule, FormsModule],\n  templateUrl: './header.component.html',\n  styleUrl: './header.component.scss'\n})\n\nexport class HeaderComponent {\n  @ViewChild(MatMenuTrigger) trigger!: MatMenuTrigger;\n  userService: UserService = inject(UserService);\n  sidebarService: SidebarService = inject(SidebarService);\n  channelService: ChannelService = inject(ChannelService);\n  userList: any[] = [];\n  messageList: any[] = [];\n  searchMsg = {\n    msg: ''\n  };\n  @ViewChild('headlineMobile', { static: true, read: ElementRef }) headlineMobile!: ElementRef;\n  @ViewChild('headlineDesktop', { static: true, read: ElementRef }) headlineDesktop!: ElementRef;\n\n  constructor(public dialog: MatDialog, private mainsectionComponent: MainsectionComponent) { }\n\n  /**\n   * The `openDialog` function opens a dialog box for the UserMenuDialogComponent at a specific position\n   * and subscribes to the afterClosed event.\n   */\n  openDialog() {\n    this.dialog.open(UserMenuDialogComponent, { panelClass: ['user-menu', 'box-shadow', 'box-radius-right-corner'] })\n      .afterClosed()\n      .subscribe();\n  }\n\n  /**\n   * Function returns the class of user status for online indicator div\n   * @param type string - to determine which value should be returned\n   * @returns class as a string\n   */\n  getUserStatus() {\n    const loggedIn = this.userService.userInfo.isLoggedIn == true ? \"online-div\" : \"offline-div\";\n    return loggedIn\n  }\n\n  /**\n   * The `goBack` function shows the side navigation, displays the headline on desktop, and hides the\n   * headline on mobile.\n   */\n  goBack() {\n    this.mainsectionComponent.showSidenav();\n    this.mainsectionComponent.toggleElement.nativeElement.classList.remove('rotate-toggle');\n    this.mainsectionComponent.rotateToggle = false;\n    this.headlineDesktop.nativeElement.style.display = 'block';\n    this.headlineMobile.nativeElement.style.display = 'none';\n  }\n\n  /**\n   * The scrollToMessage function scrolls the message container to a specific message based on its index.\n   * @param {number} index - The `index` parameter represents the index of the message you\n   * want to scroll to in the message container.\n   */\n  scrollToMessage(index: number) {\n    const msgElement = document.getElementById('singleMessage-' + index);\n    const topPos = msgElement!.offsetTop;\n    document.getElementById('messageContainer')!.scrollTo({ top: topPos, behavior: 'smooth' });\n    this.searchMsg.msg = '';\n    this.messageList = [];\n  }\n\n  /**\n   * The `getMenu` function opens the menu by triggering the `openMenu` method.\n   */\n  getMenu() {\n    this.trigger.openMenu();\n  }\n\n  /**\n   * The `searchMessage` function filters messages based on a search term and populates a list with\n   * matching messages.\n   */\n  searchMessage() {\n    this.messageList = [];\n    this.channelService.messages.forEach((element, i) => {\n      const message: string = element['message'];\n      const contains: boolean = message.toLocaleLowerCase().indexOf(this.searchMsg.msg.toLocaleLowerCase()) != -1;\n      element.index = i;\n      if (contains && this.searchMsg.msg != '') {\n        this.messageList.push(element);\n      }\n    });\n  }\n}\n\n    \n\n    \n        \n    \n        \n            \n        \n        \n            \n        \n         Devspace \n    \n    \n        \n    \n    \n        \n            \n            \n        \n        \n            @if (messageList.length!= 0) {\n            \n                Nachrichten:\n                @for (message of messageList; track message.name; let i = $index) {\n                \n                    \n                    \n                        {{message.name}}\n                        Nachricht: {{(message.message).substring(0,15)}}...\n                    \n                \n                }\n            \n            }\n        \n    \n    \n        {{userService.userInfo.name}}\n        \n            \n            \n        \n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                     Devspace                                                                                     @if (messageList.length!= 0) {                            Nachrichten:                @for (message of messageList; track message.name; let i = $index) {                                                                                {{message.name}}                        Nachricht: {{(message.message).substring(0,15)}}...                                                    }                        }                        {{userService.userInfo.name}}                                                    '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'HeaderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ImprintComponent.html":{"url":"components/ImprintComponent.html","title":"component - ImprintComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ImprintComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/imprint/imprint.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-imprint\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterLink\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./imprint.component.html\n            \n\n\n\n            \n                styleUrl\n                ./imprint.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterLink } from '@angular/router';\n\n@Component({\n  selector: 'app-imprint',\n  standalone: true,\n  imports: [RouterLink],\n  templateUrl: './imprint.component.html',\n  styleUrl: './imprint.component.scss'\n})\nexport class ImprintComponent { }\n\n    \n\n    \n        \n    \n        \n            \n            DaBubble\n        \n    \n    \n        \n        Impressum\n        \n            Vorname Nachname\n            Straße, Hausnummer\n            Postleitzahl, Stadt\n            Land\n        \n        Kontakt\n        \n            E-Mail: `email adresse`\n            Telefon: `000000000`\n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                    DaBubble                                Impressum                    Vorname Nachname            Straße, Hausnummer            Postleitzahl, Stadt            Land                Kontakt                    E-Mail: `email adresse`            Telefon: `000000000`            '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'ImprintComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MainsectionComponent.html":{"url":"components/MainsectionComponent.html","title":"component - MainsectionComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MainsectionComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mainsection/mainsection.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-mainsection\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                                HeaderComponent\n                                SidebarComponent\n                                ChannelComponent\n                                ThreadComponent\n                                HeaderComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./mainsection.component.html\n            \n\n\n\n            \n                styleUrl\n                ./mainsection.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                changeDetector\n                            \n                            \n                                    \n                                channelElement\n                            \n                            \n                                    \n                                headerComponent\n                            \n                            \n                                    Private\n                                hideThreadSubscription\n                            \n                            \n                                    \n                                overlayElement\n                            \n                            \n                                resizeListenerService\n                            \n                            \n                                rotateToggle\n                            \n                            \n                                    \n                                sidebarElement\n                            \n                            \n                                sidenavOpen\n                            \n                            \n                                    \n                                threadBarElement\n                            \n                            \n                                threadOpen\n                            \n                            \n                                threadService\n                            \n                            \n                                    \n                                toggleElement\n                            \n                            \n                                unsubProfile\n                            \n                            \n                                unsubUserChannels\n                            \n                            \n                                unsubUserList\n                            \n                            \n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeSides\n                            \n                            \n                                displayHeadlineMobile\n                            \n                            \n                                getToggleText\n                            \n                            \n                                hanldeCloseMobile\n                            \n                            \n                                hideSidenav\n                            \n                            \n                                hideThread\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onResize\n                            \n                            \n                                rotateIndicator\n                            \n                            \n                                showSidenav\n                            \n                            \n                                showThread\n                            \n                            \n                                sidesStatus\n                            \n                            \n                                updateOverlayDisplay\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/mainsection/mainsection.component.ts:37\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeSides\n                        \n                    \n                \n            \n            \n                \ncloseSides()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:200\n                        \n                    \n\n\n            \n                \n                        Toggles between hiding the side navigation menu and showing the thread based on the state of 'rotateToggle'.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        displayHeadlineMobile\n                        \n                    \n                \n            \n            \n                \ndisplayHeadlineMobile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:185\n                        \n                    \n\n\n            \n                \n                        Toggles the display of the mobile headline and desktop headline based on screen size and sidenav state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getToggleText\n                        \n                    \n                \n            \n            \n                \ngetToggleText()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:224\n                        \n                    \n\n\n            \n                \n                        A function that returns the text 'schließen' if 'sidenavOpen' is true, otherwise returns 'öffnen'.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The text 'schließen' or 'öffnen'\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hanldeCloseMobile\n                        \n                    \n                \n            \n            \n                \nhanldeCloseMobile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:213\n                        \n                    \n\n\n            \n                \n                        A function that handles the closing of the mobile view by executing various actions.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hideSidenav\n                        \n                    \n                \n            \n            \n                \nhideSidenav()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:165\n                        \n                    \n\n\n            \n                \n                        Adds the 'hide-show' class to the thread bar element (app-sidebar) to hide the thread.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hideThread\n                        \n                    \n                \n            \n            \n                \nhideThread()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:175\n                        \n                    \n\n\n            \n                \n                        Adds the 'hide-show' class to the thread bar element (app-thread) to hide the thread.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:71\n                        \n                    \n\n\n            \n                \n                        Initializes the component after the view has been initialized.\nAdds the 'margin-right' class to the sidebar element to make it appear on the right side.\nChecks the current screen size and the states of the sidenav and thread, and hides the sidenav and rotates the toggle element if necessary.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:231\n                        \n                    \n\n\n            \n                \n                        Executes cleanup actions when the component is destroyed.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onResize\n                        \n                    \n                \n            \n            \n                \nonResize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:58\n                        \n                    \n\n\n            \n                \n                        Executes a resize operation after a delay of 100 milliseconds.\nCalls the updateOverlayDisplay, displayHeadlineMobile, and sidesStatus methods.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rotateIndicator\n                        \n                    \n                \n            \n            \n                \nrotateIndicator()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:111\n                        \n                    \n\n\n            \n                \n                        Toggles the CSS class 'rotate-toggle' on the toggleElement and\nshows/hides the side navigation menu based on the current state of the rotateToggle boolean variable.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showSidenav\n                        \n                    \n                \n            \n            \n                \nshowSidenav()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:146\n                        \n                    \n\n\n            \n                \n                        Toggles the visibility of the app-sidebar based on the current screen size.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showThread\n                        \n                    \n                \n            \n            \n                \nshowThread()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:126\n                        \n                    \n\n\n            \n                \n                        Toggles the visibility of the app-thread based on the current screen size.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sidesStatus\n                        \n                    \n                \n            \n            \n                \nsidesStatus()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:86\n                        \n                    \n\n\n            \n                \n                        Checks the current screen size and the states of the sidenav and thread, and hides the sidenav and rotates the toggle element if necessary.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateOverlayDisplay\n                        \n                    \n                \n            \n            \n                \nupdateOverlayDisplay()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/mainsection.component.ts:97\n                        \n                    \n\n\n            \n                \n                        Updates the display of the overlay element based on the current screen size and sidenav/thread states.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        changeDetector\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        channelElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('channel', {read: ElementRef})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        headerComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HeaderComponent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild(HeaderComponent)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hideThreadSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : new Subscription\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        overlayElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('overlay', {read: ElementRef})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resizeListenerService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResizeListenerService\n\n                    \n                \n                \n                    \n                        Default value : inject(ResizeListenerService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rotateToggle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sidebarElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('sidebar', {read: ElementRef})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sidenavOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        threadBarElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('threadBar', {read: ElementRef})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        threadOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        threadService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ThreadService\n\n                    \n                \n                \n                    \n                        Default value : inject(ThreadService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        toggleElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('toggle', {read: ElementRef})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubProfile\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubUserChannels\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubUserList\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Default value : inject(UserService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/mainsection.component.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnDestroy, inject, ViewChild, ElementRef, AfterViewInit, ChangeDetectorRef } from '@angular/core';\nimport { SidebarComponent } from './sidebar/sidebar.component';\nimport { ChannelComponent } from './channel/channel.component';\nimport { ThreadComponent } from './thread/thread.component';\nimport { CommonModule } from '@angular/common';\nimport { HeaderComponent } from '../shared/components/header/header.component';\nimport { UserService } from '../shared/services/user.service';\nimport { ResizeListenerService } from '../shared/services/resize-listener.service';\nimport { Subscription } from 'rxjs';\nimport { ThreadService } from '../shared/services/thread.service';\n\n@Component({\n  selector: 'app-mainsection',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent, SidebarComponent, ChannelComponent, ThreadComponent, HeaderComponent],\n  templateUrl: './mainsection.component.html',\n  styleUrl: './mainsection.component.scss'\n})\n\nexport class MainsectionComponent implements AfterViewInit, OnDestroy {\n  userService: UserService = inject(UserService);\n  resizeListenerService: ResizeListenerService = inject(ResizeListenerService);\n  threadService: ThreadService = inject(ThreadService);\n  private hideThreadSubscription: Subscription = new Subscription;\n  private changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n  rotateToggle: boolean = false;\n  sidenavOpen: boolean = true;\n  threadOpen: boolean = false;\n  unsubProfile;\n  unsubUserChannels;\n  unsubUserList;\n  @ViewChild('toggle', { read: ElementRef }) toggleElement!: ElementRef;\n  @ViewChild('sidebar', { read: ElementRef }) sidebarElement!: ElementRef;\n  @ViewChild('threadBar', { read: ElementRef }) threadBarElement!: ElementRef;\n  @ViewChild('channel', { read: ElementRef }) channelElement!: ElementRef;\n  @ViewChild('overlay', { read: ElementRef }) overlayElement!: ElementRef;\n  @ViewChild(HeaderComponent) headerComponent!: HeaderComponent;\n\n  constructor() {\n    this.resizeListenerService.registerResizeCallback(this.onResize.bind(this));\n    this.unsubProfile = this.userService.retrieveUserProfile();\n    this.unsubUserChannels = this.userService.retrieveUserChannels();\n    this.unsubUserList = this.userService.retrieveAllUsers();\n    this.userService.userLoggedIn();\n  }\n\n  ngOnInit(): void {\n    this.hideThreadSubscription = this.threadService.hideThread$.subscribe(() => {\n      this.hideThread();\n    })\n    this.onResize();\n  }\n\n  /**\n   * Executes a resize operation after a delay of 100 milliseconds.\n   * Calls the `updateOverlayDisplay`, `displayHeadlineMobile`, and `sidesStatus` methods.\n   */\n  onResize() {\n    setTimeout(() => {\n      this.updateOverlayDisplay();\n      this.displayHeadlineMobile();\n      this.sidesStatus();\n    }, 100);\n  }\n\n  /**\n   * Initializes the component after the view has been initialized.\n   * Adds the 'margin-right' class to the sidebar element to make it appear on the right side.\n   * Checks the current screen size and the states of the sidenav and thread, and hides the sidenav and rotates the toggle element if necessary.\n   */\n  ngAfterViewInit() {\n    this.hideThread();\n    this.sidebarElement.nativeElement.classList.add('margin-right');\n    if (this.resizeListenerService.mdScreen) {\n      this.hideSidenav();\n      this.hideThread();\n      this.rotateToggle = true;\n      this.toggleElement.nativeElement.classList.add('rotate-toggle');\n    }\n    this.changeDetector.detectChanges();\n  }\n\n  /**\n   * Checks the current screen size and the states of the sidenav and thread, and hides the sidenav and rotates the toggle element if necessary.\n   */\n  sidesStatus() {\n    if (!this.resizeListenerService.lgScreen && this.sidenavOpen == true && this.threadOpen == true) {\n      this.hideSidenav();\n      this.toggleElement.nativeElement.classList.add('rotate-toggle');\n      this.rotateToggle = true;\n    }\n  }\n\n  /**\n   * Updates the display of the overlay element based on the current screen size and sidenav/thread states.\n   */\n  updateOverlayDisplay() {\n    if (this.overlayElement && this.overlayElement.nativeElement) {\n      if (this.resizeListenerService.mdScreen && this.sidenavOpen == true || this.resizeListenerService.mdScreen && this.threadOpen == true) {\n        this.overlayElement.nativeElement.style.display = 'block';\n      } else {\n        this.overlayElement.nativeElement.style.display = 'none';\n      }\n    }\n  }\n\n  /**\n   * Toggles the CSS class 'rotate-toggle' on the toggleElement and\n   * shows/hides the side navigation menu based on the current state of the rotateToggle boolean variable.\n   */\n  rotateIndicator() {\n    if (this.rotateToggle == false) {\n      this.toggleElement.nativeElement.classList.add('rotate-toggle');\n      this.hideSidenav();\n      this.rotateToggle = true;\n    } else {\n      this.toggleElement.nativeElement.classList.remove('rotate-toggle');\n      this.showSidenav();\n      this.rotateToggle = false;\n    }\n  }\n\n  /**\n   * Toggles the visibility of the app-thread based on the current screen size.\n   */\n  showThread() {\n    this.threadBarElement.nativeElement.classList.add('margin-left');\n    this.threadOpen = true;\n    if (this.resizeListenerService.xmdScreen == true) {\n      this.threadBarElement.nativeElement.classList.remove('hide-show');\n      this.hideSidenav();\n      this.toggleElement.nativeElement.classList.add('rotate-toggle');\n      this.rotateToggle = true;\n    } else {\n      this.threadBarElement.nativeElement.classList.remove('hide-show');\n    }\n    if (this.resizeListenerService.mdScreen == true) {\n      this.overlayElement.nativeElement.style.display = 'block';\n    }\n    this.displayHeadlineMobile();\n  }\n\n  /**\n   * Toggles the visibility of the app-sidebar based on the current screen size.\n   */\n  showSidenav() {\n    this.sidebarElement.nativeElement.classList.add('margin-right');\n    this.sidenavOpen = true;\n    if (this.resizeListenerService.xmdScreen == true) {\n      this.sidebarElement.nativeElement.classList.remove('hide-show');\n      this.hideThread();\n    } else {\n      this.sidebarElement.nativeElement.classList.remove('hide-show');\n    }\n    if (this.resizeListenerService.mdScreen == true) {\n      this.hideThread();\n      this.overlayElement.nativeElement.style.display = 'block';\n    }\n    this.displayHeadlineMobile();\n  }\n\n  /**\n   * Adds the 'hide-show' class to the thread bar element (app-sidebar) to hide the thread.\n   */\n  hideSidenav() {\n    this.sidebarElement.nativeElement.classList.remove('margin-right');\n    this.sidebarElement.nativeElement.classList.add('hide-show');\n    this.sidenavOpen = false;\n    this.overlayElement.nativeElement.style.display = 'none';\n  }\n\n  /**\n   * Adds the 'hide-show' class to the thread bar element (app-thread) to hide the thread.\n   */\n  hideThread() {\n    this.threadBarElement.nativeElement.classList.remove('margin-left');\n    this.threadBarElement.nativeElement.classList.add('hide-show');\n    this.threadOpen = false;\n    this.overlayElement.nativeElement.style.display = 'none';\n  }\n\n  /**\n   * Toggles the display of the mobile headline and desktop headline based on screen size and sidenav state.\n   */\n  displayHeadlineMobile() {\n    if (this.resizeListenerService.smScreen && this.sidenavOpen == false) {\n      this.headerComponent.headlineMobile.nativeElement.style.display = 'flex';\n      this.headerComponent.headlineDesktop.nativeElement.style.display = 'none';\n      this.toggleElement.nativeElement.classList.add('rotate-toggle');\n      this.rotateToggle = true;\n    } else {\n      this.headerComponent.headlineMobile.nativeElement.style.display = 'none';\n      this.headerComponent.headlineDesktop.nativeElement.style.display = 'flex';\n    }\n  }\n\n  /**\n   * Toggles between hiding the side navigation menu and showing the thread based on the state of 'rotateToggle'.\n   */\n  closeSides() {\n    if (this.rotateToggle == false) {\n      this.hideSidenav();\n      this.rotateToggle = true;\n      this.toggleElement.nativeElement.classList.add('rotate-toggle');\n    } else {\n      this.hideThread();\n    }\n  }\n\n  /**\n   * A function that handles the closing of the mobile view by executing various actions.\n   */\n  hanldeCloseMobile() {\n    this.closeSides();\n    this.hideSidenav();\n    this.hideThread();\n    this.displayHeadlineMobile();\n  }\n\n  /**\n   * A function that returns the text 'schließen' if 'sidenavOpen' is true, otherwise returns 'öffnen'.\n   * @return {string} The text 'schließen' or 'öffnen'\n   */\n  getToggleText(): string {\n    return this.sidenavOpen ? 'schließen' : 'öffnen';\n  }\n\n  /**\n   * Executes cleanup actions when the component is destroyed.\n   */\n  ngOnDestroy() {\n    console.log('hallo');\n    this.unsubProfile();\n    this.unsubUserChannels();\n    this.unsubUserList();\n    this.userService.userLoggedOut();\n    this.hideThreadSubscription.unsubscribe();\n    this.resizeListenerService.unregisterResizeCallback(this.onResize.bind(this));\n  }\n}\n    \n\n    \n        \n    \n    \n        \n        \n        \n        \n    \n\n\n    Workspace-Menü {{getToggleText()}}\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                Workspace-Menü {{getToggleText()}}    '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'MainsectionComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MessageData.html":{"url":"classes/MessageData.html","title":"class - MessageData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MessageData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/message.class.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                emoji\n                            \n                            \n                                id\n                            \n                            \n                                message\n                            \n                            \n                                msgId\n                            \n                            \n                                name\n                            \n                            \n                                profilePicture\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(obj?: any)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/models/message.class.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        obj\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/message.class.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/message.class.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/message.class.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/message.class.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        msgId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/message.class.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/message.class.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profilePicture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/message.class.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/message.class.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        toJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    toJson()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/models/message.class.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { id: string; name: string; profilePicture: string; message: string; timestamp: number; email: string; emoji: []; msgId: string; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class MessageData {\n    id: string;\n    msgId: string;\n    name: string;\n    profilePicture: string;\n    message: string;\n    timestamp: number;\n    email: string;\n    emoji: [];\n\n    constructor(obj?: any) {\n        this.id = obj ? obj.id : \"\";\n        this.name = obj ? obj.name : \"\";\n        this.profilePicture = obj ? obj.profilePicture : \"\";\n        this.message = obj ? obj.message : \"\";\n        this.timestamp = Date.now();\n        this.email = obj ? obj.email : \"\"\n        this.emoji = obj ? obj.emoji : [];\n        this.msgId = obj ? obj.msgId : \"\";\n    }\n\n    public toJson() {\n        return {\n            id: this.id,\n            name: this.name,\n            profilePicture: this.profilePicture,\n            message: this.message,\n            timestamp: this.timestamp,\n            email: this.email,\n            emoji: this.emoji,\n            msgId: this.msgId\n        };\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MutationObserverService.html":{"url":"injectables/MutationObserverService.html","title":"injectable - MutationObserverService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MutationObserverService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/mutation.observer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                domChanges\n                            \n                            \n                                    Public\n                                domChanges$\n                            \n                            \n                                    Private\n                                initialChildCount\n                            \n                            \n                                    Private\n                                mutationObserver\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                disconnect\n                            \n                            \n                                    Public\n                                observe\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/mutation.observer.service.ts:12\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        disconnect\n                        \n                    \n                \n            \n            \n                \n                        \n                    disconnect()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/mutation.observer.service.ts:60\n                        \n                    \n\n\n            \n                \n                        The disconnect function in TypeScript disconnects the mutation observer if it is currently active.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        observe\n                        \n                    \n                \n            \n            \n                \n                        \n                    observe(element: ElementRef, isThread: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/mutation.observer.service.ts:28\n                        \n                    \n\n\n            \n                \n                        The function observes changes in a DOM element's children and scrolls to the bottom if new children\nare added.\nElementRef, which is a reference to a DOM element in Angular. It is used to observe changes in the\nelement's children and scroll to the bottom if isThread is set to true.\nflag that indicates whether the element being observed is a thread. If isThread is set to true,\nthe method will scroll the element to the bottom when new content is added.\nnot execute the rest of the code block.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                        ElementRef\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe element parameter in the observe method is of type\nElementRef, which is a reference to a DOM element in Angular. It is used to observe changes in the\nelement's children and scroll to the bottom if isThread is set to true.\n\n\n                                            \n                                        \n                                        \n                                                isThread\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                            \n                                                    \nThe isThread parameter in the observe method is a boolean\nflag that indicates whether the element being observed is a thread. If isThread is set to true,\nthe method will scroll the element to the bottom when new content is added.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                If the element or element.nativeElement is falsy, the function will return early and\nnot execute the rest of the code block.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        domChanges\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/mutation.observer.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        domChanges$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.domChanges.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/mutation.observer.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initialChildCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/mutation.observer.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mutationObserver\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MutationObserver\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/mutation.observer.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ElementRef } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MutationObserverService {\n\n  private mutationObserver!: MutationObserver;\n  private domChanges = new Subject();\n  public domChanges$: Observable = this.domChanges.asObservable();\n  private initialChildCount: number = 0;\n\n  constructor() { }\n\n/**\n * The function observes changes in a DOM element's children and scrolls to the bottom if new children\n * are added.\n * @param {ElementRef} element - The `element` parameter in the `observe` method is of type\n * `ElementRef`, which is a reference to a DOM element in Angular. It is used to observe changes in the\n * element's children and scroll to the bottom if `isThread` is set to true.\n * @param {boolean} [isThread=false] - The `isThread` parameter in the `observe` method is a boolean\n * flag that indicates whether the element being observed is a thread. If `isThread` is set to `true`,\n * the method will scroll the element to the bottom when new content is added.\n * @returns If the `element` or `element.nativeElement` is falsy, the function will return early and\n * not execute the rest of the code block.\n */\n  public observe(element: ElementRef, isThread: boolean = false): void {\n    if (!element || !element.nativeElement) {\n      return;\n    }\n    if (isThread) {\n      element.nativeElement.scrollTop = element.nativeElement.scrollHeight;\n    }\n    this.initialChildCount = element.nativeElement.children.length;\n    this.mutationObserver = new MutationObserver((mutations) => {\n      mutations.forEach(mutation => {\n        const currentChildCount = element.nativeElement.children.length;\n        if (currentChildCount > this.initialChildCount) {\n          this.initialChildCount = currentChildCount;\n          element.nativeElement.scrollTop = element.nativeElement.scrollHeight;\n          this.domChanges.next([mutation]);\n        }\n        else if (currentChildCount != this.initialChildCount) {\n          this.initialChildCount = element.nativeElement.children.length;\n        }\n      });\n    });\n\n    this.mutationObserver.observe(element.nativeElement, {\n      childList: true,\n      subtree: false,\n      characterData: false\n    });\n  }\n\n/**\n * The `disconnect` function in TypeScript disconnects the mutation observer if it is currently active.\n */\n  public disconnect(): void {\n    if (this.mutationObserver) {\n      this.mutationObserver.disconnect();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/OutsideclickDirective.html":{"url":"directives/OutsideclickDirective.html","title":"directive - OutsideclickDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  OutsideclickDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/outsideclick.directive.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [appOutsideclick]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                onClick\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                outsideClick\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:click\n                            \n                        \n                    \n                \n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_elementRef: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/outsideclick.directive.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _elementRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        outsideClick\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/outsideclick.directive.ts:8\n                            \n                        \n            \n        \n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            document:click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' '$event.target' \n                \n            \n\n\n            \n                \n                    Defined in src/app/outsideclick.directive.ts:13\n                \n            \n\n\n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        onClick\n                        \n                    \n                \n            \n            \n                \n                        \n                    onClick(event: MouseEvent, targetElement: HTMLElement)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:click', ['$event', '$event.target'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/outsideclick.directive.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        MouseEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                targetElement\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, EventEmitter, HostListener, Output, ElementRef, } from '@angular/core';\n\n@Directive({\n  selector: '[appOutsideclick]',\n  standalone: true\n})\nexport class OutsideclickDirective {\n  @Output() outsideClick = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef) { }\n\n  @HostListener('document:click', ['$event', '$event.target'])\n  public onClick(event: MouseEvent, targetElement: HTMLElement): void {\n    if (!targetElement) {\n      return;\n    }\n    const isEditMessageSpanClicked = targetElement.classList.contains('edit-message-span');\n    const clickedInside = this._elementRef.nativeElement.contains(targetElement);\n    if (!clickedInside && !isEditMessageSpanClicked) {\n      this.outsideClick.emit(event);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RegisterComponent.html":{"url":"components/RegisterComponent.html","title":"component - RegisterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  RegisterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login/register/register.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-register\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            RouterLink\n                            ReactiveFormsModule\n                \n            \n\n            \n                styleUrls\n                ./register.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./register.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errorMessage\n                            \n                            \n                                firestore\n                            \n                            \n                                firstFocus\n                            \n                            \n                                isFormSubmitted\n                            \n                            \n                                    \n                                nameInput\n                            \n                            \n                                registerForm\n                            \n                            \n                                showPassword\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                continue\n                            \n                            \n                                getFirebaseErrorMessage\n                            \n                            \n                                handleRegistrationError\n                            \n                            \n                                    Async\n                                handleUserRegistration\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                onInput\n                            \n                            \n                                togglePasswordVisibility\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/app/login/register/register.component.ts:23\n                            \n                        \n\n                \n                    \n                            Constructs a RegisterComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Angular Router service.\n\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe UserService dependency.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        continue\n                        \n                    \n                \n            \n            \n                \n                        \n                    continue()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/register/register.component.ts:68\n                        \n                    \n\n\n            \n                \n                        Asynchronously continues the registration process.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                Resolves after the registration process is completed.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getFirebaseErrorMessage\n                        \n                    \n                \n            \n            \n                \ngetFirebaseErrorMessage(errorCode: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/register/register.component.ts:120\n                        \n                    \n\n\n            \n                \n                        Returns an error message based on the provided Firebase error code.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                errorCode\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Firebase error code.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The corresponding error message.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRegistrationError\n                        \n                    \n                \n            \n            \n                \nhandleRegistrationError(error: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/register/register.component.ts:105\n                        \n                    \n\n\n            \n                \n                        Handles the registration error based on the type of error received.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe error object to be handled.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleUserRegistration\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUserRegistration(email: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/register/register.component.ts:88\n                        \n                    \n\n\n            \n                \n                        Asynchronously handles the registration process for a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe email address of the user.\n\n\n                                            \n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \nA promise that resolves when the registration process is complete.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/register/register.component.ts:43\n                        \n                    \n\n\n            \n                \n                        Executes after the view has been initialized.\nSets a timeout to focus on the 'nameInput' element after 1 second.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onInput\n                        \n                    \n                \n            \n            \n                \nonInput()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/register/register.component.ts:52\n                        \n                    \n\n\n            \n                \n                        The onInput function sets the firstFocus property to false.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        togglePasswordVisibility\n                        \n                    \n                \n            \n            \n                \ntogglePasswordVisibility()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/register/register.component.ts:60\n                        \n                    \n\n\n            \n                \n                        Toggles the visibility of the password field.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/login/register/register.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firestore\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Firestore\n\n                    \n                \n                \n                    \n                        Default value : inject(Firestore)\n                    \n                \n                    \n                        \n                                Defined in src/app/login/register/register.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/login/register/register.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFormSubmitted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login/register/register.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nameInput\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('nameInput')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/login/register/register.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/login/register/register.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login/register/register.component.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterLink, Router } from '@angular/router';\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { FirebaseError } from '@angular/fire/app';\nimport { Firestore } from '@angular/fire/firestore';\nimport { UserService } from '../../shared/services/user.service';\n\n@Component({\n  selector: 'app-register',\n  standalone: true,\n  imports: [CommonModule, RouterLink, ReactiveFormsModule],\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements AfterViewInit {\n  firestore: Firestore = inject(Firestore);\n  @ViewChild('nameInput') nameInput!: ElementRef;\n  errorMessage: string = '';\n  firstFocus: boolean = true;\n  showPassword: boolean = false;\n  isFormSubmitted: boolean = false;\n  registerForm: FormGroup;\n\n  /**\n   * Constructs a RegisterComponent.\n   * @param {Router} router - The Angular Router service.\n   * @param {UserService} userService - The UserService dependency.\n   */\n  constructor(private router: Router, private userService: UserService = inject(UserService)) {\n    this.registerForm = new FormGroup({\n      name: new FormControl('', [Validators.required, Validators.minLength(5)]),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [Validators.required, Validators.minLength(8)]),\n      privacyCheck: new FormControl(false, [Validators.requiredTrue])\n    });\n  }\n\n  /**\n   * Executes after the view has been initialized.\n   * Sets a timeout to focus on the 'nameInput' element after 1 second.\n   */\n  ngAfterViewInit(): void {\n    setTimeout(() => {\n      this.nameInput.nativeElement.focus();\n    }, 1000);\n  }\n\n  /**\n   * The `onInput` function sets the `firstFocus` property to false.\n   */\n  onInput() {\n    this.firstFocus = false;\n    this.errorMessage = '';\n  }\n\n  /**\n  * Toggles the visibility of the password field.\n  */\n  togglePasswordVisibility() {\n    this.showPassword = !this.showPassword;\n  }\n\n  /**\n   * Asynchronously continues the registration process.\n   * @return {Promise} Resolves after the registration process is completed.\n   */\n  async continue() {\n    this.isFormSubmitted = true;\n    if (this.registerForm.valid) {\n      const email = this.registerForm.controls['email'].value;\n      const name = this.registerForm.controls['name'].value;\n      try {\n        await this.handleUserRegistration(email, name);\n      } catch (error) {\n        this.handleRegistrationError(error);\n      }\n    }\n  }\n\n  /**\n   * Asynchronously handles the registration process for a new user.\n   * @param {string} email - The email address of the user.\n   * @param {string} name - The name of the user.\n   * @return {Promise} - A promise that resolves when the registration process is complete.\n   * @throws {Error} - Throws an error if a user with the same email or name already exists.\n   */\n  async handleUserRegistration(email: string, name: string) {\n    const { emailExists, nameExists } = await this.userService.checkRegisteredUser(email, name);\n    if (emailExists) {\n      throw new Error(\"Ein Benutzer mit dieser E-Mail-Adresse existiert bereits.\");\n    } else if (nameExists) {\n      throw new Error(\"Ein Benutzer mit diesem Namen existiert bereits.\");\n    } else {\n      await this.userService.prepareDataNewUser(this.registerForm.value);\n      this.userService.key = this.registerForm.controls['password'].value;\n      this.router.navigate(['/register/chooseavatar']);\n    }\n  }\n\n  /**\n   * Handles the registration error based on the type of error received.\n   * @param {any} error - The error object to be handled.\n   */\n  handleRegistrationError(error: any) {\n    if (error instanceof FirebaseError) {\n      this.errorMessage = this.getFirebaseErrorMessage(error.code);\n    } else if (error instanceof Error) {\n      this.errorMessage = error.message;\n    } else {\n      this.errorMessage = \"Ein unerwarteter Fehler ist aufgetreten.\";\n    }\n  }\n\n  /**\n   * Returns an error message based on the provided Firebase error code.\n   * @param {string} errorCode - The Firebase error code.\n   * @return {string} The corresponding error message.\n   */\n  getFirebaseErrorMessage(errorCode: string): string {\n    switch (errorCode) {\n      case 'auth/email-already-in-use':\n        return \"Die E-Mail-Adresse wird bereits verwendet.\";\n      case 'auth/invalid-email':\n        return \"Ungültige E-Mail-Adresse.\";\n      default:\n        return \"Ein Fehler ist bei der Registrierung aufgetreten.\";\n    }\n  }\n}\n\n    \n\n    \n        \n    \n        \n            \n            DaBubble\n        \n    \n    \n        \n        \n            Konto erstellen\n            Mit deinem Namen und deiner E-Mail-Adresse hast du dein neues DABubble-Konto.\n        \n        \n            \n                \n                    \n                    \n                \n                \n                    Bitte Name\n                        und Nachname eingeben, mindestens 5 Zeichen\n                \n            \n            \n                \n                    \n                    \n                \n                \n                    Bitte eine\n                        gültige E-Mail-Adresse eingeben\n                \n            \n            \n                \n                    \n                    \n                \n                \n                    \n                        mindestens 8 Zeichen\n                    {{ errorMessage }}\n                \n            \n            \n                \n                    \n                    Ich stimme der Datenschutzerklärungzu.\n                \n                \n                    \n                        Bitte stimme der Datenschutzerklarung zu\n                \n            \n            \n                weiter\n            \n        \n    \n    \n        Impressum\n        Datenschutz\n    \n\n    \n\n    \n                \n                    ./register.component.scss\n                \n                @import \"../../../styles.scss\";\n@import \"../login.component.scss\";\n\nmain {\n    padding: 40px 50px;\n}\n\n.login-btns {\n    @include dFlex($jc: end);\n    margin-top: 24px;\n}\n\n.form-group:nth-child(4) {\n    margin-bottom: 0;\n}\n\n.checkbox {\n    @include dFlex($jc: flex-start, $ai: center);\n    flex-direction: row;\n    width: 100%;\n    gap: 8px;\n\n    input {\n        appearance: none;\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        width: 24px;\n        height: 24px;\n        margin-top: 2px;\n        border: none;\n        border-radius: 0;\n        background-image: url(/assets/img/login/checkbox.png);\n        background-size: contain;\n        background-repeat: no-repeat;\n        cursor: pointer;\n\n        &:hover {\n            background-image: url(/assets/img/login/checkbox_hover.png);\n        }\n\n        &:checked {\n            background-image: url(/assets/img/login/checkbox_checked.png);\n        }\n\n        &:checked:hover {\n            background-image: url(/assets/img/login/checkbox_checked_hover.png);\n        }\n    }\n\n    span {\n        margin: 0;\n        @include dFlex($jc: flex-start, $ai: center);\n        font-family: \"Open Sans\" !important;\n        color: #42526e;\n        a {\n            margin-top: 2px;\n            padding: 4px;\n            &:hover {\n                font-weight: 400;\n                scale: 1;\n                border: 1px solid transparent;\n            }\n        }\n    }\n}\n\n@media screen and (orientation: landscape) and (max-width: 1181px) {\n    .login-btns {\n        margin: 0;\n    }\n}\n\n@media screen and (max-width: 400px) {\n    .checkbox {\n        align-items: flex-start;\n        span {\n            margin-top: 2px;\n            flex-direction: column;\n            align-items: flex-start;\n            a {\n                padding: 0 4px 0 0;\n            }\n        }\n    }\n\n    .login-btns {\n        margin: 19px 0 0;\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                    DaBubble                                            Konto erstellen            Mit deinem Namen und deiner E-Mail-Adresse hast du dein neues DABubble-Konto.                                                                                                                                        Bitte Name                        und Nachname eingeben, mindestens 5 Zeichen                                                                                                                                                    Bitte eine                        gültige E-Mail-Adresse eingeben                                                                                                                                                                            mindestens 8 Zeichen                    {{ errorMessage }}                                                                                                Ich stimme der Datenschutzerklärungzu.                                                                            Bitte stimme der Datenschutzerklarung zu                                                        weiter                                    Impressum        Datenschutz    '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'RegisterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ResetpasswordComponent.html":{"url":"components/ResetpasswordComponent.html","title":"component - ResetpasswordComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ResetpasswordComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login/resetpassword/resetpassword.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-resetpassword\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterLink\n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./resetpassword.component.html\n            \n\n\n\n            \n                styleUrl\n                ./resetpassword.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isDisabled\n                            \n                            \n                                popupState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/login/resetpassword/resetpassword.component.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendEmail()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/resetpassword/resetpassword.component.ts:43\n                        \n                    \n\n\n            \n                \n                        The sendEmail function asynchronously sends a password reset email to a specified email address\nand then navigates to the home page after a delay.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isDisabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/login/resetpassword/resetpassword.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        popupState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'out'\n                    \n                \n                    \n                        \n                                Defined in src/app/login/resetpassword/resetpassword.component.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterLink, Router } from '@angular/router';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { getAuth, sendPasswordResetEmail } from '@angular/fire/auth';\n\n@Component({\n  selector: 'app-resetpassword',\n  standalone: true,\n  imports: [RouterLink, CommonModule],\n  templateUrl: './resetpassword.component.html',\n  styleUrl: './resetpassword.component.scss',\n  animations: [\n    trigger('slideInOut', [\n      state('in', style({\n        transform: 'translateX(0)',\n        opacity: '1'\n      })),\n      state('out', style({\n        transform: 'translateX(100%)' + 'rotate(-30deg)',\n\n        opacity: '0'\n      })),\n      transition('out => in', [\n        animate('0.3s ease-in-out')\n      ]),\n      transition('in => out', [\n        animate('0.3s ease-in-out')\n      ])\n    ])\n  ]\n})\n\nexport class ResetpasswordComponent {\n  popupState = 'out';\n  isDisabled = true;\n  constructor(private router: Router) { }\n\n  /**\n   * The `sendEmail` function asynchronously sends a password reset email to a specified email address\n   * and then navigates to the home page after a delay.\n   */\n  async sendEmail() {\n    this.popupState = 'in';\n    const auth = getAuth();\n    await sendPasswordResetEmail(auth, 'kevin.mueller@fenrirdev.de')\n      .catch((error) => {\n        const errorCode = error.code;\n        const errorMessage = error.message;\n      });\n    setTimeout(() => {\n      this.popupState = 'out';\n      this.router.navigate(['/']);\n    }, 1000);\n  }\n}\n\n    \n\n    \n        \n    \n        \n            \n            DaBubble\n        \n    \n    \n        \n        \n            Passwort zurücksetzen\n            Bitte geben Sie Ihre E-Mail-Adresse ein.\n        \n        \n            \n                \n                    \n                    \n                \n            \n        \n        Wir senden Ihnen eine E-Mail, über die \n            Sie Ihr Passwort ändern können.\n        \n            E-Mail senden\n        \n    \n    \n        Impressum\n        Datenschutz\n    \n    \n        E-Mail gesendet\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                    DaBubble                                            Passwort zurücksetzen            Bitte geben Sie Ihre E-Mail-Adresse ein.                                                                                                                                Wir senden Ihnen eine E-Mail, über die             Sie Ihr Passwort ändern können.                    E-Mail senden                        Impressum        Datenschutz                E-Mail gesendet    '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'ResetpasswordComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResizeListenerService.html":{"url":"injectables/ResizeListenerService.html","title":"injectable - ResizeListenerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResizeListenerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/resize-listener.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                lgScreen\n                            \n                            \n                                mdScreen\n                            \n                            \n                                    Private\n                                resizeCallbacks\n                            \n                            \n                                smScreen\n                            \n                            \n                                xmdScreen\n                            \n                            \n                                xsmScreen\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                onResize\n                            \n                            \n                                registerResizeCallback\n                            \n                            \n                                unregisterResizeCallback\n                            \n                            \n                                    Private\n                                updateScreenSize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ngZone: NgZone)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/resize-listener.service.ts:20\n                            \n                        \n\n                \n                    \n                            Constructor for the service that listens for resize events\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        ngZone\n                                                  \n                                                        \n                                                                    NgZone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nNgZone\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onResize\n                        \n                    \n                \n            \n            \n                \n                        \n                    onResize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/resize-listener.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Called on resize event to update the screen sizes and call the registered callbacks\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerResizeCallback\n                        \n                    \n                \n            \n            \n                \nregisterResizeCallback(callback: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/resize-listener.service.ts:57\n                        \n                    \n\n\n            \n                \n                        A function to register a callback for resize events.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe callback function to be registered.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unregisterResizeCallback\n                        \n                    \n                \n            \n            \n                \nunregisterResizeCallback(callback: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/resize-listener.service.ts:66\n                        \n                    \n\n\n            \n                \n                        A function to unregister a callback for resize events.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe callback function to be unregistered.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateScreenSize\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateScreenSize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/resize-listener.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Updates the screen sizes\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        lgScreen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/resize-listener.service.ts:12\n                        \n                    \n\n            \n                \n                    \n1440px\n\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mdScreen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/resize-listener.service.ts:16\n                        \n                    \n\n            \n                \n                    \n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        resizeCallbacks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (function)[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/resize-listener.service.ts:9\n                        \n                    \n\n            \n                \n                    Resize callbacks to call on resize event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        smScreen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/resize-listener.service.ts:20\n                        \n                    \n\n            \n                \n                    \n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        xmdScreen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/resize-listener.service.ts:14\n                        \n                    \n\n            \n                \n                    \n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        xsmScreen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/resize-listener.service.ts:18\n                        \n                    \n\n            \n                \n                    \n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NgZone } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\n\nexport class ResizeListenerService {\n  /** Resize callbacks to call on resize event */\n  private resizeCallbacks: (() => void)[] = [];\n  /** Screen-sizes variables for width in px */\n  /** > 1440px */\n  lgScreen: boolean = false;\n  /**  {\n      this.updateScreenSize();\n      this.resizeCallbacks.forEach(callback => callback());\n    });\n  }\n\n  /**\n   * Updates the screen sizes\n   */\n  private updateScreenSize() {\n    const width = window.innerWidth;\n    this.lgScreen = width > 1440;\n    this.xmdScreen = width  960;\n    this.mdScreen = width  600;\n    this.xsmScreen = width  480;\n    this.smScreen = width  void} callback - The callback function to be registered.\n   */\n  registerResizeCallback(callback: () => void) {\n    this.resizeCallbacks.push(callback);\n    callback();\n  }\n\n  /**\n   * A function to unregister a callback for resize events.\n   * @param {() => void} callback - The callback function to be unregistered.\n   */\n  unregisterResizeCallback(callback: () => void) {\n    this.resizeCallbacks = this.resizeCallbacks.filter(cb => cb !== callback);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ShowProfileComponent.html":{"url":"components/ShowProfileComponent.html","title":"component - ShowProfileComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ShowProfileComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/show-profile/show-profile.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-show-profile\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatDialogActions\n                            MatDialogClose\n                            CommonModule\n                            ReactiveFormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./show-profile.component.html\n            \n\n\n\n            \n                styleUrl\n                ./show-profile.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                authService\n                            \n                            \n                                avatars\n                            \n                            \n                                channelService\n                            \n                            \n                                    Public\n                                dialog\n                            \n                            \n                                editMode\n                            \n                            \n                                editProfilePic\n                            \n                            \n                                    \n                                fileInput\n                            \n                            \n                                otherUser\n                            \n                            \n                                otherUserId\n                            \n                            \n                                otherUserInfo\n                            \n                            \n                                profileEditable\n                            \n                            \n                                selectedAvatar\n                            \n                            \n                                sidebarService\n                            \n                            \n                                threadService\n                            \n                            \n                                updateUserForm\n                            \n                            \n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkUpdateInput\n                            \n                            \n                                closeDialog\n                            \n                            \n                                getStatusText\n                            \n                            \n                                getUserStatus\n                            \n                            \n                                    Async\n                                newProfilePicture\n                            \n                            \n                                onImageSelected\n                            \n                            \n                                openDialog\n                            \n                            \n                                selectAvatar\n                            \n                            \n                                    Async\n                                sendMessage\n                            \n                            \n                                toggleChangeProfilePic\n                            \n                            \n                                triggerFileInput\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(storageService: StorageService, dialog: MatDialog, authService: AuthService, dialogRef: MatDialogRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        storageService\n                                                  \n                                                        \n                                                                        StorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkUpdateInput\n                        \n                    \n                \n            \n            \n                \ncheckUpdateInput()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/show-profile/show-profile.component.ts:137\n                        \n                    \n\n\n            \n                \n                        The function checkUpdateInput checks if the updateUserForm is valid and opens a dialog if it is.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        closeDialog\n                        \n                    \n                \n            \n            \n                \ncloseDialog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/show-profile/show-profile.component.ts:187\n                        \n                    \n\n\n            \n                \n                        The closeDialog function closes all open dialog windows.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStatusText\n                        \n                    \n                \n            \n            \n                \ngetStatusText()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/show-profile/show-profile.component.ts:124\n                        \n                    \n\n\n            \n                \n                        The getStatusText function returns \"Aktiv\" if the user is logged in and \"Inaktiv\" if the user is\nnot logged in.\n\n\n                        \n                            Returns :     \"Aktiv\" | \"Inaktiv\"\n\n                        \n                            \n                                string\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserStatus\n                        \n                    \n                \n            \n            \n                \ngetUserStatus(type: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/show-profile/show-profile.component.ts:105\n                        \n                    \n\n\n            \n                \n                        Function returns the class of user status for online indicator div and text\ndepending on given type as a string\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    string - to determine which value should be returned\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                class as a string\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        newProfilePicture\n                        \n                    \n                \n            \n            \n                \n                        \n                    newProfilePicture()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/show-profile/show-profile.component.ts:94\n                        \n                    \n\n\n            \n                \n                        The newProfilePicture function asynchronously uploads a file to storage and updates the user's\nprofile picture.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onImageSelected\n                        \n                    \n                \n            \n            \n                \nonImageSelected(input: HTMLInputElement)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/show-profile/show-profile.component.ts:82\n                        \n                    \n\n\n            \n                \n                        The function onImageSelected takes an HTML input element, selects a file from storage service, and\ncreates a URL for the selected file.\nHTMLInputElement. It is used to represent an input element in an HTML form, such as an input field\nof type \"file\" that allows users to select files from their device.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                input\n                                            \n                                                        HTMLInputElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe input parameter in the onImageSelected function is of type\nHTMLInputElement. It is used to represent an input element in an HTML form, such as an input field\nof type \"file\" that allows users to select files from their device.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openDialog\n                        \n                    \n                \n            \n            \n                \nopenDialog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/show-profile/show-profile.component.ts:163\n                        \n                    \n\n\n            \n                \n                        The openDialog function opens a dialog window to verify user information and updates user email\nand profile if verified.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectAvatar\n                        \n                    \n                \n            \n            \n                \nselectAvatar(avatar: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/show-profile/show-profile.component.ts:62\n                        \n                    \n\n\n            \n                \n                        The selectAvatar function in TypeScript sets the selectedAvatar property to the provided avatar\nstring.\nthis function is called, it sets the selectedAvatar property of the object to the value of the\navatar parameter.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                avatar\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selectAvatar function takes a parameter avatar of type string. When\nthis function is called, it sets the selectedAvatar property of the object to the value of the\navatar parameter.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendMessage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/show-profile/show-profile.component.ts:143\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleChangeProfilePic\n                        \n                    \n                \n            \n            \n                \ntoggleChangeProfilePic()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/show-profile/show-profile.component.ts:180\n                        \n                    \n\n\n            \n                \n                        Toggles the value of editProfilePic, which controls whether the profile picture can be changed.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        triggerFileInput\n                        \n                    \n                \n            \n            \n                \ntriggerFileInput()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/show-profile/show-profile.component.ts:70\n                        \n                    \n\n\n            \n                \n                        The triggerFileInput function triggers a click event on a file input element and sets the\nselectedAvatar property to null.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        authService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatars\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : this.storageService.avatars\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelService\n\n                    \n                \n                \n                    \n                        Default value : inject(ChannelService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatDialog\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editMode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editProfilePic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileInput\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('fileInput')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        otherUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        otherUserId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        otherUserInfo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profileEditable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedAvatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '../../assets/img/login/default_profil_img.png'\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sidebarService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SidebarService\n\n                    \n                \n                \n                    \n                        Default value : inject(SidebarService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        threadService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ThreadService\n\n                    \n                \n                \n                    \n                        Default value : inject(ThreadService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Default value : inject(UserService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/show-profile/show-profile.component.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject, ViewChild, ElementRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  MatDialog,\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogRef,\n} from '@angular/material/dialog';\nimport { UserService } from '../../services/user.service';\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { AuthService } from '../../services/auth.service';\nimport { VerifyComponent } from '../verify/verify.component';\nimport { ChannelService } from '../../services/channel.service';\nimport { SidebarService } from '../../services/sidebar.service';\nimport { ThreadService } from '../../services/thread.service';\nimport { StorageService } from '../../services/storage.service';\n\n@Component({\n  selector: 'app-show-profile',\n  standalone: true,\n  imports: [MatDialogActions, MatDialogClose, CommonModule, ReactiveFormsModule],\n  templateUrl: './show-profile.component.html',\n  styleUrl: './show-profile.component.scss'\n})\n\nexport class ShowProfileComponent {\n  threadService: ThreadService = inject(ThreadService);\n  userService: UserService = inject(UserService);\n  channelService: ChannelService = inject(ChannelService);\n  sidebarService: SidebarService = inject(SidebarService);\n  @ViewChild('fileInput') fileInput!: ElementRef;\n  selectedAvatar: string = '../../assets/img/login/default_profil_img.png';\n  avatars: any = this.storageService.avatars;\n  updateUserForm: FormGroup;\n  otherUser: boolean = false;\n  profileEditable: boolean = false;\n  editMode: boolean = false;\n  editProfilePic: boolean = false;\n  otherUserInfo!: any;\n  otherUserId!: string;\n\n  constructor(\n    private storageService: StorageService,\n    public dialog: MatDialog,\n    public authService: AuthService,\n    private dialogRef: MatDialogRef) {\n    this.updateUserForm = new FormGroup({\n      name: new FormControl(this.userService.userInfo.name),\n      email: new FormControl(this.userService.userInfo.email, [Validators.required, Validators.email]),\n    });\n    this.avatars = this.storageService.avatars;\n    this.selectedAvatar = this.userService.userInfo.profilePicture;\n  }\n\n  /**\n   * The `selectAvatar` function in TypeScript sets the selectedAvatar property to the provided avatar\n   * string.\n   * @param {string} avatar - The `selectAvatar` function takes a parameter `avatar` of type string. When\n   * this function is called, it sets the `selectedAvatar` property of the object to the value of the\n   * `avatar` parameter.\n   */\n  selectAvatar(avatar: string) {\n    this.selectedAvatar = avatar;\n  }\n\n  /**\n   * The `triggerFileInput` function triggers a click event on a file input element and sets the\n   * selectedAvatar property to null.\n   */\n  triggerFileInput() {\n    this.fileInput.nativeElement.click();\n    this.selectedAvatar;\n  }\n\n  /**\n   * The function `onImageSelected` takes an HTML input element, selects a file from storage service, and\n   * creates a URL for the selected file.\n   * @param {HTMLInputElement} input - The `input` parameter in the `onImageSelected` function is of type\n   * `HTMLInputElement`. It is used to represent an input element in an HTML form, such as an input field\n   * of type \"file\" that allows users to select files from their device.\n   */\n  onImageSelected(input: HTMLInputElement) {\n    this.storageService.onFileSelected(input);\n    const file = this.storageService.files?.item(0);\n    if (file) {\n      this.selectedAvatar = URL.createObjectURL(this.storageService.fileUrl);\n    }\n  }\n\n  /**\n   * The `newProfilePicture` function asynchronously uploads a file to storage and updates the user's\n   * profile picture.\n   */\n  async newProfilePicture() {\n    await this.storageService.uploadFile(this.userService.currentUser!);\n    await this.userService.updateUserProfilePicture(this.userService.createUserInfo.profilePicture)\n  }\n\n  /**\n   * Function returns the class of user status for online indicator div and text\n   * depending on given type as a string\n   * @param type string - to determine which value should be returned\n   * @returns class as a string\n   */\n  getUserStatus(type: string) {\n    if (!this.otherUser) {\n      const status = this.userService.userInfo.isLoggedIn == true ? \"online\" : \"offline\";\n      if (type == 'text')\n        return status\n      return status + '-div'\n    } else {\n      const status = this.userService.otherUserInfo.isLoggedIn == true ? \"online\" : \"offline\";\n      if (type == 'text')\n        return status\n      return status + '-div'\n    }\n  }\n\n  /**\n   * The `getStatusText` function returns \"Aktiv\" if the user is logged in and \"Inaktiv\" if the user is\n   * not logged in.\n   * @returns `string`\n   */\n  getStatusText() {\n    if (!this.otherUser) {\n      const text = this.userService.userInfo.isLoggedIn == true ? \"Aktiv\" : \"Inaktiv\";\n      return text\n    } else {\n      const text = this.userService.otherUserInfo.isLoggedIn == true ? \"Aktiv\" : \"Inaktiv\";\n      return text\n    }\n  }\n\n  /**\n   * The function `checkUpdateInput` checks if the `updateUserForm` is valid and opens a dialog if it is.\n   */\n  checkUpdateInput() {\n    if (this.updateUserForm.valid) {\n      this.openDialog()\n    }\n  }\n\n  async sendMessage() {\n    let alreadyPushed = false;\n    await this.channelService.updateUserDm(this.userService.otherUserInfo);\n    this.sidebarService.userDmData.forEach(element => {\n      if (element.id == this.userService.otherUserInfo.id)\n        alreadyPushed = true;\n    });\n    if (!alreadyPushed)\n      this.sidebarService.userDmData.push(this.userService.otherUserInfo);\n    this.channelService.chooseChannelType(true, this.userService.otherUserInfo);\n    this.threadService.stopListener();\n    this.threadService.triggerHideThread();\n    this.threadService.isActive = false;\n    this.closeDialog();\n  }\n\n  /**\n   * The `openDialog` function opens a dialog window to verify user information and updates user email\n   * and profile if verified.\n   */\n  openDialog() {\n    this.dialog.open(VerifyComponent, { panelClass: ['box-shadow', 'box-radius'] })\n      .afterClosed()\n      .subscribe(() => {\n        if (this.authService.verified == true) {\n          this.authService.updateUserMail(this.updateUserForm.controls['email'].value)\n          this.userService.updateUserProfile(this.updateUserForm);\n          this.editMode = false;\n        } else {\n          return\n        }\n      })\n  }\n\n  /**\n   * Toggles the value of `editProfilePic`, which controls whether the profile picture can be changed.\n   */\n  toggleChangeProfilePic() {\n    this.editProfilePic = !this.editProfilePic;\n  }\n\n  /**\n   * The closeDialog function closes all open dialog windows.\n   */\n  closeDialog() {\n\n    this.otherUser ? this.dialog.closeAll() : this.dialogRef.close()\n  }\n}\n\n    \n\n    \n        \n    \n        Profil\n        \n            \n        \n    \n    \n        \n            \n            \n            \n        \n    \n    @if (editMode == false) {\n    \n        \n            {{userService.otherUserInfo.name}}\n            {{userService.userInfo.name}}\n            @if (profileEditable) {Bearbeiten}\n        \n        \n            \n            {{getStatusText()}}\n        \n    \n    \n        \n            \n        \n        \n            E-mail Adresse\n            {{userService.otherUserInfo.email}}\n            {{userService.userInfo.email}}\n        \n    \n    @if (otherUser=== true) {\n    \n        \n            \n            Nachricht\n        \n    }\n    }\n    @if (editMode == true) {\n    \n        \n            \n                \n            \n            \n                Datei hochladen\n                \n              \n            \n                \n                    \n                    Vollständiger Name\n                \n                \n            \n            \n                \n                    \n                    E-mail Adresse\n                \n                \n            \n        \n        \n            \n                Abbrechen\n            \n            \n                Speichern\n            \n            \n                Speichern\n            \n        \n    \n    }\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Profil                                                                                                @if (editMode == false) {                        {{userService.otherUserInfo.name}}            {{userService.userInfo.name}}            @if (profileEditable) {Bearbeiten}                                        {{getStatusText()}}                                                                E-mail Adresse            {{userService.otherUserInfo.email}}            {{userService.userInfo.email}}                @if (otherUser=== true) {                                    Nachricht            }    }    @if (editMode == true) {                                                                                Datei hochladen                                                                                                  Vollständiger Name                                                                                                                E-mail Adresse                                                                                        Abbrechen                                        Speichern                                        Speichern                            }'\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'ShowProfileComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SidebarComponent.html":{"url":"components/SidebarComponent.html","title":"component - SidebarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SidebarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mainsection/sidebar/sidebar.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-sidebar\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                                AddNewChannelComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./sidebar.component.html\n            \n\n\n\n            \n                styleUrl\n                ./sidebar.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                activeChannelTitle\n                            \n                            \n                                activeDirectChannel\n                            \n                            \n                                activePrivateChannel\n                            \n                            \n                                channelService\n                            \n                            \n                                    Public\n                                dialog\n                            \n                            \n                                menuStates\n                            \n                            \n                                resizeListenerService\n                            \n                            \n                                sidebarService\n                            \n                            \n                                unsubChannels\n                            \n                            \n                                unsubCurrentChannels\n                            \n                            \n                                unsubUserDmData\n                            \n                            \n                                unsubUserDmIds\n                            \n                            \n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkMobileSmallScreen\n                            \n                            \n                                clearactiveStyle\n                            \n                            \n                                getDmStatus\n                            \n                            \n                                getUserStatus\n                            \n                            \n                                goToChannel\n                            \n                            \n                                goToDirektMessage\n                            \n                            \n                                goToPrivateMessage\n                            \n                            \n                                newMessage\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                openDialog\n                            \n                            \n                                toggleMenu\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialog: MatDialog, mainsectionComponent: MainsectionComponent)\n                    \n                \n                        \n                            \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mainsectionComponent\n                                                  \n                                                        \n                                                                        MainsectionComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkMobileSmallScreen\n                        \n                    \n                \n            \n            \n                \ncheckMobileSmallScreen()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/sidebar.component.ts:95\n                        \n                    \n\n\n            \n                \n                        Checks if the screen size is small or extra small and calls the handleCloseMobile method of the mainsectionComponent if true.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearactiveStyle\n                        \n                    \n                \n            \n            \n                \nclearactiveStyle()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/sidebar.component.ts:159\n                        \n                    \n\n\n            \n                \n                        The clearactiveStyle function resets the active channel titles in a TypeScript class.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDmStatus\n                        \n                    \n                \n            \n            \n                \ngetDmStatus(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/sidebar.component.ts:137\n                        \n                    \n\n\n            \n                \n                        The function getDmStatus returns a CSS class name based on the login status of a user in the\nsidebar.\nin the userDmData array within the sidebarService.\nof isLoggedIn property in the userDmData array at the specified index.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index is a number that represents the position or index of the user \nin the userDmData array within the sidebarService.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     \"online-div\" | \"offline-div\"\n\n                        \n                            \n                                returns either 'online-div' or 'offline-div' based on the value\nof isLoggedIn property in the userDmData array at the specified index.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserStatus\n                        \n                    \n                \n            \n            \n                \ngetUserStatus()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/sidebar.component.ts:124\n                        \n                    \n\n\n            \n                \n                        Function returns the class of user status for online indicator div\n\n\n                        \n                            Returns :     \"online-div\" | \"offline-div\"\n\n                        \n                            \n                                class as a string\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        goToChannel\n                        \n                    \n                \n            \n            \n                \ngoToChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/sidebar.component.ts:65\n                        \n                    \n\n\n            \n                \n                        Navigates to the specified channel and updates the active channel title.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        goToDirektMessage\n                        \n                    \n                \n            \n            \n                \ngoToDirektMessage(dm: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/sidebar.component.ts:86\n                        \n                    \n\n\n            \n                \n                        Navigates to the direct message and updates the active channel title.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dm\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe direct message to navigate to.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        goToPrivateMessage\n                        \n                    \n                \n            \n            \n                \ngoToPrivateMessage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/sidebar.component.ts:76\n                        \n                    \n\n\n            \n                \n                        Navigates to the private message and updates the active channel title.\nThis function clears the active style, checks if the mobile screen is small,\nand sets the active private channel to the user's name.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newMessage\n                        \n                    \n                \n            \n            \n                \nnewMessage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/sidebar.component.ts:146\n                        \n                    \n\n\n            \n                \n                        The newMessage function resets message-related properties and clears active styles, and closes the\nmobile section if the screen size is small.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/sidebar.component.ts:165\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/sidebar.component.ts:51\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openDialog\n                        \n                    \n                \n            \n            \n                \nopenDialog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/sidebar.component.ts:58\n                        \n                    \n\n\n            \n                \n                        Opens the AddNewChannel dialog.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleMenu\n                        \n                    \n                \n            \n            \n                \ntoggleMenu(menu: \"channel\" | \"message\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/mainsection/sidebar/sidebar.component.ts:115\n                        \n                    \n\n\n            \n                \n                        Toggles the state of the specified menu between 'open' and 'closed'.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                menu\n                                            \n                                                        \"channel\" | \"message\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe menu to be toggled. It can either be 'channel' or 'message'.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        activeChannelTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        activeDirectChannel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        activePrivateChannel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelService\n\n                    \n                \n                \n                    \n                        Default value : inject(ChannelService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatDialog\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        menuStates\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    channel: 'open',\n    message: 'open',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:106\n                        \n                    \n\n            \n                \n                    An object representing the states of different menus.\nEach menu state can either be 'open' or 'closed'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resizeListenerService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResizeListenerService\n\n                    \n                \n                \n                    \n                        Default value : inject(ResizeListenerService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sidebarService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SidebarService\n\n                    \n                \n                \n                    \n                        Default value : inject(SidebarService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubChannels\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubCurrentChannels\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubUserDmData\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubUserDmIds\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Default value : inject(UserService)\n                    \n                \n                    \n                        \n                                Defined in src/app/mainsection/sidebar/sidebar.component.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, inject } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style\n} from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { UserService } from '../../shared/services/user.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AddNewChannelComponent } from './add-new-channel/add-new-channel.component';\nimport { SidebarService } from '../../shared/services/sidebar.service';\nimport { ChannelService } from '../../shared/services/channel.service';\nimport { ResizeListenerService } from '../../shared/services/resize-listener.service';\nimport { MainsectionComponent } from '../mainsection.component';\nimport { Unsubscribe } from '@angular/fire/firestore';\n\n@Component({\n  selector: 'app-sidebar',\n  standalone: true,\n  imports: [CommonModule, AddNewChannelComponent],\n  animations: [\n    trigger('openClose', [\n      state('closed', style({ display: 'none' })),\n      state('open', style({ display: 'flex' })),\n    ]),\n  ],\n  templateUrl: './sidebar.component.html',\n  styleUrl: './sidebar.component.scss',\n})\n\nexport class SidebarComponent implements OnInit {\n  userService: UserService = inject(UserService);\n  sidebarService: SidebarService = inject(SidebarService);\n  channelService: ChannelService = inject(ChannelService);\n  resizeListenerService: ResizeListenerService = inject(ResizeListenerService);\n  activeChannelTitle: string = '';\n  activePrivateChannel: string = '';\n  activeDirectChannel: string = '';\n  unsubChannels;\n  unsubCurrentChannels;\n  unsubUserDmIds;\n  unsubUserDmData;\n\n  constructor(public dialog: MatDialog, private mainsectionComponent: MainsectionComponent) {\n    this.unsubChannels = this.sidebarService.retrieveChannels();\n    this.unsubCurrentChannels = this.sidebarService.retrieveCurrentChannels();\n    this.unsubUserDmIds = this.sidebarService.retrieveCurrentDirectMsgs();\n    this.unsubUserDmData = this.sidebarService.retrieveDmUserData();\n  }\n\n  ngOnInit() {\n    this.clearactiveStyle();\n  }\n\n  /**\n   * Opens the AddNewChannel dialog.\n   */\n  openDialog() {\n    this.dialog.open(AddNewChannelComponent, { panelClass: ['add-new-channel', 'box-radius', 'box-shadow'] });\n  }\n\n  /**\n   * Navigates to the specified channel and updates the active channel title.\n   */\n  goToChannel() {\n    this.clearactiveStyle();\n    this.checkMobileSmallScreen();\n    this.activeChannelTitle = this.channelService.channelMsgData.title;\n  }\n\n  /**\n   * Navigates to the private message and updates the active channel title.\n   * This function clears the active style, checks if the mobile screen is small,\n   * and sets the active private channel to the user's name.\n   */\n  goToPrivateMessage() {\n    this.clearactiveStyle();\n    this.checkMobileSmallScreen();\n    this.activePrivateChannel = this.userService.userInfo.name;\n  }\n\n  /**\n   * Navigates to the direct message and updates the active channel title.\n   * @param {string} dm - The direct message to navigate to.\n   */\n  goToDirektMessage(dm: string) {\n    this.clearactiveStyle();\n    this.checkMobileSmallScreen();\n    this.activeDirectChannel = dm;\n  }\n\n  /**\n   * Checks if the screen size is small or extra small and calls the handleCloseMobile method of the mainsectionComponent if true.\n   */\n  checkMobileSmallScreen() {\n    if (this.resizeListenerService.smScreen || this.resizeListenerService.xsmScreen) {\n      this.mainsectionComponent.hanldeCloseMobile();\n    }\n  }\n\n  /**\n   * An object representing the states of different menus.\n   * Each menu state can either be 'open' or 'closed'.\n   * @type {{ [state: string]: 'open' | 'closed' }}\n   */\n  menuStates: { [state: string]: 'open' | 'closed' } = {\n    channel: 'open',\n    message: 'open',\n  };\n\n  /**\n   * Toggles the state of the specified menu between 'open' and 'closed'.\n   * @param {'channel' | 'message'} menu - The menu to be toggled. It can either be 'channel' or 'message'.\n   */\n  toggleMenu(menu: 'channel' | 'message') {\n    this.menuStates[menu] = this.menuStates[menu] === 'open' ? 'closed' : 'open';\n  }\n\n  /**\n   * Function returns the class of user status for online indicator div\n   * @param type string - to determine which value should be returned\n   * @returns class as a string\n   */\n  getUserStatus() {\n    const loggedIn = this.userService.userInfo.isLoggedIn == true ? 'online-div' : 'offline-div';\n    return loggedIn;\n  }\n\n/**\n * The function `getDmStatus` returns a CSS class name based on the login status of a user in the\n * sidebar.\n * @param {number} index - The `index` is a number that represents the position or index of the user \n * in the `userDmData` array within the `sidebarService`.\n * @returns returns either 'online-div' or 'offline-div' based on the value\n * of `isLoggedIn` property in the `userDmData` array at the specified index.\n */\n  getDmStatus(index: number) {\n    const loggedIn = this.sidebarService.userDmData[index].isLoggedIn == true ? 'online-div' : 'offline-div';\n    return loggedIn;\n  }\n\n/**\n * The `newMessage` function resets message-related properties and clears active styles, and closes the\n * mobile section if the screen size is small.\n */\n  newMessage() {\n    this.channelService.privateMsg = false;\n    this.channelService.channelMsg = false;\n    this.channelService.messages = [];\n    this.clearactiveStyle();\n    if (this.resizeListenerService.smScreen || this.resizeListenerService.xsmScreen) {\n      this.mainsectionComponent.hanldeCloseMobile();\n    }\n  }\n\n/**\n * The clearactiveStyle function resets the active channel titles in a TypeScript class.\n */\n  clearactiveStyle() {\n    this.activeChannelTitle = '';\n    this.activePrivateChannel = '';\n    this.activeDirectChannel = '';\n  }\n\n  ngOnDestroy() {\n    this.unsubChannels();\n    this.unsubCurrentChannels();\n    this.unsubUserDmIds();\n    this.unsubUserDmData();\n    this.sidebarService.userDmData = [];\n  }\n}\n\n    \n\n    \n        \n  \n    \n    \n  \n  \n    \n      \n        \n      \n       Devspace \n    \n    \n  \n  \n    \n      \n        \n        \n        \n          \n          \n          Channels\n        \n      \n      \n      \n    \n    \n      @for (channel of sidebarService.channels; track $index) {\n      \n        \n        {{channel.title}}\n      \n      }\n      \n        \n        Channel hinzufügen\n      \n    \n  \n  \n    \n    \n    \n      \n      \n      Direktnachrichten\n    \n  \n  \n    \n      \n      \n      {{userService.userInfo.name}} (Du)\n    \n    @for (dm of sidebarService.userDmData; track dm; let i = $index) {\n    @if (dm.id != userService.userInfo.id) {\n    \n      \n      \n      {{dm.name}}\n    \n    }\n    }\n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                             Devspace                                                                             Channels                                        @for (channel of sidebarService.channels; track $index) {                      {{channel.title}}            }                      Channel hinzufügen                                            Direktnachrichten                              {{userService.userInfo.name}} (Du)        @for (dm of sidebarService.userDmData; track dm; let i = $index) {    @if (dm.id != userService.userInfo.id) {                      {{dm.name}}        }    }  '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'SidebarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SidebarService.html":{"url":"injectables/SidebarService.html","title":"injectable - SidebarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SidebarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/sidebar.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channels\n                            \n                            \n                                channelService\n                            \n                            \n                                channelUsers\n                            \n                            \n                                firestore\n                            \n                            \n                                userDmData\n                            \n                            \n                                userDmIds\n                            \n                            \n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getDmStatus\n                            \n                            \n                                    Async\n                                getUsersFromChannel\n                            \n                            \n                                refChannels\n                            \n                            \n                                refUserDirectMsgs\n                            \n                            \n                                    Async\n                                removeChannelUser\n                            \n                            \n                                retrieveChannels\n                            \n                            \n                                retrieveCurrentChannels\n                            \n                            \n                                retrieveCurrentDirectMsgs\n                            \n                            \n                                retrieveDmUserData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/sidebar.service.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getDmStatus\n                        \n                    \n                \n            \n            \n                \ngetDmStatus(isLoggedIn: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/sidebar.service.ts:99\n                        \n                    \n\n\n            \n                \n                        The function getDmStatus returns a CSS class name based on the user's login status.\nuser is currently logged in or not.\nof the isLoggedIn parameter.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                isLoggedIn\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe isLoggedIn parameter is a boolean value that indicates whether a\nuser is currently logged in or not.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     \"online-div\" | \"offline-div\"\n\n                        \n                            \n                                The function getDmStatus returns either 'online-div' or 'offline-div' based on the value\nof the isLoggedIn parameter.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUsersFromChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsersFromChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/sidebar.service.ts:130\n                        \n                    \n\n\n            \n                \n                        The function getUsersFromChannel retrieves users from a specific channel document in Firestore and\nadds them to an array.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refChannels\n                        \n                    \n                \n            \n            \n                \nrefChannels()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/sidebar.service.ts:122\n                        \n                    \n\n\n            \n                \n                        Firestore collection reference for Channels\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                collection\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refUserDirectMsgs\n                        \n                    \n                \n            \n            \n                \nrefUserDirectMsgs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/sidebar.service.ts:139\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeChannelUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeChannelUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/sidebar.service.ts:107\n                        \n                    \n\n\n            \n                \n                        Pushes the actual channels of the user into the channel array\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        retrieveChannels\n                        \n                    \n                \n            \n            \n                \nretrieveChannels()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/sidebar.service.ts:24\n                        \n                    \n\n\n            \n                \n                        Starts snapshot on Channels Collection\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                Unsubscribe\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        retrieveCurrentChannels\n                        \n                    \n                \n            \n            \n                \nretrieveCurrentChannels()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/sidebar.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Starts snapshot on userchannels and rearranges the channels in the sidebar when a user left or has been\nadded to a channel.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                Unsubscribe\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        retrieveCurrentDirectMsgs\n                        \n                    \n                \n            \n            \n                \nretrieveCurrentDirectMsgs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/sidebar.service.ts:62\n                        \n                    \n\n\n            \n                \n                        The function retrieveCurrentDirectMsgs retrieves the current direct messages for a user and\nreturns an unsubscribe function.\nfunction.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                The unsubscribe function is being returned from the retrieveCurrentDirectMsgs()\nfunction.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        retrieveDmUserData\n                        \n                    \n                \n            \n            \n                \nretrieveDmUserData()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/sidebar.service.ts:77\n                        \n                    \n\n\n            \n                \n                        The function retrieveDmUserData retrieves user data from Firestore based on specific user IDs and\nupdates the userDmData array asynchronously.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                The unsubscribe function is being returned from the retrieveDmUserData() function.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channels\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/sidebar.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelService\n\n                    \n                \n                \n                    \n                        Default value : inject(ChannelService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/sidebar.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/sidebar.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firestore\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Firestore\n\n                    \n                \n                \n                    \n                        Default value : inject(Firestore)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/sidebar.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userDmData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/sidebar.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userDmIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/sidebar.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Default value : inject(UserService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/sidebar.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, inject } from '@angular/core';\nimport { Firestore, Unsubscribe, addDoc, collection, doc, query, getDoc, getDocs, setDoc, onSnapshot, updateDoc, where, FieldValue, arrayRemove, DocumentData } from '@angular/fire/firestore';\nimport { UserService } from './user.service';\nimport { UserData } from '../models/userdata.class';\nimport { ChannelService } from './channel.service';\n@Injectable({\n  providedIn: 'root'\n})\nexport class SidebarService {\n  firestore: Firestore = inject(Firestore);\n  userService: UserService = inject(UserService);\n  channelService: ChannelService = inject(ChannelService);\n  channels: any[] = [];\n  channelUsers: any[] = [];\n  userDmIds: string[] = [];\n  userDmData: any[] = [];\n\n  constructor() { }\n\n  /**\n   * Starts snapshot on Channels Collection\n   * @returns Unsubscribe\n   */\n  retrieveChannels() {\n    const unsubscribe = onSnapshot(query(this.refChannels()), (querySnapshot) => {\n      this.channels = [];\n      querySnapshot.forEach(channel => {\n        if (this.userService.userChannels.includes(channel.id))\n          this.channels.push(channel.data())\n      });\n      if (this.channelService.channelMsg) {\n        this.channelService.refreshChannelData();\n      }\n    });\n    return unsubscribe\n  }\n\n  /**\n   * Starts snapshot on userchannels and rearranges the channels in the sidebar when a user left or has been\n   * added to a channel.\n   * @returns Unsubscribe\n   */\n  retrieveCurrentChannels() {\n    const unsubscribe = onSnapshot(query(this.userService.refUserChannels()), async (querySnapshot) => {\n      let channelCounter = 0;\n      querySnapshot.forEach(() => {\n        channelCounter++;\n      });\n      if (channelCounter != this.channels.length) {\n        await this.removeChannelUser();\n      }\n    });\n    return unsubscribe\n  }\n\n/**\n * The function `retrieveCurrentDirectMsgs` retrieves the current direct messages for a user and\n * returns an unsubscribe function.\n * @returns The `unsubscribe` function is being returned from the `retrieveCurrentDirectMsgs()`\n * function.\n */\n  retrieveCurrentDirectMsgs() {\n    const unsubscribe = onSnapshot(query(this.refUserDirectMsgs()), (querySnapshot) => {\n      this.userDmIds = [];\n      querySnapshot.forEach((userDm) => {\n        this.userDmIds.push(userDm.data()['dmUserId'])\n      });\n    });\n    return unsubscribe\n  }\n\n/**\n * The function `retrieveDmUserData` retrieves user data from Firestore based on specific user IDs and\n * updates the `userDmData` array asynchronously.\n * @returns The `unsubscribe` function is being returned from the `retrieveDmUserData()` function.\n */\n  retrieveDmUserData() {\n    const unsubscribe = onSnapshot(query(this.userService.refUserProfile()), (querySnapshot) => {\n      setTimeout(() => {\n        this.userDmData = [];\n        querySnapshot.forEach((userDm) => {\n          if (this.userDmIds.includes(userDm.id)) {\n            const data: any = userDm.data();\n            this.userDmData.push(data);\n          }\n        });\n      }, 25);\n    });\n    return unsubscribe\n  }\n\n/**\n * The function `getDmStatus` returns a CSS class name based on the user's login status.\n * @param {boolean} isLoggedIn - The `isLoggedIn` parameter is a boolean value that indicates whether a\n * user is currently logged in or not.\n * @returns The function `getDmStatus` returns either 'online-div' or 'offline-div' based on the value\n * of the `isLoggedIn` parameter.\n */\n  getDmStatus(isLoggedIn: boolean) {\n    const loggedIn = isLoggedIn == true ? 'online-div' : 'offline-div';\n    return loggedIn;\n  }\n\n  /**\n   * Pushes the actual channels of the user into the channel array\n   */\n  async removeChannelUser() {\n    const querySnapshot = await getDocs(query(this.refChannels()));\n    this.channels = [],\n      this.channelService.currentChannelUsers = [];\n    querySnapshot.forEach(channel => {\n      if (this.userService.userChannels.includes(channel.id)) {\n        this.channels.push(channel.data())\n      }\n    });\n  }\n\n  /**\n   * Firestore collection reference for Channels\n   * @returns collection\n   */\n  refChannels() {\n    return collection(this.firestore, \"Channels\")\n  }\n\n/**\n * The function `getUsersFromChannel` retrieves users from a specific channel document in Firestore and\n * adds them to an array.\n */\n  async getUsersFromChannel() {\n    const docRef = doc(this.firestore, \"Channels\", \"eGATth4XDS0ztUbhnYsR\");\n    const docSnap = await getDoc(docRef);\n    const channel: any = docSnap.data();\n    channel.users.forEach((element: any) => {\n      this.channelUsers.push(element);\n    });\n  }\n\n  refUserDirectMsgs() {\n    return collection(this.firestore, 'user', sessionStorage.getItem(\"uid\") as string, 'directmessages')\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StateService.html":{"url":"injectables/StateService.html","title":"injectable - StateService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/state-service.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                editChannelDialogOpenMobile\n                            \n                            \n                                openDialogAddUser$\n                            \n                            \n                                resizeListenerService\n                            \n                            \n                                    Private\n                                showAddUserSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getEditChannelDialogOpenMobile\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                setEditChannelDialogOpenMobile\n                            \n                            \n                                triggerAddUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/state-service.service.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor function that registers a resize callback for the edit channel dialog on mobile devices.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getEditChannelDialogOpenMobile\n                        \n                    \n                \n            \n            \n                \ngetEditChannelDialogOpenMobile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/state-service.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Retrieves the state of the edit channel dialog on mobile devices.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                The state of the edit channel dialog on mobile devices.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/state-service.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Unregisters the resize callback function from the ResizeListenerService\nin order to clean up and prevent memory leaks when the component is destroyed.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setEditChannelDialogOpenMobile\n                        \n                    \n                \n            \n            \n                \nsetEditChannelDialogOpenMobile(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/state-service.service.ts:25\n                        \n                    \n\n\n            \n                \n                        Sets the state of the edit channel dialog on mobile devices.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe state to set for the edit channel dialog on mobile devices.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        triggerAddUser\n                        \n                    \n                \n            \n            \n                \ntriggerAddUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/state-service.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Triggers the showAddUserSubject BehaviorSubject to emit a new value, indicating that the add user dialog should be opened.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        editChannelDialogOpenMobile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/state-service.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openDialogAddUser$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.showAddUserSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/state-service.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resizeListenerService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResizeListenerService\n\n                    \n                \n                \n                    \n                        Default value : inject(ResizeListenerService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/state-service.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showAddUserSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/state-service.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, inject } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { ResizeListenerService } from '../../shared/services/resize-listener.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StateService {\n  resizeListenerService: ResizeListenerService = inject(ResizeListenerService);\n  private showAddUserSubject = new Subject();\n  openDialogAddUser$ = this.showAddUserSubject.asObservable();\n  editChannelDialogOpenMobile: boolean = false;\n\n  /**\n   * Constructor function that registers a resize callback for the edit channel dialog on mobile devices.\n   */\n  constructor() {\n    this.resizeListenerService.registerResizeCallback(this.getEditChannelDialogOpenMobile.bind(this));\n  }\n\n  /**\n   * Sets the state of the edit channel dialog on mobile devices.\n   * @param {boolean} state - The state to set for the edit channel dialog on mobile devices.\n   */\n  setEditChannelDialogOpenMobile(state: boolean): void {\n    this.editChannelDialogOpenMobile = state;\n  }\n\n  /**\n   * Retrieves the state of the edit channel dialog on mobile devices.\n   * @return {boolean} The state of the edit channel dialog on mobile devices.\n   */\n  getEditChannelDialogOpenMobile(): boolean {\n    return this.editChannelDialogOpenMobile;\n  }\n\n  /**\n   * Triggers the `showAddUserSubject` BehaviorSubject to emit a new value, indicating that the add user dialog should be opened.\n   */\n  triggerAddUser(): void {\n    this.showAddUserSubject.next();\n  }\n\n  /**\n   * Unregisters the resize callback function from the ResizeListenerService\n   * in order to clean up and prevent memory leaks when the component is destroyed.\n   */\n  ngOnDestroy(): void {\n    this.resizeListenerService.unregisterResizeCallback(this.getEditChannelDialogOpenMobile.bind(this));\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ThreadService.html":{"url":"injectables/ThreadService.html","title":"injectable - ThreadService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ThreadService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/thread.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelService\n                            \n                            \n                                data$\n                            \n                            \n                                    Private\n                                dataSubject\n                            \n                            \n                                fileData\n                            \n                            \n                                firestore\n                            \n                            \n                                hideThread$\n                            \n                            \n                                    Private\n                                hideThreadSubject\n                            \n                            \n                                isActive\n                            \n                            \n                                isSubscribed\n                            \n                            \n                                messages\n                            \n                            \n                                messagesTimestamp\n                            \n                            \n                                originMessage\n                            \n                            \n                                startMutationObserver\n                            \n                            \n                                storageService\n                            \n                            \n                                unsub\n                            \n                            \n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeData\n                            \n                            \n                                clearFileData\n                            \n                            \n                                    Async\n                                createThreadMessage\n                            \n                            \n                                refThreadMessages\n                            \n                            \n                                refUpdateFilePath\n                            \n                            \n                                refUpdateThread\n                            \n                            \n                                restartListener\n                            \n                            \n                                startListenerChannel\n                            \n                            \n                                stopListener\n                            \n                            \n                                triggerHideThread\n                            \n                            \n                                    Async\n                                updateChannelMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/thread.service.ts:27\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changeData\n                        \n                    \n                \n            \n            \n                \nchangeData(data: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/thread.service.ts:37\n                        \n                    \n\n\n            \n                \n                        The changeData function in TypeScript updates the data and restarts the listener.\nThis string is then used to update the data subject using this.dataSubject.next(data) and to\nrestart a listener using this.restartListener(data).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data parameter is a string that is passed to the changeData method.\nThis string is then used to update the data subject using this.dataSubject.next(data) and to\nrestart a listener using this.restartListener(data).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearFileData\n                        \n                    \n                \n            \n            \n                \nclearFileData()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/thread.service.ts:98\n                        \n                    \n\n\n            \n                \n                        The clearFileData function resets file data and aborts any ongoing file upload for a thread.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createThreadMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    createThreadMessage(obj: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/thread.service.ts:70\n                        \n                    \n\n\n            \n                \n                        The createThreadMessage function asynchronously creates a new message in a thread, updates the\nthread information, and handles file uploads if present.\nmessage thread. It takes an obj parameter which contains the data for the new message being\ncreated. The function first adds the new message document to a collection using addDoc, then\nupdates the thread with the new message\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe createThreadMessage function is an asynchronous function that creates a new\nmessage thread. It takes an obj parameter which contains the data for the new message being\ncreated. The function first adds the new message document to a collection using addDoc, then\nupdates the thread with the new message\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refThreadMessages\n                        \n                    \n                \n            \n            \n                \nrefThreadMessages()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/thread.service.ts:146\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refUpdateFilePath\n                        \n                    \n                \n            \n            \n                \nrefUpdateFilePath(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/thread.service.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refUpdateThread\n                        \n                    \n                \n            \n            \n                \nrefUpdateThread()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/thread.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        restartListener\n                        \n                    \n                \n            \n            \n                \nrestartListener(data: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/thread.service.ts:121\n                        \n                    \n\n\n            \n                \n                        The restartListener function stops the current listener and then starts a new listener with the\nprovided data.\nparameter is used to restart the listener by stopping it and then starting it again with the new\ndata provided.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe restartListener function takes a data parameter of type string. This\nparameter is used to restart the listener by stopping it and then starting it again with the new\ndata provided.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startListenerChannel\n                        \n                    \n                \n            \n            \n                \nstartListenerChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/thread.service.ts:46\n                        \n                    \n\n\n            \n                \n                        The startListenerChannel function sets up a listener for changes in a Firestore query and updates\nthe messages array accordingly.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stopListener\n                        \n                    \n                \n            \n            \n                \nstopListener()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/thread.service.ts:106\n                        \n                    \n\n\n            \n                \n                        The stopListener function checks if a subscription is active and unsubscribes if it is.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        triggerHideThread\n                        \n                    \n                \n            \n            \n                \ntriggerHideThread()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/thread.service.ts:159\n                        \n                    \n\n\n            \n                \n                        Triggers the hiding of the thread by emitting a value through the hideThreadSubject.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateChannelMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateChannelMessage(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/thread.service.ts:134\n                        \n                    \n\n\n            \n                \n                        The updateChannelMessage function asynchronously updates a specific message in a channel based on\na matching timestamp.\ninformation related to updating a channel message. It likely includes properties such as\ntimestamp, emoji, and message that are used to identify and update a specific message in a\nchannel.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data parameter in the updateChannelMessage contains\ninformation related to updating a channel message. It likely includes properties such as\ntimestamp, emoji, and message that are used to identify and update a specific message in a\nchannel.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelService\n\n                    \n                \n                \n                    \n                        Default value : inject(ChannelService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.dataSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dataSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject('')\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fileData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : { src: '', name: '', type: '' }\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firestore\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Firestore\n\n                    \n                \n                \n                    \n                        Default value : inject(Firestore)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hideThread$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.hideThreadSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hideThreadSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSubscribed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messagesTimestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        originMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startMutationObserver\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storageService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StorageService\n\n                    \n                \n                \n                    \n                        Default value : inject(StorageService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsub\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Unsubscribe\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Default value : inject(UserService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/thread.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, inject } from '@angular/core';\nimport { Firestore, Unsubscribe, addDoc, collection, doc, getDocs, onSnapshot, query, updateDoc } from '@angular/fire/firestore';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { ChannelService } from './channel.service';\nimport { UserService } from './user.service';\nimport { StorageService } from '../../shared/services/storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThreadService {\n  channelService: ChannelService = inject(ChannelService);\n  userService: UserService = inject(UserService);\n  firestore: Firestore = inject(Firestore);\n  storageService: StorageService = inject(StorageService);\n  originMessage!: any;\n  isActive: boolean = false;\n  private dataSubject = new BehaviorSubject('');\n  data$ = this.dataSubject.asObservable();\n  private hideThreadSubject = new Subject();\n  hideThread$ = this.hideThreadSubject.asObservable();\n  isSubscribed: boolean = false;\n  unsub!: Unsubscribe;\n  messages: any[] = [];\n  messagesTimestamp: any[] = [];\n  startMutationObserver: boolean = false;\n  fileData: any = { src: '', name: '', type: '' };\n\n  constructor() { }\n\n  /**\n   * The `changeData` function in TypeScript updates the data and restarts the listener.\n   * @param {string} data - The `data` parameter is a string that is passed to the `changeData` method.\n   * This string is then used to update the data subject using `this.dataSubject.next(data)` and to\n   * restart a listener using `this.restartListener(data)`.\n   */\n  changeData(data: string) {\n    this.dataSubject.next(data);\n    this.restartListener(data);\n  }\n\n/**\n * The `startListenerChannel` function sets up a listener for changes in a Firestore query and updates\n * the messages array accordingly.\n */\n  startListenerChannel() {\n    if (this.isSubscribed)\n      this.unsub();\n\n    this.unsub = onSnapshot(query(this.refThreadMessages()), (querySnapshot) => {\n      this.messages = [];\n      this.messagesTimestamp = [];\n      querySnapshot.forEach(async (doc) => {\n        this.messages.unshift(doc.data())\n        this.isSubscribed = true;\n      });\n      console.log(this.messages);\n      this.messages.sort((a, b) => a.timestamp - b.timestamp);\n    });\n  }\n\n/**\n * The `createThreadMessage` function asynchronously creates a new message in a thread, updates the\n * thread information, and handles file uploads if present.\n * @param {any} obj - The `createThreadMessage` function is an asynchronous function that creates a new\n * message thread. It takes an `obj` parameter which contains the data for the new message being\n * created. The function first adds the new message document to a collection using `addDoc`, then\n * updates the thread with the new message\n */\n  async createThreadMessage(obj: any) {\n    await addDoc(this.refThreadMessages(), obj)\n      .then(async (docRef) => {\n        await updateDoc(this.refUpdateThread(), {\n          repliesCount: this.messages.length,\n          lastReply: obj.timestamp\n        });\n        if (this.storageService.filesTextareaThread && this.storageService.filesTextareaThread.length > 0) {\n          this.fileData.src = this.storageService.downloadUrlThread;\n          this.fileData.name = this.storageService.fileNameTextareaThread;\n          this.fileData.type = this.storageService.uploadedFileTypeThread;\n          await updateDoc(this.refUpdateFilePath(docRef.id), {\n            uploadedFile: this.fileData\n          });\n          this.clearFileData();\n        }\n      });\n  }\n\n\n  refUpdateFilePath(id: string) {\n    return doc(this.firestore, \"Channels\", this.channelService.channelMsgData.collection, 'messages', this.originMessage.msgId, 'thread', id)\n  }\n\n\n/**\n * The clearFileData function resets file data and aborts any ongoing file upload for a thread.\n */\n  clearFileData() {\n    this.fileData = { src: '', name: '', type: '' };\n    this.storageService.abortUploadForThread();\n  }\n\n  /**\n   * The `stopListener` function checks if a subscription is active and unsubscribes if it is.\n   */\n  stopListener() {\n    if (this.isSubscribed) {\n      this.unsub();\n      this.isSubscribed = false;\n      console.log(\"Listener Unsubscribed\");\n    }\n  }\n\n  /**\n   * The `restartListener` function stops the current listener and then starts a new listener with the\n   * provided data.\n   * @param {string} data - The `restartListener` function takes a `data` parameter of type string. This\n   * parameter is used to restart the listener by stopping it and then starting it again with the new\n   * data provided.\n   */\n  restartListener(data: string) {\n    this.stopListener();\n    this.startListenerChannel();\n  }\n\n/**\n * The `updateChannelMessage` function asynchronously updates a specific message in a channel based on\n * a matching timestamp.\n * @param {any} data - The `data` parameter in the `updateChannelMessage` contains\n * information related to updating a channel message. It likely includes properties such as\n * `timestamp`, `emoji`, and `message` that are used to identify and update a specific message in a\n * channel.\n */\n  async updateChannelMessage(data: any) {\n    const querySnapshot = await getDocs(query(this.refThreadMessages()));\n    querySnapshot.forEach(async (dataset) => {\n      if (data.timestamp == dataset.data()['timestamp']) {\n        await updateDoc(doc(this.firestore, \"Channels\", this.channelService.channelMsgData.collection, 'messages', this.originMessage.msgId, 'thread', dataset.id), {\n          emoji: data.emoji,\n          message: data.message\n        });\n      }\n    });\n  }\n\n  refThreadMessages() {\n    return collection(this.firestore, \"Channels\", this.channelService.channelMsgData.collection, 'messages', this.originMessage.msgId, 'thread')\n  }\n\n  refUpdateThread() {\n    return doc(this.firestore, \"Channels\", this.channelService.channelMsgData.collection, \"messages\", this.originMessage.msgId)\n  }\n\n\n\n  /**\n   * Triggers the hiding of the thread by emitting a value through the hideThreadSubject.\n   */\n  triggerHideThread() {\n    this.hideThreadSubject.next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserData.html":{"url":"classes/UserData.html","title":"class - UserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/userdata.class.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                isLoggedIn\n                            \n                            \n                                name\n                            \n                            \n                                profilePicture\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(obj?: any)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/models/userdata.class.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        obj\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/userdata.class.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/userdata.class.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoggedIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/userdata.class.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/userdata.class.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profilePicture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/models/userdata.class.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserData {\n    email: string;\n    id: string;\n    isLoggedIn: boolean;\n    name: string;\n    profilePicture: string;\n\n    constructor(obj?: any) {\n        this.email = obj ? obj.email : \"\";\n        this.id = obj ? obj.id : \"\";\n        this.isLoggedIn = true;\n        this.name = obj ? obj.name : \"\";\n        this.profilePicture = obj ? obj.profilePicture : \"\";\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserInfo.html":{"url":"interfaces/UserInfo.html","title":"interface - UserInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/userinfo.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            isLoggedIn\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            profilePicture\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isLoggedIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isLoggedIn:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profilePicture\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        profilePicture:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInfo {\n    email: string,\n    id: string,\n    isLoggedIn: boolean,\n    name: string,\n    profilePicture: string,\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/UserMenuDialogComponent.html":{"url":"components/UserMenuDialogComponent.html","title":"component - UserMenuDialogComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  UserMenuDialogComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/header/user-menu-dialog/user-menu-dialog.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-user-menu-dialog\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            MatDialogTitle\n                            MatDialogContent\n                            MatDialogActions\n                            MatDialogClose\n                            RouterLink\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./user-menu-dialog.component.html\n            \n\n\n\n            \n                styleUrl\n                ./user-menu-dialog.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelService\n                            \n                            \n                                    Public\n                                dialog\n                            \n                            \n                                hoverLogout\n                            \n                            \n                                hoverProfile\n                            \n                            \n                                threadService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeDialog\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                openDialog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialog: MatDialog, dialogRef: MatDialogRef, dialogRefAddUser: MatDialogRef, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/components/header/user-menu-dialog/user-menu-dialog.component.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialogRefAddUser\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeDialog\n                        \n                    \n                \n            \n            \n                \ncloseDialog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/header/user-menu-dialog/user-menu-dialog.component.ts:59\n                        \n                    \n\n\n            \n                \n                        The closeDialog function closes all open dialog windows.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/header/user-menu-dialog/user-menu-dialog.component.ts:32\n                        \n                    \n\n\n            \n                \n                        The logout function logs out the user, clears session storage, signs out of authentication, stops\nlistening to channels and threads, resets user information, and closes a dialog.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openDialog\n                        \n                    \n                \n            \n            \n                \nopenDialog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/header/user-menu-dialog/user-menu-dialog.component.ts:48\n                        \n                    \n\n\n            \n                \n                        This function opens the dialog and determines if the ShowProfile component is editable or not\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelService\n\n                    \n                \n                \n                    \n                        Default value : inject(ChannelService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/user-menu-dialog/user-menu-dialog.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatDialog\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/user-menu-dialog/user-menu-dialog.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hoverLogout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/user-menu-dialog/user-menu-dialog.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hoverProfile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/user-menu-dialog/user-menu-dialog.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        threadService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ThreadService\n\n                    \n                \n                \n                    \n                        Default value : inject(ThreadService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/user-menu-dialog/user-menu-dialog.component.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatDialog, MatDialogActions, MatDialogClose, MatDialogContent, MatDialogRef, MatDialogTitle } from '@angular/material/dialog';\nimport { RouterLink } from '@angular/router';\nimport { ShowProfileComponent } from '../../show-profile/show-profile.component';\nimport { UserService } from '../../../services/user.service';\nimport { UserData } from '../../../models/userdata.class';\nimport { getAuth } from '@angular/fire/auth';\nimport { ChannelService } from '../../../services/channel.service';\nimport { subscribeOn } from 'rxjs';\nimport { AddUserDialogComponent } from '../../../../mainsection/channel/add-user-dialog/add-user-dialog.component';\nimport { AddUserToChannelDialogComponent } from '../../../../mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component';\nimport { ThreadService } from '../../../services/thread.service';\n@Component({\n  selector: 'app-user-menu-dialog',\n  standalone: true,\n  imports: [CommonModule, MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogClose, RouterLink],\n  templateUrl: './user-menu-dialog.component.html',\n  styleUrl: './user-menu-dialog.component.scss'\n})\nexport class UserMenuDialogComponent {\n  constructor(public dialog: MatDialog, private dialogRef: MatDialogRef, private dialogRefAddUser: MatDialogRef, private userService: UserService) { }\n  channelService: ChannelService = inject(ChannelService);\n  threadService: ThreadService = inject(ThreadService);\n  hoverProfile: boolean = false;\n  hoverLogout: boolean = false;\n\n  /**\n   * The `logout` function logs out the user, clears session storage, signs out of authentication, stops\n   * listening to channels and threads, resets user information, and closes a dialog.\n   */\n  async logout() {\n    await this.userService.userLoggedOut();\n    sessionStorage.removeItem('uid');\n    getAuth().signOut();\n    this.channelService.stopListener();\n    this.threadService.stopListener();\n    setTimeout(() => {\n      this.userService.userInfo = new UserData();\n    }, 200);\n    this.dialogRef.close();\n  }\n\n  /**\n   * This function opens the dialog and determines if the ShowProfile component is editable or not\n   * @param profileEditable boolean - determine if ShowUser component is editable or not\n   */\n  openDialog() {\n    let dialogRef = this.dialog.open(ShowProfileComponent, { panelClass: ['show-profile', 'box-shadow', 'box-radius-right-corner'] });\n    dialogRef.componentInstance.profileEditable = true;\n    dialogRef\n      .afterClosed()\n      .subscribe();\n  }\n\n  /**\n   * The closeDialog function closes all open dialog windows.\n   */\n  closeDialog() {\n    this.dialog.closeAll();\n  }\n}\n\n    \n\n    \n        \n    \n    \n        \n            Profil\n        \n    \n    \n        \n            Log Out\n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                            Profil                                    Log Out            '\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'UserMenuDialogComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                allUsers\n                            \n                            \n                                createUserInfo\n                            \n                            \n                                    Optional\n                                currentUser\n                            \n                            \n                                firestore\n                            \n                            \n                                key\n                            \n                            \n                                otherUserInfo\n                            \n                            \n                                userChannels\n                            \n                            \n                                userInfo\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkIfUserExists\n                            \n                            \n                                    Async\n                                checkRegisteredUser\n                            \n                            \n                                    Async\n                                createUserProfile\n                            \n                            \n                                    Async\n                                getOnlineStatusProfile\n                            \n                            \n                                newUserAvatar\n                            \n                            \n                                prepareDataNewUser\n                            \n                            \n                                prepareDataNewUserGoogle\n                            \n                            \n                                refUserChannels\n                            \n                            \n                                refUserProfile\n                            \n                            \n                                retrieveAllUsers\n                            \n                            \n                                    Async\n                                retrieveOtherUserProfile\n                            \n                            \n                                retrieveUserChannels\n                            \n                            \n                                retrieveUserProfile\n                            \n                            \n                                    Async\n                                updateUserProfile\n                            \n                            \n                                    Async\n                                updateUserProfilePicture\n                            \n                            \n                                    Async\n                                userLoggedIn\n                            \n                            \n                                    Async\n                                userLoggedOut\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/user.service.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkIfUserExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkIfUserExists(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Check if a user already exists in Firestore\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user ID to check\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A boolean indicating whether the user exists\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkRegisteredUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkRegisteredUser(email: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Check if a user with the given email and name already exists in the Firestore \"user\" collection.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe email of the user to check.\n\n\n                                            \n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the user to check.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to an object with two boolean properties.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUserProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUserProfile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:162\n                        \n                    \n\n\n            \n                \n                        Creates a new user in firestore\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOnlineStatusProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOnlineStatusProfile(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:229\n                        \n                    \n\n\n            \n                \n                        The function getOnlineStatusProfile retrieves the online status profile of a user with the\nspecified ID.\nrepresents the unique identifier of a user profile.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id parameter in the getOnlineStatusProfile function is a string that\nrepresents the unique identifier of a user profile.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newUserAvatar\n                        \n                    \n                \n            \n            \n                \nnewUserAvatar(url: any, uid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:218\n                        \n                    \n\n\n            \n                \n                        Function to assign Profile picture url to createUserInfo\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nURL of the img uploaded to the firestore\n\n\n                                            \n                                        \n                                        \n                                                uid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prepareDataNewUser\n                        \n                    \n                \n            \n            \n                \nprepareDataNewUser(obj: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:195\n                        \n                    \n\n\n            \n                \n                        Function to assign incoming data to createUserInfo\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nFormGroup which contains data from the register form\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prepareDataNewUserGoogle\n                        \n                    \n                \n            \n            \n                \nprepareDataNewUserGoogle(obj: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:206\n                        \n                    \n\n\n            \n                \n                        Function to assign incoming data to createUserInfo\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nFormGroup which contains data from the register form\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refUserChannels\n                        \n                    \n                \n            \n            \n                \nrefUserChannels()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:186\n                        \n                    \n\n\n            \n                \n                        The refUserChannels function returns a reference to the user channels collection in Firestore\nbased on the current user's ID stored in sessionStorage.\nwithin the 'user' document corresponding to the user ID stored in the session storage.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                The refUserChannels() function is returning a reference to the 'userchannels' collection\nwithin the 'user' document corresponding to the user ID stored in the session storage.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refUserProfile\n                        \n                    \n                \n            \n            \n                \nrefUserProfile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:176\n                        \n                    \n\n\n            \n                \n                        Return the collection to which should be referenced to in a snapshot for example\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                collection reference - firestore\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        retrieveAllUsers\n                        \n                    \n                \n            \n            \n                \nretrieveAllUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:123\n                        \n                    \n\n\n            \n                \n                        The function retrieveAllUsers retrieves all user data from a Firestore collection\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                The unsubscribe function is being returned from the retrieveAllUsers function.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        retrieveOtherUserProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    retrieveOtherUserProfile(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:78\n                        \n                    \n\n\n            \n                \n                        This TypeScript function retrieves the profile information of another user using their ID from a\nFirestore database.\nrepresents the unique identifier of the user whose profile you want to retrieve.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id parameter in the retrieveOtherUserProfile function is a string that\nrepresents the unique identifier of the user whose profile you want to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        retrieveUserChannels\n                        \n                    \n                \n            \n            \n                \nretrieveUserChannels()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:109\n                        \n                    \n\n\n            \n                \n                        listens to changes to referenced collection and stores the data\nin userChannels\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                Unsubscribe from snapshot\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        retrieveUserProfile\n                        \n                    \n                \n            \n            \n                \nretrieveUserProfile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:64\n                        \n                    \n\n\n            \n                \n                        listens to changes to referenced collection and stores the data\nin userInfo\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                Unsubscribe from snapshot\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUserProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserProfile(ngForm: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:137\n                        \n                    \n\n\n            \n                \n                        Gets the Data from input parameter and updates it in the firestore of the current user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ngForm\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Objectdata provided by the form in show-profile component\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUserProfilePicture\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserProfilePicture(picturePath: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:153\n                        \n                    \n\n\n            \n                \n                        The updateUserProfilePicture function updates the profile picture of the current user in a\nFirestore database.\nis a string that represents the file path or URL of the new profile picture that will be updated in\nthe user's profile.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                picturePath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe picturePath parameter in the updateUserProfilePicture function\nis a string that represents the file path or URL of the new profile picture that will be updated in\nthe user's profile.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        userLoggedIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    userLoggedIn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:88\n                        \n                    \n\n\n            \n                \n                        The userLoggedIn function updates the isLoggedIn field in the user profile document to true for\nthe currently logged-in user.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        userLoggedOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    userLoggedOut()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user.service.ts:98\n                        \n                    \n\n\n            \n                \n                        The function userLoggedOut updates the isLoggedIn field to false in the user profile document\nwhen the user logs out.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        allUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DocumentData[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/user.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createUserInfo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserInfo\n\n                    \n                \n                \n                    \n                        Default value : {\n    name: \"\",\n    email: \"\",\n    id: \"\",\n    isLoggedIn: false,\n    profilePicture: \"\",\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/user.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        currentUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/user.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firestore\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Firestore\n\n                    \n                \n                \n                    \n                        Default value : inject(Firestore)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/user.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/user.service.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        otherUserInfo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/user.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userChannels\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/user.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userInfo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserInfo\n\n                    \n                \n                \n                    \n                        Default value : new UserData()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/user.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, inject } from '@angular/core';\nimport { Firestore, Unsubscribe, addDoc, collection, doc, query, getDoc, getDocs, setDoc, onSnapshot, updateDoc, where, DocumentData, arrayUnion } from '@angular/fire/firestore';\nimport { UserInfo } from '../interfaces/userinfo';\nimport { UserData } from '../models/userdata.class';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class UserService {\n  firestore: Firestore = inject(Firestore);\n  currentUser?: string | null;\n  userInfo: UserInfo = new UserData();\n  otherUserInfo!: any;\n  userChannels: string[] = [];\n  allUsers: DocumentData[] = [];\n  createUserInfo: UserInfo = {\n    name: \"\",\n    email: \"\",\n    id: \"\",\n    isLoggedIn: false,\n    profilePicture: \"\",\n  };\n  key!: string;\n\n  constructor(private router: Router) {\n    if (sessionStorage.getItem(\"uid\") === null && (this.router.url !== '/register' && !this.router.url.includes('confirmpassword')))\n      this.router.navigate(['/']);\n  }\n\n  /**\n   * Check if a user already exists in Firestore\n   * @param userId - The user ID to check\n   * @returns A boolean indicating whether the user exists\n   */\n  async checkIfUserExists(userId: string): Promise {\n    const userDoc = await getDoc(doc(this.firestore, \"user\", userId));\n    const userExists = userDoc.exists();\n    return userExists;\n  }\n\n  /**\n   * Check if a user with the given email and name already exists in the Firestore \"user\" collection.\n   * @param {string} email - The email of the user to check.\n   * @param {string} name - The name of the user to check.\n   * @return {Promise} A promise that resolves to an object with two boolean properties.\n   */\n  async checkRegisteredUser(email: string, name: string): Promise {\n    const emailQuery = query(collection(this.firestore, \"user\"), where(\"email\", \"==\", email));\n    const nameQuery = query(collection(this.firestore, \"user\"), where(\"name\", \"==\", name));\n    const [emailSnapshot, nameSnapshot] = await Promise.all([getDocs(emailQuery), getDocs(nameQuery)]);\n    return {\n      emailExists: !emailSnapshot.empty,\n      nameExists: !nameSnapshot.empty\n    };\n  }\n\n  /**\n   * listens to changes to referenced collection and stores the data\n   * in userInfo\n   * @returns Unsubscribe from snapshot\n   */\n  retrieveUserProfile() {\n    const unsubscribe = onSnapshot(doc(this.refUserProfile(), sessionStorage.getItem(\"uid\") as string), async (user) => {\n      this.userInfo = new UserData(user.data())\n      this.currentUser = sessionStorage.getItem(\"uid\");\n    });\n    return unsubscribe\n  }\n\n/**\n * This TypeScript function retrieves the profile information of another user using their ID from a\n * Firestore database.\n * @param {string} id - The `id` parameter in the `retrieveOtherUserProfile` function is a string that\n * represents the unique identifier of the user whose profile you want to retrieve.\n */\n  async retrieveOtherUserProfile(id: string) {\n    const docRef = doc(this.firestore, \"user\", id);\n    const docSnap = await getDoc(docRef);\n    this.otherUserInfo = docSnap.data();\n  }\n\n/**\n * The `userLoggedIn` function updates the `isLoggedIn` field in the user profile document to true for\n * the currently logged-in user.\n */\n  async userLoggedIn() {\n    await updateDoc(doc(this.refUserProfile(), sessionStorage.getItem('uid') as string), {\n      isLoggedIn: true\n    });\n  }\n\n/**\n * The function `userLoggedOut` updates the `isLoggedIn` field to `false` in the user profile document\n * when the user logs out.\n */\n  async userLoggedOut() {\n    await updateDoc(doc(this.refUserProfile(), sessionStorage.getItem('uid') as string), {\n      isLoggedIn: false\n    });\n  }\n\n  /**\n   * listens to changes to referenced collection and stores the data\n   * in userChannels\n   * @returns Unsubscribe from snapshot\n   */\n  retrieveUserChannels() {\n    const unsubscribe = onSnapshot(query(this.refUserChannels()), (querySnapshot) => {\n      this.userChannels = [];\n      querySnapshot.forEach(element => {\n        this.userChannels.unshift(element.data()['channelid']);\n      });\n    });\n    return unsubscribe\n  }\n\n  /**\n   * The function `retrieveAllUsers` retrieves all user data from a Firestore collection\n   * @returns The `unsubscribe` function is being returned from the `retrieveAllUsers` function.\n   */\n  retrieveAllUsers() {\n    const unsubscribe = onSnapshot(query(this.refUserProfile()), (querySnapshot) => {\n      this.allUsers = [];\n      querySnapshot.forEach((doc) => {\n        this.allUsers.push(doc.data())\n      });\n    });\n    return unsubscribe\n  }\n\n  /**\n   * Gets the Data from input parameter and updates it in the firestore of the current user\n   * @param ngForm Objectdata provided by the form in show-profile component\n   */\n  async updateUserProfile(ngForm: any) {\n    const userProfileData = ngForm.value\n\n    await updateDoc(doc(this.refUserProfile(), this.currentUser as string), {\n      name: userProfileData.name,\n      email: userProfileData.email\n    });\n  }\n\n  /**\n   * The `updateUserProfilePicture` function updates the profile picture of the current user in a\n   * Firestore database.\n   * @param {string} picturePath - The `picturePath` parameter in the `updateUserProfilePicture` function\n   * is a string that represents the file path or URL of the new profile picture that will be updated in\n   * the user's profile.\n   */\n  async updateUserProfilePicture(picturePath: string) {\n    await updateDoc(doc(this.refUserProfile(), this.currentUser as string), {\n      profilePicture: picturePath\n    });\n  }\n\n  /**\n   * Creates a new user in firestore\n   */\n  async createUserProfile() {\n    await setDoc(doc(this.firestore, \"user\", this.createUserInfo.id), this.createUserInfo)\n      .then(async () => {\n        const channelId = { channelid: 'eGATth4XDS0ztUbhnYsR' };\n        await addDoc(collection(this.firestore, 'user', this.createUserInfo.id, 'userchannels'), channelId);\n        await addDoc(collection(this.firestore, 'user', this.createUserInfo.id, 'directmessages'), { dmUserId: this.createUserInfo.id });\n        await updateDoc(doc(this.firestore, \"Channels\", channelId.channelid), { users: arrayUnion(this.createUserInfo.id) });\n      });\n  }\n\n  /**\n   * Return the collection to which should be referenced to in a snapshot for example\n   * @returns collection reference - firestore\n   */\n  refUserProfile() {\n    return collection(this.firestore, \"user\")\n  }\n\n  /**\n   * The `refUserChannels` function returns a reference to the user channels collection in Firestore\n   * based on the current user's ID stored in sessionStorage.\n   * @returns The `refUserChannels()` function is returning a reference to the 'userchannels' collection\n   * within the 'user' document corresponding to the user ID stored in the session storage.\n   */\n  refUserChannels() {\n    return collection(this.firestore, 'user', sessionStorage.getItem(\"uid\") as string, 'userchannels')\n  }\n\n  /**\n   * Function to assign incoming data to createUserInfo\n   * @param obj - FormGroup which contains data from the register form\n   * @param uid - user ID from authentification\n   */\n  prepareDataNewUser(obj: any) {\n    this.createUserInfo.name = obj.name;\n    this.createUserInfo.email = obj.email;\n    this.createUserInfo.isLoggedIn = false;\n  }\n\n  /**\n   * Function to assign incoming data to createUserInfo\n   * @param obj - FormGroup which contains data from the register form\n   * @param uid - user ID from authentification\n   */\n  prepareDataNewUserGoogle(obj: any) {\n    this.createUserInfo.name = obj.displayName;\n    this.createUserInfo.email = obj.email;\n    this.createUserInfo.isLoggedIn = false;\n    this.createUserInfo.id = obj.uid;\n    this.createUserInfo.profilePicture = obj.photoURL;\n  }\n\n  /**\n   * Function to assign Profile picture url to createUserInfo\n   * @param url - URL of the img uploaded to the firestore\n   */\n  newUserAvatar(url: any, uid: string) {\n    this.createUserInfo.id = uid;\n    this.createUserInfo.profilePicture = url;\n  }\n\n  /**\n   * The function `getOnlineStatusProfile` retrieves the online status profile of a user with the\n   * specified ID.\n   * @param {string} id - The `id` parameter in the `getOnlineStatusProfile` function is a string that\n   * represents the unique identifier of a user profile.\n   */\n  async getOnlineStatusProfile(id: string) {\n    const docSnap = await getDoc(doc(this.firestore, \"user\", id));\n    this.otherUserInfo.isLoggedIn = docSnap.data()!['isLoggedIn'];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/VerifyComponent.html":{"url":"components/VerifyComponent.html","title":"component - VerifyComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  VerifyComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/verify/verify.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-verify\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            MatDialogClose\n                            ReactiveFormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./verify.component.html\n            \n\n\n\n            \n                styleUrl\n                ./verify.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authService\n                            \n                            \n                                key\n                            \n                            \n                                keyForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                submitKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialogRef: MatDialogRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/components/verify/verify.component.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        submitKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    submitKey()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/verify/verify.component.ts:29\n                        \n                    \n\n\n            \n                \n                        The submitKey function asynchronously verifies a key input, sets a flag to indicate verification,\nand closes a dialog window.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthService\n\n                    \n                \n                \n                    \n                        Default value : inject(AuthService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/verify/verify.component.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/verify/verify.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keyForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/verify/verify.component.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { MatDialogClose, MatDialogRef } from '@angular/material/dialog';\nimport { CommonModule } from '@angular/common';\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-verify',\n  standalone: true,\n  imports: [CommonModule, MatDialogClose, ReactiveFormsModule],\n  templateUrl: './verify.component.html',\n  styleUrl: './verify.component.scss',\n})\nexport class VerifyComponent {\n  authService: AuthService = inject(AuthService);\n  keyForm: FormGroup;\n  key!: string;\n\n  constructor(private dialogRef: MatDialogRef) {\n    this.keyForm = new FormGroup({\n      key: new FormControl(''),\n    });\n  }\n\n/**\n * The `submitKey` function asynchronously verifies a key input, sets a flag to indicate verification,\n * and closes a dialog window.\n */\n  async submitKey() {\n    await this.authService.verifyChange(this.keyForm.controls['key'].value);\n    this.authService.verified = true;\n    this.dialogRef.close()\n  }\n}\n\n    \n\n    \n        \n    Bitte Passwort eingeben\n    \n        \n    \n    Bestätigen\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Bitte Passwort eingeben                    Bestätigen'\n    var COMPONENTS = [{'name': 'AddNewChannelComponent', 'selector': 'app-add-new-channel'},{'name': 'AddNewUserToChannelComponent', 'selector': 'app-add-new-user-to-channel'},{'name': 'AddUserDialogComponent', 'selector': 'app-add-user-dialog'},{'name': 'AddUserToChannelDialogComponent', 'selector': 'app-add-user-to-channel-dialog'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelComponent', 'selector': 'app-channel'},{'name': 'ChannelMessagesComponent', 'selector': 'app-channel-messages'},{'name': 'ChooseavatarComponent', 'selector': 'app-chooseavatar'},{'name': 'ConfirmpasswordComponent', 'selector': 'app-confirmpassword'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MainsectionComponent', 'selector': 'app-mainsection'},{'name': 'MessageComponent', 'selector': 'app-message'},{'name': 'PrivacypolicyComponent', 'selector': 'app-privacypolicy'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'ResetpasswordComponent', 'selector': 'app-resetpassword'},{'name': 'ShowProfileComponent', 'selector': 'app-show-profile'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'UserMenuDialogComponent', 'selector': 'app-user-menu-dialog'},{'name': 'VerifyComponent', 'selector': 'app-verify'}];\n    var DIRECTIVES = [{'name': 'OutsideclickDirective', 'selector': '[appOutsideclick]'}];\n    var ACTUAL_COMPONENT = {'name': 'VerifyComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/imprint/imprint.component.ts\n            \n            component\n            ImprintComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/login/chooseavatar/chooseavatar.component.ts\n            \n            component\n            ChooseavatarComponent\n            \n                46 %\n                (7/15)\n            \n        \n        \n            \n                \n                src/app/login/confirmpassword/confirmpassword.component.ts\n            \n            component\n            ConfirmpasswordComponent\n            \n                42 %\n                (6/14)\n            \n        \n        \n            \n                \n                src/app/login/login.component.ts\n            \n            component\n            LoginComponent\n            \n                37 %\n                (14/37)\n            \n        \n        \n            \n                \n                src/app/login/register/register.component.ts\n            \n            component\n            RegisterComponent\n            \n                50 %\n                (8/16)\n            \n        \n        \n            \n                \n                src/app/login/resetpassword/resetpassword.component.ts\n            \n            component\n            ResetpasswordComponent\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/mainsection/channel/add-user-dialog/add-user-dialog.component.ts\n            \n            component\n            AddUserDialogComponent\n            \n                21 %\n                (3/14)\n            \n        \n        \n            \n                \n                src/app/mainsection/channel/add-user-to-channel-dialog/add-user-to-channel-dialog.component.ts\n            \n            component\n            AddUserToChannelDialogComponent\n            \n                6 %\n                (1/15)\n            \n        \n        \n            \n                \n                src/app/mainsection/channel/channel-messages/channel-messages.component.ts\n            \n            component\n            ChannelMessagesComponent\n            \n                39 %\n                (13/33)\n            \n        \n        \n            \n                \n                src/app/mainsection/channel/channel-messages/message/message.component.ts\n            \n            component\n            MessageComponent\n            \n                49 %\n                (27/55)\n            \n        \n        \n            \n                \n                src/app/mainsection/channel/channel.component.ts\n            \n            component\n            ChannelComponent\n            \n                43 %\n                (16/37)\n            \n        \n        \n            \n                \n                src/app/mainsection/channel/edit-channel-dialog/edit-channel-dialog.component.ts\n            \n            component\n            EditChannelDialogComponent\n            \n                28 %\n                (4/14)\n            \n        \n        \n            \n                \n                src/app/mainsection/mainsection.component.ts\n            \n            component\n            MainsectionComponent\n            \n                41 %\n                (14/34)\n            \n        \n        \n            \n                \n                src/app/mainsection/sidebar/add-new-channel/add-new-channel.component.ts\n            \n            component\n            AddNewChannelComponent\n            \n                27 %\n                (3/11)\n            \n        \n        \n            \n                \n                src/app/mainsection/sidebar/add-new-user-to-channel/add-new-user-to-channel.component.ts\n            \n            component\n            AddNewUserToChannelComponent\n            \n                36 %\n                (7/19)\n            \n        \n        \n            \n                \n                src/app/mainsection/sidebar/sidebar.component.ts\n            \n            component\n            SidebarComponent\n            \n                40 %\n                (11/27)\n            \n        \n        \n            \n                \n                src/app/mainsection/thread/thread.component.ts\n            \n            component\n            ThreadComponent\n            \n                50 %\n                (33/66)\n            \n        \n        \n            \n                \n                src/app/outsideclick.directive.ts\n            \n            directive\n            OutsideclickDirective\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/privacypolicy/privacypolicy.component.ts\n            \n            component\n            PrivacypolicyComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/components/header/header.component.ts\n            \n            component\n            HeaderComponent\n            \n                33 %\n                (6/18)\n            \n        \n        \n            \n                \n                src/app/shared/components/header/user-menu-dialog/user-menu-dialog.component.ts\n            \n            component\n            UserMenuDialogComponent\n            \n                30 %\n                (3/10)\n            \n        \n        \n            \n                \n                src/app/shared/components/show-profile/show-profile.component.ts\n            \n            component\n            ShowProfileComponent\n            \n                34 %\n                (10/29)\n            \n        \n        \n            \n                \n                src/app/shared/components/verify/verify.component.ts\n            \n            component\n            VerifyComponent\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/channelinfo.ts\n            \n            interface\n            ChannelInfo\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/userinfo.ts\n            \n            interface\n            UserInfo\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/shared/models/channels.class.ts\n            \n            class\n            ChannelData\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/shared/models/message.class.ts\n            \n            class\n            MessageData\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/app/shared/models/userdata.class.ts\n            \n            class\n            UserData\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/shared/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                src/app/shared/services/channel.service.ts\n            \n            injectable\n            ChannelService\n            \n                37 %\n                (22/58)\n            \n        \n        \n            \n                \n                src/app/shared/services/emoji.service.ts\n            \n            injectable\n            EmojiService\n            \n                52 %\n                (12/23)\n            \n        \n        \n            \n                \n                src/app/shared/services/mutation.observer.service.ts\n            \n            injectable\n            MutationObserverService\n            \n                25 %\n                (2/8)\n            \n        \n        \n            \n                \n                src/app/shared/services/resize-listener.service.ts\n            \n            injectable\n            ResizeListenerService\n            \n                91 %\n                (11/12)\n            \n        \n        \n            \n                \n                src/app/shared/services/sidebar.service.ts\n            \n            injectable\n            SidebarService\n            \n                44 %\n                (8/18)\n            \n        \n        \n            \n                \n                src/app/shared/services/state-service.service.ts\n            \n            injectable\n            StateService\n            \n                50 %\n                (5/10)\n            \n        \n        \n            \n                \n                src/app/shared/services/storage.service.ts\n            \n            injectable\n            StorageService\n            \n                38 %\n                (16/42)\n            \n        \n        \n            \n                \n                src/app/shared/services/thread.service.ts\n            \n            injectable\n            ThreadService\n            \n                27 %\n                (8/29)\n            \n        \n        \n            \n                \n                src/app/shared/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                62 %\n                (17/27)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^17.0.0\n        \n            @angular/cdk : ^17.3.10\n        \n            @angular/common : ^17.0.0\n        \n            @angular/compiler : ^17.0.0\n        \n            @angular/core : ^17.0.0\n        \n            @angular/fire : ^17.1.0\n        \n            @angular/forms : ^17.0.0\n        \n            @angular/material : ^17.3.10\n        \n            @angular/platform-browser : ^17.0.0\n        \n            @angular/platform-browser-dynamic : ^17.0.0\n        \n            @angular/router : ^17.0.0\n        \n            @ctrl/ngx-emoji-mart : ^9.2.0\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.14.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDaBubble\nThis project was generated with Angular CLI version 17.0.6.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The application will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    23 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideRouter(routes, withViewTransitions()),\n    provideAnimations(),\n    provideFirebaseApp(() =>\n      initializeApp({\n        projectId: 'da-bubble-e6d79',\n        appId: '1:728652156728:web:52fda9767640c5a89efbcd',\n        storageBucket: 'da-bubble-e6d79.appspot.com',\n        apiKey: Environment.API_KEY,\n        authDomain: 'da-bubble-e6d79.firebaseapp.com',\n        messagingSenderId: '728652156728',\n      })\n    ),\n    provideFirestore(() => getFirestore()),\n    provideStorage(() => getStorage()),\n    provideAuth(() => getAuth()),\n  ],\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
